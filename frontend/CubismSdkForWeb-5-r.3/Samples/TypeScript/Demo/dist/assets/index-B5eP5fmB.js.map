{"version":3,"file":"index-B5eP5fmB.js","sources":["../../../../../Framework/src/type/csmvector.ts","../../../../../Framework/src/type/csmstring.ts","../../../../../Framework/src/id/cubismid.ts","../../../../../Framework/src/id/cubismidmanager.ts","../../../../../Framework/src/math/cubismmatrix44.ts","../../../../../Framework/src/type/csmrectf.ts","../../../../../Framework/src/rendering/cubismrenderer.ts","../../../../../Framework/src/utils/cubismdebug.ts","../../../../../Framework/src/type/csmmap.ts","../../../../../Framework/src/utils/cubismjsonextension.ts","../../../../../Framework/src/utils/cubismjson.ts","../../../../../Framework/src/live2dcubismframework.ts","../../src/lappdefine.ts","../../src/lapppal.ts","../../src/lappglmanager.ts","../../../../../Framework/src/cubismdefaultparameterid.ts","../../../../../Framework/src/icubismmodelsetting.ts","../../../../../Framework/src/cubismmodelsettingjson.ts","../../../../../Framework/src/effect/cubismbreath.ts","../../../../../Framework/src/effect/cubismeyeblink.ts","../../../../../Framework/src/effect/cubismpose.ts","../../../../../Framework/src/math/cubismmodelmatrix.ts","../../../../../Framework/src/math/cubismvector2.ts","../../../../../Framework/src/math/cubismmath.ts","../../../../../Framework/src/math/cubismtargetpoint.ts","../../../../../Framework/src/motion/acubismmotion.ts","../../../../../Framework/src/motion/cubismexpressionmotion.ts","../../../../../Framework/src/motion/cubismmotionqueueentry.ts","../../../../../Framework/src/motion/cubismmotionqueuemanager.ts","../../../../../Framework/src/motion/cubismexpressionmotionmanager.ts","../../../../../Framework/src/motion/cubismmotioninternal.ts","../../../../../Framework/src/motion/cubismmotionjson.ts","../../../../../Framework/src/motion/cubismmotion.ts","../../../../../Framework/src/motion/cubismmotionmanager.ts","../../../../../Framework/src/physics/cubismphysicsinternal.ts","../../../../../Framework/src/physics/cubismphysicsjson.ts","../../../../../Framework/src/physics/cubismphysics.ts","../../../../../Framework/src/rendering/cubismclippingmanager.ts","../../../../../Framework/src/rendering/cubismshader_webgl.ts","../../../../../Framework/src/rendering/cubismrenderer_webgl.ts","../../../../../Framework/src/model/cubismmodel.ts","../../../../../Framework/src/model/cubismmoc.ts","../../../../../Framework/src/model/cubismmodeluserdatajson.ts","../../../../../Framework/src/model/cubismmodeluserdata.ts","../../../../../Framework/src/model/cubismusermodel.ts","../../src/lappwavfilehandler.ts","../../src/lappmodel.ts","../../src/lapplive2dmanager.ts","../../src/lapptexturemanager.ts","../../../../../Framework/src/math/cubismviewmatrix.ts","../../src/lappsprite.ts","../../src/touchmanager.ts","../../src/lappview.ts","../../src/lappsubdelegate.ts","../../src/lappdelegate.ts","../../src/main.ts","../../chat-agent.js"],"sourcesContent":["/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * ベクター型（可変配列型）\n */\nexport class csmVector<T> {\n  /**\n   * 引数付きコンストラクタ\n   * @param iniitalCapacity 初期化後のキャパシティ。データサイズは_capacity * sizeof(T)\n   * @param zeroClear trueなら初期化時に確保した領域を0で埋める\n   */\n  constructor(initialCapacity = 0) {\n    if (initialCapacity < 1) {\n      this._ptr = [];\n      this._capacity = 0;\n      this._size = 0;\n    } else {\n      this._ptr = new Array(initialCapacity);\n      this._capacity = initialCapacity;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * インデックスで指定した要素を返す\n   */\n  public at(index: number): T {\n    return this._ptr[index];\n  }\n\n  /**\n   * 要素をセット\n   * @param index 要素をセットするインデックス\n   * @param value セットする要素\n   */\n  public set(index: number, value: T): void {\n    this._ptr[index] = value;\n  }\n\n  /**\n   * コンテナを取得する\n   */\n  public get(offset = 0): T[] {\n    const ret: T[] = new Array<T>();\n    for (let i = offset; i < this._size; i++) {\n      ret.push(this._ptr[i]);\n    }\n    return ret;\n  }\n\n  /**\n   * pushBack処理、コンテナに新たな要素を追加する\n   * @param value PushBack処理で追加する値\n   */\n  public pushBack(value: T): void {\n    if (this._size >= this._capacity) {\n      this.prepareCapacity(\n        this._capacity == 0 ? csmVector.DefaultSize : this._capacity * 2\n      );\n    }\n\n    this._ptr[this._size++] = value;\n  }\n\n  /**\n   * コンテナの全要素を解放する\n   */\n  public clear(): void {\n    this._ptr.length = 0;\n    this._size = 0;\n  }\n\n  /**\n   * コンテナの要素数を返す\n   * @return コンテナの要素数\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナの全要素に対して代入処理を行う\n   * @param newSize 代入処理後のサイズ\n   * @param value 要素に代入する値\n   */\n  public assign(newSize: number, value: T): void {\n    const curSize = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n    }\n\n    for (let i = 0; i < newSize; i++) {\n      this._ptr[i] = value;\n    }\n\n    this._size = newSize;\n  }\n\n  /**\n   * サイズ変更\n   */\n  public resize(newSize: number, value: T = null): void {\n    this.updateSize(newSize, value, true);\n  }\n\n  /**\n   * サイズ変更\n   */\n  public updateSize(\n    newSize: number,\n    value: any = null,\n    callPlacementNew = true\n  ): void {\n    const curSize: number = this._size;\n\n    if (curSize < newSize) {\n      this.prepareCapacity(newSize); // capacity更新\n\n      if (callPlacementNew) {\n        for (let i: number = this._size; i < newSize; i++) {\n          if (typeof value == 'function') {\n            // new\n            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\n          } // プリミティブ型なので値渡し\n          else {\n            this._ptr[i] = value;\n          }\n        }\n      } else {\n        for (let i: number = this._size; i < newSize; i++) {\n          this._ptr[i] = value;\n        }\n      }\n    } else {\n      // newSize <= this._size\n      //---\n      const sub = this._size - newSize;\n      this._ptr.splice(this._size - sub, sub); // 不要なので破棄する\n    }\n    this._size = newSize;\n  }\n\n  /**\n   * コンテナにコンテナ要素を挿入する\n   * @param position 挿入する位置\n   * @param begin 挿入するコンテナの開始位置\n   * @param end 挿入するコンテナの終端位置\n   */\n  public insert(\n    position: iterator<T>,\n    begin: iterator<T>,\n    end: iterator<T>\n  ): void {\n    let dstSi: number = position._index;\n    const srcSi: number = begin._index;\n    const srcEi: number = end._index;\n\n    const addCount: number = srcEi - srcSi;\n\n    this.prepareCapacity(this._size + addCount);\n\n    // 挿入用の既存データをシフトして隙間を作る\n    const addSize = this._size - dstSi;\n    if (addSize > 0) {\n      for (let i = 0; i < addSize; i++) {\n        this._ptr.splice(dstSi + i, 0, null);\n      }\n    }\n\n    for (let i: number = srcSi; i < srcEi; i++, dstSi++) {\n      this._ptr[dstSi] = begin._vector._ptr[i];\n    }\n\n    this._size = this._size + addCount;\n  }\n\n  /**\n   * コンテナからインデックスで指定した要素を削除する\n   * @param index インデックス値\n   * @return true 削除実行\n   * @return false 削除範囲外\n   */\n  public remove(index: number): boolean {\n    if (index < 0 || this._size <= index) {\n      return false; // 削除範囲外\n    }\n\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    return true;\n  }\n\n  /**\n   * コンテナから要素を削除して他の要素をシフトする\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<T>): iterator<T> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._ptr.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<T> = new iterator<T>(this, index); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない.\n   */\n  public prepareCapacity(newSize: number): void {\n    if (newSize > this._capacity) {\n      if (this._capacity == 0) {\n        this._ptr = new Array(newSize);\n        this._capacity = newSize;\n      } else {\n        this._ptr.length = newSize;\n        this._capacity = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<T> {\n    const ite: iterator<T> =\n      this._size == 0 ? this.end() : new iterator<T>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<T> {\n    const ite: iterator<T> = new iterator<T>(this, this._size);\n    return ite;\n  }\n\n  public getOffset(offset: number): csmVector<T> {\n    const newVector = new csmVector<T>();\n    newVector._ptr = this.get(offset);\n    newVector._size = this.get(offset).length;\n    newVector._capacity = this.get(offset).length;\n\n    return newVector;\n  }\n\n  _ptr: T[]; // コンテナの先頭アドレス\n  _size: number; // コンテナの要素数\n  _capacity: number; // コンテナのキャパシティ\n\n  static readonly DefaultSize = 10; // コンテナ初期化のデフォルトサイズ\n}\n\nexport class iterator<T> {\n  /**\n   * コンストラクタ\n   */\n  public constructor(v?: csmVector<T>, index?: number) {\n    this._vector = v != undefined ? v : null;\n    this._index = index != undefined ? index : 0;\n  }\n\n  /**\n   * 代入\n   */\n  public set(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * 前置き++演算\n   */\n  public preIncrement(): iterator<T> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算\n   */\n  public preDecrement(): iterator<T> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子\n   */\n  public increment(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子\n   */\n  public decrement(): iterator<T> {\n    const iteold = new iterator<T>(this._vector, this._index--); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * ptr\n   */\n  public ptr(): T {\n    return this._vector._ptr[this._index];\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public substitution(ite: iterator<T>): iterator<T> {\n    this._index = ite._index;\n    this._vector = ite._vector;\n    return this;\n  }\n\n  /**\n   * !=演算子のオーバーロード\n   */\n  public notEqual(ite: iterator<T>): boolean {\n    return this._index != ite._index || this._vector != ite._vector;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _vector: csmVector<T>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmvector';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmVector = $.csmVector;\n  export type csmVector<T> = $.csmVector<T>;\n  export const iterator = $.iterator;\n  export type iterator<T> = $.iterator<T>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 文字列クラス。\n */\nexport class csmString {\n  /**\n   * 文字列を後方に追加する\n   *\n   * @param c 追加する文字列\n   * @return 更新された文字列\n   */\n  public append(c: string, length?: number): csmString {\n    this.s += length !== undefined ? c.substr(0, length) : c;\n\n    return this;\n  }\n\n  /**\n   * 文字サイズを拡張して文字を埋める\n   * @param length    拡張する文字数\n   * @param v         埋める文字\n   * @return 更新された文字列\n   */\n  public expansion(length: number, v: string): csmString {\n    for (let i = 0; i < length; i++) {\n      this.append(v);\n    }\n\n    return this;\n  }\n\n  /**\n   * 文字列の長さをバイト数で取得する\n   */\n  public getBytes(): number {\n    return encodeURIComponent(this.s).replace(/%../g, 'x').length;\n  }\n\n  /**\n   * 文字列の長さを返す\n   */\n  public getLength(): number {\n    return this.s.length;\n  }\n\n  /**\n   * 文字列比較 <\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より小さい\n   * @return false:   比較する文字列より大きい\n   */\n  public isLess(s: csmString): boolean {\n    return this.s < s.s;\n  }\n\n  /**\n   * 文字列比較 >\n   * @param s 比較する文字列\n   * @return true:    比較する文字列より大きい\n   * @return false:   比較する文字列より小さい\n   */\n  public isGreat(s: csmString): boolean {\n    return this.s > s.s;\n  }\n\n  /**\n   * 文字列比較 ==\n   * @param s 比較する文字列\n   * @return true:    比較する文字列と等しい\n   * @return false:   比較する文字列と異なる\n   */\n  public isEqual(s: string): boolean {\n    return this.s == s;\n  }\n\n  /**\n   * 文字列が空かどうか\n   * @return true: 空の文字列\n   * @return false: 値が設定されている\n   */\n  public isEmpty(): boolean {\n    return this.s.length == 0;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: string) {\n    this.s = s;\n  }\n\n  s: string;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmstring';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmString = $.csmString;\n  export type csmString = $.csmString;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmString } from '../type/csmstring';\n\n/**\n * パラメータ名・パーツ名・Drawable名を保持\n *\n * パラメータ名・パーツ名・Drawable名を保持するクラス。\n *\n * @note 指定したID文字列からCubismIdを取得する際はこのクラスの生成メソッドを呼ばず、\n *       CubismIdManager().getId(id)を使用してください\n */\nexport class CubismId {\n  /**\n   * 内部で使用するCubismIdクラス生成メソッド\n   *\n   * @param id ID文字列\n   * @returns CubismId\n   * @note 指定したID文字列からCubismIdを取得する際は\n   *       CubismIdManager().getId(id)を使用してください\n   */\n  public static createIdInternal(id: string | csmString) {\n    return new CubismId(id);\n  }\n\n  /**\n   * ID名を取得する\n   */\n  public getString(): csmString {\n    return this._id;\n  }\n\n  /**\n   * idを比較\n   * @param c 比較するid\n   * @return 同じならばtrue,異なっていればfalseを返す\n   */\n  public isEqual(c: string | csmString | CubismId): boolean {\n    if (typeof c === 'string') {\n      return this._id.isEqual(c);\n    } else if (c instanceof csmString) {\n      return this._id.isEqual(c.s);\n    } else if (c instanceof CubismId) {\n      return this._id.isEqual(c._id.s);\n    }\n    return false;\n  }\n\n  /**\n   * idを比較\n   * @param c 比較するid\n   * @return 同じならばtrue,異なっていればfalseを返す\n   */\n  public isNotEqual(c: string | csmString | CubismId): boolean {\n    if (typeof c == 'string') {\n      return !this._id.isEqual(c);\n    } else if (c instanceof csmString) {\n      return !this._id.isEqual(c.s);\n    } else if (c instanceof CubismId) {\n      return !this._id.isEqual(c._id.s);\n    }\n    return false;\n  }\n\n  /**\n   * プライベートコンストラクタ\n   *\n   * @note ユーザーによる生成は許可しません\n   */\n  private constructor(id: string | csmString) {\n    if (typeof id === 'string') {\n      this._id = new csmString(id);\n      return;\n    }\n\n    this._id = id;\n  }\n\n  private _id: csmString; // ID名\n}\n\nexport declare type CubismIdHandle = CubismId;\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismId = $.CubismId;\n  export type CubismId = $.CubismId;\n  export type CubismIdHandle = $.CubismIdHandle;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismId } from './cubismid';\n\n/**\n * ID名の管理\n *\n * ID名を管理する。\n */\nexport class CubismIdManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._ids = new csmVector<CubismId>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (let i = 0; i < this._ids.getSize(); ++i) {\n      this._ids.set(i, void 0);\n    }\n    this._ids = null;\n  }\n\n  /**\n   * ID名をリストから登録\n   *\n   * @param ids ID名リスト\n   * @param count IDの個数\n   */\n  public registerIds(ids: string[] | csmString[]): void {\n    for (let i = 0; i < ids.length; i++) {\n      this.registerId(ids[i]);\n    }\n  }\n\n  /**\n   * ID名を登録\n   *\n   * @param id ID名\n   */\n  public registerId(id: string | csmString): CubismId {\n    let result: CubismId = null;\n\n    if ('string' == typeof id) {\n      if ((result = this.findId(id)) != null) {\n        return result;\n      }\n\n      result = CubismId.createIdInternal(id);\n      this._ids.pushBack(result);\n    } else {\n      return this.registerId(id.s);\n    }\n\n    return result;\n  }\n\n  /**\n   * ID名からIDを取得する\n   *\n   * @param id ID名\n   */\n  public getId(id: csmString | string): CubismId {\n    return this.registerId(id);\n  }\n\n  /**\n   * ID名からIDの確認\n   *\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExist(id: csmString | string): boolean {\n    if ('string' == typeof id) {\n      return this.findId(id) != null;\n    }\n    return this.isExist(id.s);\n  }\n\n  /**\n   * ID名からIDを検索する。\n   *\n   * @param id ID名\n   * @return 登録されているID。なければNULL。\n   */\n  private findId(id: string): CubismId {\n    for (let i = 0; i < this._ids.getSize(); ++i) {\n      if (this._ids.at(i).getString().isEqual(id)) {\n        return this._ids.at(i);\n      }\n    }\n\n    return null;\n  }\n\n  private _ids: csmVector<CubismId>; // 登録されているIDのリスト\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismidmanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismIdManager = $.CubismIdManager;\n  export type CubismIdManager = $.CubismIdManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 4x4の行列\n *\n * 4x4行列の便利クラス。\n */\nexport class CubismMatrix44 {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._tr = new Float32Array(16); // 4 * 4のサイズ\n    this.loadIdentity();\n  }\n\n  /**\n   * 受け取った２つの行列の乗算を行う。\n   *\n   * @param a 行列a\n   * @param b 行列b\n   * @return 乗算結果の行列\n   */\n  public static multiply(\n    a: Float32Array,\n    b: Float32Array,\n    dst: Float32Array\n  ): void {\n    const c: Float32Array = new Float32Array([\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0\n    ]);\n\n    const n = 4;\n\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < n; ++j) {\n        for (let k = 0; k < n; ++k) {\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n        }\n      }\n    }\n\n    for (let i = 0; i < 16; ++i) {\n      dst[i] = c[i];\n    }\n  }\n\n  /**\n   * 単位行列に初期化する\n   */\n  public loadIdentity(): void {\n    const c: Float32Array = new Float32Array([\n      1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,\n      1.0\n    ]);\n\n    this.setMatrix(c);\n  }\n\n  /**\n   * 行列を設定\n   *\n   * @param tr 16個の浮動小数点数で表される4x4の行列\n   */\n  public setMatrix(tr: Float32Array): void {\n    for (let i = 0; i < 16; ++i) {\n      this._tr[i] = tr[i];\n    }\n  }\n\n  /**\n   * 行列を浮動小数点数の配列で取得\n   *\n   * @return 16個の浮動小数点数で表される4x4の行列\n   */\n  public getArray(): Float32Array {\n    return this._tr;\n  }\n\n  /**\n   * X軸の拡大率を取得\n   * @return X軸の拡大率\n   */\n  public getScaleX(): number {\n    return this._tr[0];\n  }\n\n  /**\n   * Y軸の拡大率を取得する\n   *\n   * @return Y軸の拡大率\n   */\n  public getScaleY(): number {\n    return this._tr[5];\n  }\n\n  /**\n   * X軸の移動量を取得\n   * @return X軸の移動量\n   */\n  public getTranslateX(): number {\n    return this._tr[12];\n  }\n\n  /**\n   * Y軸の移動量を取得\n   * @return Y軸の移動量\n   */\n  public getTranslateY(): number {\n    return this._tr[13];\n  }\n\n  /**\n   * X軸の値を現在の行列で計算\n   *\n   * @param src X軸の値\n   * @return 現在の行列で計算されたX軸の値\n   */\n  public transformX(src: number): number {\n    return this._tr[0] * src + this._tr[12];\n  }\n\n  /**\n   * Y軸の値を現在の行列で計算\n   *\n   * @param src Y軸の値\n   * @return 現在の行列で計算されたY軸の値\n   */\n  public transformY(src: number): number {\n    return this._tr[5] * src + this._tr[13];\n  }\n\n  /**\n   * X軸の値を現在の行列で逆計算\n   */\n  public invertTransformX(src: number): number {\n    return (src - this._tr[12]) / this._tr[0];\n  }\n\n  /**\n   * Y軸の値を現在の行列で逆計算\n   */\n  public invertTransformY(src: number): number {\n    return (src - this._tr[13]) / this._tr[5];\n  }\n\n  /**\n   * 現在の行列の位置を起点にして移動\n   *\n   * 現在の行列の位置を起点にして相対的に移動する。\n   *\n   * @param x X軸の移動量\n   * @param y Y軸の移動量\n   */\n  public translateRelative(x: number, y: number): void {\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      x,\n      y,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 現在の行列の位置を移動\n   *\n   * 現在の行列の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   * @param y y軸の移動量\n   */\n  public translate(x: number, y: number): void {\n    this._tr[12] = x;\n    this._tr[13] = y;\n  }\n\n  /**\n   * 現在の行列のX軸の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   */\n  public translateX(x: number): void {\n    this._tr[12] = x;\n  }\n\n  /**\n   * 現在の行列のY軸の位置を指定した位置へ移動する\n   *\n   * @param y Y軸の移動量\n   */\n  public translateY(y: number): void {\n    this._tr[13] = y;\n  }\n\n  /**\n   * 現在の行列の拡大率を相対的に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  public scaleRelative(x: number, y: number): void {\n    const tr1: Float32Array = new Float32Array([\n      x,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      y,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 現在の行列の拡大率を指定した倍率に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  public scale(x: number, y: number): void {\n    this._tr[0] = x;\n    this._tr[5] = y;\n  }\n\n  /**\n   * 引数で与えられた行列にこの行列を乗算する。\n   * (引数で与えられた行列) * (この行列)\n   *\n   * @note 関数名と実際の計算内容に乖離があるため、今後計算順が修正される可能性があります。\n   * @param m 行列\n   */\n  public multiplyByMatrix(m: CubismMatrix44): void {\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  public clone(): CubismMatrix44 {\n    const cloneMatrix: CubismMatrix44 = new CubismMatrix44();\n\n    for (let i = 0; i < this._tr.length; i++) {\n      cloneMatrix._tr[i] = this._tr[i];\n    }\n\n    return cloneMatrix;\n  }\n\n  protected _tr: Float32Array; // 4x4行列データ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmatrix44';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMatrix44 = $.CubismMatrix44;\n  export type CubismMatrix44 = $.CubismMatrix44;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 矩形形状（座標・長さはfloat値）を定義するクラス\n */\nexport class csmRect {\n  /**\n   * コンストラクタ\n   * @param x 左端X座標\n   * @param y 上端Y座標\n   * @param w 幅\n   * @param h 高さ\n   */\n  public constructor(x?: number, y?: number, w?: number, h?: number) {\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n  }\n\n  /**\n   * 矩形中央のX座標を取得する\n   */\n  public getCenterX(): number {\n    return this.x + 0.5 * this.width;\n  }\n\n  /**\n   * 矩形中央のY座標を取得する\n   */\n  public getCenterY(): number {\n    return this.y + 0.5 * this.height;\n  }\n\n  /**\n   * 右側のX座標を取得する\n   */\n  public getRight(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * 下端のY座標を取得する\n   */\n  public getBottom(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * 矩形に値をセットする\n   * @param r 矩形のインスタンス\n   */\n  public setRect(r: csmRect): void {\n    this.x = r.x;\n    this.y = r.y;\n    this.width = r.width;\n    this.height = r.height;\n  }\n\n  /**\n   * 矩形中央を軸にして縦横を拡縮する\n   * @param w 幅方向に拡縮する量\n   * @param h 高さ方向に拡縮する量\n   */\n  public expand(w: number, h: number) {\n    this.x -= w;\n    this.y -= h;\n    this.width += w * 2.0;\n    this.height += h * 2.0;\n  }\n\n  public x: number; // 左端X座標\n  public y: number; // 上端Y座標\n  public width: number; // 幅\n  public height: number; // 高さ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmrectf';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmRect = $.csmRect;\n  export type csmRect = $.csmRect;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmRect } from '../type/csmrectf';\nimport { ICubismClippingManager } from './cubismclippingmanager';\n\n/**\n * モデル描画を処理するレンダラ\n *\n * サブクラスに環境依存の描画命令を記述する。\n */\nexport abstract class CubismRenderer {\n  /**\n   * レンダラのインスタンスを生成して取得する\n   *\n   * @return レンダラのインスタンス\n   */\n  public static create(): CubismRenderer {\n    return null;\n  }\n\n  /**\n   * レンダラのインスタンスを解放する\n   */\n  public static delete(renderer: CubismRenderer): void {\n    renderer = null;\n  }\n\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   * @param model モデルのインスタンス\n   */\n  public initialize(model: CubismModel): void {\n    this._model = model;\n  }\n\n  /**\n   * モデルを描画する\n   */\n  public drawModel(): void {\n    if (this.getModel() == null) return;\n\n    this.saveProfile();\n\n    this.doDrawModel();\n\n    this.restoreProfile();\n  }\n\n  /**\n   * Model-View-Projection 行列をセットする\n   * 配列は複製されるので、元の配列は外で破棄して良い\n   * @param matrix44 Model-View-Projection 行列\n   */\n  public setMvpMatrix(matrix44: CubismMatrix44): void {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n\n  /**\n   * Model-View-Projection 行列を取得する\n   * @return Model-View-Projection 行列\n   */\n  public getMvpMatrix(): CubismMatrix44 {\n    return this._mvpMatrix4x4;\n  }\n\n  /**\n   * モデルの色をセットする\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\n   * @param red 赤チャンネルの値\n   * @param green 緑チャンネルの値\n   * @param blue 青チャンネルの値\n   * @param alpha αチャンネルの値\n   */\n  public setModelColor(\n    red: number,\n    green: number,\n    blue: number,\n    alpha: number\n  ): void {\n    if (red < 0.0) {\n      red = 0.0;\n    } else if (red > 1.0) {\n      red = 1.0;\n    }\n\n    if (green < 0.0) {\n      green = 0.0;\n    } else if (green > 1.0) {\n      green = 1.0;\n    }\n\n    if (blue < 0.0) {\n      blue = 0.0;\n    } else if (blue > 1.0) {\n      blue = 1.0;\n    }\n\n    if (alpha < 0.0) {\n      alpha = 0.0;\n    } else if (alpha > 1.0) {\n      alpha = 1.0;\n    }\n\n    this._modelColor.r = red;\n    this._modelColor.g = green;\n    this._modelColor.b = blue;\n    this._modelColor.a = alpha;\n  }\n\n  /**\n   * モデルの色を取得する\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\n   *\n   * @return RGBAのカラー情報\n   */\n  public getModelColor(): CubismTextureColor {\n    return JSON.parse(JSON.stringify(this._modelColor));\n  }\n\n  /**\n   * 透明度を考慮したモデルの色を計算する。\n   *\n   * @param opacity 透明度\n   *\n   * @return RGBAのカラー情報\n   */\n  getModelColorWithOpacity(opacity: number): CubismTextureColor {\n    const modelColorRGBA: CubismTextureColor = this.getModelColor();\n    modelColorRGBA.a *= opacity;\n    if (this.isPremultipliedAlpha()) {\n      modelColorRGBA.r *= modelColorRGBA.a;\n      modelColorRGBA.g *= modelColorRGBA.a;\n      modelColorRGBA.b *= modelColorRGBA.a;\n    }\n    return modelColorRGBA;\n  }\n\n  /**\n   * 乗算済みαの有効・無効をセットする\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsPremultipliedAlpha(enable: boolean): void {\n    this._isPremultipliedAlpha = enable;\n  }\n\n  /**\n   * 乗算済みαの有効・無効を取得する\n   * @return true 乗算済みのα有効\n   * @return false 乗算済みのα無効\n   */\n  public isPremultipliedAlpha(): boolean {\n    return this._isPremultipliedAlpha;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効をセットする。\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  public setIsCulling(culling: boolean): void {\n    this._isCulling = culling;\n  }\n\n  /**\n   * カリング（片面描画）の有効・無効を取得する。\n   * @return true カリング有効\n   * @return false カリング無効\n   */\n  public isCulling(): boolean {\n    return this._isCulling;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * パラメータ値の影響度はレンダラの実装に依存する\n   * @param n パラメータの値\n   */\n  public setAnisotropy(n: number): void {\n    this._anisotropy = n;\n  }\n\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * @return 異方性フィルタリングのパラメータ\n   */\n  public getAnisotropy(): number {\n    return this._anisotropy;\n  }\n\n  /**\n   * レンダリングするモデルを取得する\n   * @return レンダリングするモデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * マスク描画の方式を変更する。\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\n   * レンダリング品質は高いが描画処理負荷は増す\n   * @param high 高精細マスクに切り替えるか？\n   */\n  public useHighPrecisionMask(high: boolean): void {\n    this._useHighPrecisionMask = high;\n  }\n\n  /**\n   * マスクの描画方式を取得する\n   * @return true 高精細方式\n   * @return false デフォルト\n   */\n  public isUsingHighPrecisionMask(): boolean {\n    return this._useHighPrecisionMask;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor() {\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisotropy = 0.0;\n    this._model = null;\n    this._modelColor = new CubismTextureColor();\n    this._useHighPrecisionMask = false;\n\n    // 単位行列に初期化\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n\n  /**\n   * モデル描画の実装\n   */\n  public abstract doDrawModel(): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを保持する\n   */\n  protected abstract saveProfile(): void;\n\n  /**\n   * モデル描画直前のレンダラのステートを復帰する\n   */\n  protected abstract restoreProfile(): void;\n\n  /**\n   * レンダラが保持する静的なリソースを開放する\n   */\n  public static staticRelease: any;\n\n  protected _mvpMatrix4x4: CubismMatrix44; // Model-View-Projection 行列\n  protected _modelColor: CubismTextureColor; // モデル自体のカラー（RGBA）\n  protected _isCulling: boolean; // カリングが有効ならtrue\n  protected _isPremultipliedAlpha: boolean; // 乗算済みαならtrue\n  protected _anisotropy: any; // テクスチャの異方性フィルタリングのパラメータ\n  protected _model: CubismModel; // レンダリング対象のモデル\n  protected _useHighPrecisionMask: boolean; // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\n}\n\nexport enum CubismBlendMode {\n  CubismBlendMode_Normal = 0, // 通常\n  CubismBlendMode_Additive = 1, // 加算\n  CubismBlendMode_Multiplicative = 2 // 乗算\n}\n\n/**\n * テクスチャの色をRGBAで扱うためのクラス\n */\nexport class CubismTextureColor {\n  /**\n   * コンストラクタ\n   */\n  constructor(r = 1.0, g = 1.0, b = 1.0, a = 1.0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  r: number; // 赤チャンネル\n  g: number; // 緑チャンネル\n  b: number; // 青チャンネル\n  a: number; // αチャンネル\n}\n\n/**\n * クリッピングマスクのコンテキスト\n */\nexport abstract class CubismClippingContext {\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(clippingDrawableIndices: Int32Array, clipCount: number) {\n    // クリップしている（＝マスク用の）Drawableのインデックスリスト\n    this._clippingIdList = clippingDrawableIndices;\n\n    // マスクの数\n    this._clippingIdCount = clipCount;\n\n    this._allClippedDrawRect = new csmRect();\n    this._layoutBounds = new csmRect();\n\n    this._clippedDrawableIndexList = [];\n\n    this._matrixForMask = new CubismMatrix44();\n    this._matrixForDraw = new CubismMatrix44();\n\n    this._bufferIndex = 0;\n  }\n\n  /**\n   * このマスクを管理するマネージャのインスタンスを取得する\n   * @return クリッピングマネージャのインスタンス\n   */\n  public abstract getClippingManager(): ICubismClippingManager;\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._layoutBounds != null) {\n      this._layoutBounds = null;\n    }\n\n    if (this._allClippedDrawRect != null) {\n      this._allClippedDrawRect = null;\n    }\n\n    if (this._clippedDrawableIndexList != null) {\n      this._clippedDrawableIndexList = null;\n    }\n  }\n\n  /**\n   * このマスクにクリップされる描画オブジェクトを追加する\n   *\n   * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\n   */\n  public addClippedDrawable(drawableIndex: number) {\n    this._clippedDrawableIndexList.push(drawableIndex);\n  }\n\n  public _isUsing: boolean; // 現在の描画状態でマスクの準備が必要ならtrue\n  public readonly _clippingIdList: Int32Array; // クリッピングマスクのIDリスト\n  public _clippingIdCount: number; // クリッピングマスクの数\n  public _layoutChannelIndex: number; // RGBAのいずれのチャンネルにこのクリップを配置するか（0:R, 1:G, 2:B, 3:A）\n  public _layoutBounds: csmRect; // マスク用チャンネルのどの領域にマスクを入れるか（View座標-1~1, UVは0~1に直す）\n  public _allClippedDrawRect: csmRect; // このクリッピングで、クリッピングされるすべての描画オブジェクトの囲み矩形（毎回更新）\n  public _matrixForMask: CubismMatrix44; // マスクの位置計算結果を保持する行列\n  public _matrixForDraw: CubismMatrix44; // 描画オブジェクトの位置計算結果を保持する行列\n  public _clippedDrawableIndexList: number[]; // このマスクにクリップされる描画オブジェクトのリスト\n  public _bufferIndex: number; // このマスクが割り当てられるレンダーテクスチャ（フレームバッファ）やカラーバッファのインデックス\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismBlendMode = $.CubismBlendMode;\n  export type CubismBlendMode = $.CubismBlendMode;\n  export const CubismRenderer = $.CubismRenderer;\n  export type CubismRenderer = $.CubismRenderer;\n  export const CubismTextureColor = $.CubismTextureColor;\n  export type CubismTextureColor = $.CubismTextureColor;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  CSM_LOG_LEVEL,\n  CSM_LOG_LEVEL_DEBUG,\n  CSM_LOG_LEVEL_ERROR,\n  CSM_LOG_LEVEL_INFO,\n  CSM_LOG_LEVEL_VERBOSE,\n  CSM_LOG_LEVEL_WARNING\n} from '../cubismframeworkconfig';\nimport { CubismFramework, LogLevel } from '../live2dcubismframework';\n\nexport const CubismLogPrint = (level: LogLevel, fmt: string, args: any[]) => {\n  CubismDebug.print(level, '[CSM]' + fmt, args);\n};\n\nexport const CubismLogPrintIn = (level: LogLevel, fmt: string, args: any[]) => {\n  CubismLogPrint(level, fmt + '\\n', args);\n};\n\nexport const CSM_ASSERT = (expr: any) => {\n  console.assert(expr);\n};\n\nexport let CubismLogVerbose: (fmt: string, ...args: any[]) => void;\nexport let CubismLogDebug: (fmt: string, ...args: any[]) => void;\nexport let CubismLogInfo: (fmt: string, ...args: any[]) => void;\nexport let CubismLogWarning: (fmt: string, ...args: any[]) => void;\nexport let CubismLogError: (fmt: string, ...args: any[]) => void;\n\nif (CSM_LOG_LEVEL <= CSM_LOG_LEVEL_VERBOSE) {\n  CubismLogVerbose = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\n  };\n\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n  };\n\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_DEBUG) {\n  CubismLogDebug = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Debug, '[D]' + fmt, args);\n  };\n\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_INFO) {\n  CubismLogInfo = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Info, '[I]' + fmt, args);\n  };\n\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_WARNING) {\n  CubismLogWarning = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Warning, '[W]' + fmt, args);\n  };\n\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n} else if (CSM_LOG_LEVEL == CSM_LOG_LEVEL_ERROR) {\n  CubismLogError = (fmt: string, ...args: any[]) => {\n    CubismLogPrintIn(LogLevel.LogLevel_Error, '[E]' + fmt, args);\n  };\n}\n\n/**\n * デバッグ用のユーティリティクラス。\n * ログの出力、バイトのダンプなど\n */\nexport class CubismDebug {\n  /**\n   * ログを出力する。第一引数にログレベルを設定する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param format 書式付き文字列\n   * @param args 可変長引数\n   */\n  public static print(logLevel: LogLevel, format: string, args?: any[]): void {\n    // オプションで設定されたログ出力レベルを下回る場合はログに出さない\n    if (logLevel < CubismFramework.getLoggingLevel()) {\n      return;\n    }\n\n    const logPrint: Live2DCubismCore.csmLogFunction =\n      CubismFramework.coreLogFunction;\n\n    if (!logPrint) return;\n\n    const buffer: string = format.replace(/\\{(\\d+)\\}/g, (m, k) => {\n      return args[k];\n    });\n    logPrint(buffer);\n  }\n\n  /**\n   * データから指定した長さだけダンプ出力する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param data ダンプするデータ\n   * @param length ダンプする長さ\n   */\n  public static dumpBytes(\n    logLevel: LogLevel,\n    data: Uint8Array,\n    length: number\n  ): void {\n    for (let i = 0; i < length; i++) {\n      if (i % 16 == 0 && i > 0) this.print(logLevel, '\\n');\n      else if (i % 8 == 0 && i > 0) this.print(logLevel, '  ');\n      this.print(logLevel, '{0} ', [data[i] & 0xff]);\n    }\n\n    this.print(logLevel, '\\n');\n  }\n\n  /**\n   * private コンストラクタ\n   */\n  private constructor() {}\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismdebug';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismDebug = $.CubismDebug;\n  export type CubismDebug = $.CubismDebug;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismLogDebug, CubismLogWarning } from '../utils/cubismdebug';\n\n/**\n * Key-Valueのペアを定義するクラス\n * csmMapクラスの内部データで使用する。\n */\nexport class csmPair<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   * @param key Keyとしてセットする値\n   * @param value Valueとしてセットする値\n   */\n  public constructor(key?: _KeyT, value?: _ValT) {\n    this.first = key == undefined ? null : key;\n\n    this.second = value == undefined ? null : value;\n  }\n\n  public first: _KeyT; // keyとして用いる変数\n  public second: _ValT; // valueとして用いる変数\n}\n\n/**\n * マップ型\n */\nexport class csmMap<_KeyT, _ValT> {\n  /**\n   * 引数付きコンストラクタ\n   * @param size 初期化時点で確保するサイズ\n   */\n  public constructor(size?: number) {\n    if (size != undefined) {\n      if (size < 1) {\n        this._keyValues = [];\n        this._dummyValue = null;\n        this._size = 0;\n      } else {\n        this._keyValues = new Array(size);\n        this._size = size;\n      }\n    } else {\n      this._keyValues = [];\n      this._dummyValue = null;\n      this._size = 0;\n    }\n  }\n\n  /**\n   * デストラクタ\n   */\n  public release() {\n    this.clear();\n  }\n\n  /**\n   * キーを追加する\n   * @param key 新たに追加するキー\n   */\n  public appendKey(key: _KeyT): void {\n    let findIndex = -1;\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        findIndex = i;\n        break;\n      }\n    }\n\n    // 同じkeyが既に作られている場合は何もしない\n    if (findIndex != -1) {\n      CubismLogWarning('The key `{0}` is already append.', key);\n      return;\n    }\n\n    // 新しくKey/Valueのペアを作る\n    this.prepareCapacity(this._size + 1, false); // 1つ以上入る隙間を作る\n    // 新しいkey/valueのインデックスは_size\n\n    this._keyValues[this._size] = new csmPair<_KeyT, _ValT>(key);\n    this._size += 1;\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(get)\n   * @param key 添字から特定されるValue値\n   */\n  public getValue(key: _KeyT): _ValT {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      return this._keyValues[found].second;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      return this._keyValues[this._size - 1].second;\n    }\n  }\n\n  /**\n   * 添字演算子[key]のオーバーロード(set)\n   * @param key 添字から特定されるValue値\n   * @param value 代入するValue値\n   */\n  public setValue(key: _KeyT, value: _ValT): void {\n    let found = -1;\n\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        found = i;\n        break;\n      }\n    }\n\n    if (found >= 0) {\n      this._keyValues[found].second = value;\n    } else {\n      this.appendKey(key); // 新規キーを追加\n      this._keyValues[this._size - 1].second = value;\n    }\n  }\n\n  /**\n   * 引数で渡したKeyを持つ要素が存在するか\n   * @param key 存在を確認するkey\n   * @return true 引数で渡したkeyを持つ要素が存在する\n   * @return false 引数で渡したkeyを持つ要素が存在しない\n   */\n  public isExist(key: _KeyT): boolean {\n    for (let i = 0; i < this._size; i++) {\n      if (this._keyValues[i].first == key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * keyValueのポインタを全て解放する\n   */\n  public clear(): void {\n    this._keyValues = void 0;\n    this._keyValues = null;\n    this._keyValues = [];\n\n    this._size = 0;\n  }\n\n  /**\n   * コンテナのサイズを取得する\n   *\n   * @return コンテナのサイズ\n   */\n  public getSize(): number {\n    return this._size;\n  }\n\n  /**\n   * コンテナのキャパシティを確保する\n   * @param newSize 新たなキャパシティ。引数の値が現在のサイズ未満の場合は何もしない。\n   * @param fitToSize trueなら指定したサイズに合わせる。falseならサイズを2倍確保しておく。\n   */\n  public prepareCapacity(newSize: number, fitToSize: boolean): void {\n    if (newSize > this._keyValues.length) {\n      if (this._keyValues.length == 0) {\n        if (!fitToSize && newSize < csmMap.DefaultSize)\n          newSize = csmMap.DefaultSize;\n        this._keyValues.length = newSize;\n      } else {\n        if (!fitToSize && newSize < this._keyValues.length * 2)\n          newSize = this._keyValues.length * 2;\n        this._keyValues.length = newSize;\n      }\n    }\n  }\n\n  /**\n   * コンテナの先頭要素を返す\n   */\n  public begin(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(this, 0);\n    return ite;\n  }\n\n  /**\n   * コンテナの終端要素を返す\n   */\n  public end(): iterator<_KeyT, _ValT> {\n    const ite: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      this._size\n    ); // 終了\n    return ite;\n  }\n\n  /**\n   * コンテナから要素を削除する\n   *\n   * @param ite 削除する要素\n   */\n  public erase(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    const index: number = ite._index;\n    if (index < 0 || this._size <= index) {\n      return ite; // 削除範囲外\n    }\n\n    // 削除\n    this._keyValues.splice(index, 1);\n    --this._size;\n\n    const ite2: iterator<_KeyT, _ValT> = new iterator<_KeyT, _ValT>(\n      this,\n      index\n    ); // 終了\n    return ite2;\n  }\n\n  /**\n   * コンテナの値を32ビット符号付き整数型でダンプする\n   */\n  public dumpAsInt() {\n    for (let i = 0; i < this._size; i++) {\n      CubismLogDebug('{0} ,', this._keyValues[i]);\n      CubismLogDebug('\\n');\n    }\n  }\n\n  public static readonly DefaultSize = 10; // コンテナの初期化のデフォルトサイズ\n  public _keyValues: csmPair<_KeyT, _ValT>[]; // key-valueペアの配列\n  public _dummyValue: _ValT; // 空の値を返す為のダミー\n  public _size: number; // コンテナの要素数\n}\n\n/**\n * csmMap<T>のイテレータ\n */\nexport class iterator<_KeyT, _ValT> {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: csmMap<_KeyT, _ValT>, idx?: number) {\n    this._map = v != undefined ? v : new csmMap<_KeyT, _ValT>();\n\n    this._index = idx != undefined ? idx : 0;\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public set(ite: iterator<_KeyT, _ValT>): iterator<_KeyT, _ValT> {\n    this._index = ite._index;\n    this._map = ite._map;\n    return this;\n  }\n\n  /**\n   * 前置き++演算子のオーバーロード\n   */\n  public preIncrement(): iterator<_KeyT, _ValT> {\n    ++this._index;\n    return this;\n  }\n\n  /**\n   * 前置き--演算子のオーバーロード\n   */\n  public preDecrement(): iterator<_KeyT, _ValT> {\n    --this._index;\n    return this;\n  }\n\n  /**\n   * 後置き++演算子のオーバーロード\n   */\n  public increment(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index++); // 古い値を保存\n    return iteold;\n  }\n\n  /**\n   * 後置き--演算子のオーバーロード\n   */\n  public decrement(): iterator<_KeyT, _ValT> {\n    const iteold = new iterator<_KeyT, _ValT>(this._map, this._index); // 古い値を保存\n    this._map = iteold._map;\n    this._index = iteold._index;\n    return this;\n  }\n\n  /**\n   * *演算子のオーバーロード\n   */\n  public ptr(): csmPair<_KeyT, _ValT> {\n    return this._map._keyValues[this._index];\n  }\n\n  /**\n   * !=演算\n   */\n  public notEqual(ite: iterator<_KeyT, _ValT>): boolean {\n    return this._index != ite._index || this._map != ite._map;\n  }\n\n  _index: number; // コンテナのインデックス値\n  _map: csmMap<_KeyT, _ValT>; // コンテナ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './csmmap';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const csmMap = $.csmMap;\n  export type csmMap<K, V> = $.csmMap<K, V>;\n  export const csmPair = $.csmPair;\n  export type csmPair<K, V> = $.csmPair<K, V>;\n  export const iterator = $.iterator;\n  export type iterator<K, V> = $.iterator<K, V>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport {\n  JsonArray,\n  JsonBoolean,\n  JsonFloat,\n  JsonMap,\n  JsonNullvalue,\n  JsonString,\n  Value\n} from './cubismjson';\n\n/**\n * CubismJsonで実装されているJsonパーサを使用せず、\n * TypeScript標準のJsonパーサなどを使用し出力された結果を\n * Cubism SDKで定義されているJSONエレメントの要素に\n * 置き換える処理をするクラス。\n */\nexport class CubismJsonExtension {\n  static parseJsonObject(obj: Value, map: JsonMap) {\n    Object.keys(obj).forEach(key => {\n      if (typeof obj[key] == 'boolean') {\n        const convValue = Boolean(obj[key]);\n        map.put(key, new JsonBoolean(convValue));\n      } else if (typeof obj[key] == 'string') {\n        const convValue = String(obj[key]);\n        map.put(key, new JsonString(convValue));\n      } else if (typeof obj[key] == 'number') {\n        const convValue = Number(obj[key]);\n        map.put(key, new JsonFloat(convValue));\n      } else if (obj[key] instanceof Array) {\n        // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n        map.put(\n          key,\n          CubismJsonExtension.parseJsonArray(obj[key] as unknown as Value)\n        );\n      } else if (obj[key] instanceof Object) {\n        map.put(\n          key,\n          CubismJsonExtension.parseJsonObject(obj[key], new JsonMap())\n        );\n      } else if (obj[key] == null) {\n        map.put(key, new JsonNullvalue());\n      } else {\n        // どれにも当てはまらない場合でも処理する\n        map.put(key, obj[key]);\n      }\n    });\n    return map;\n  }\n\n  protected static parseJsonArray(obj: Value) {\n    const arr = new JsonArray();\n    Object.keys(obj).forEach(key => {\n      const convKey = Number(key);\n      if (typeof convKey == 'number') {\n        if (typeof obj[key] == 'boolean') {\n          const convValue = Boolean(obj[key]);\n          arr.add(new JsonBoolean(convValue));\n        } else if (typeof obj[key] == 'string') {\n          const convValue = String(obj[key]);\n          arr.add(new JsonString(convValue));\n        } else if (typeof obj[key] == 'number') {\n          const convValue = Number(obj[key]);\n          arr.add(new JsonFloat(convValue));\n        } else if (obj[key] instanceof Array) {\n          // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n          arr.add(this.parseJsonArray(obj[key] as unknown as Value));\n        } else if (obj[key] instanceof Object) {\n          arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n        } else if (obj[key] == null) {\n          arr.add(new JsonNullvalue());\n        } else {\n          // どれにも当てはまらない場合でも処理する\n          arr.add(obj[key]);\n        }\n      } else if (obj[key] instanceof Array) {\n        // HACK: Array 単体で変換できないので unknown に変更してから Value にしている\n        arr.add(this.parseJsonArray(obj[key] as unknown as Value));\n      } else if (obj[key] instanceof Object) {\n        arr.add(this.parseJsonObject(obj[key], new JsonMap()));\n      } else if (obj[key] == null) {\n        arr.add(new JsonNullvalue());\n      } else {\n        const convValue = Array(obj[key]);\n        // 配列ともObjectとも判定できなかった場合でも処理する\n        for (let i = 0; i < convValue.length; i++) {\n          arr.add(convValue[i]);\n        }\n      }\n    });\n    return arr;\n  }\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { strtod } from '../live2dcubismframework';\nimport { csmMap, iterator as csmMap_iterator } from '../type/csmmap';\nimport { csmString } from '../type/csmstring';\nimport { csmVector, iterator as csmVector_iterator } from '../type/csmvector';\nimport { CubismLogInfo } from './cubismdebug';\n\n// StaticInitializeNotForClientCall()で初期化する\nconst CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\nconst CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\n\n/**\n * パースしたJSONエレメントの要素の基底クラス。\n */\nexport abstract class Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {}\n\n  /**\n   * 要素を文字列型で返す(csmString型)\n   */\n  public abstract getString(defaultValue?: string, indent?: string): string;\n\n  /**\n   * 要素を文字列型で返す(string)\n   */\n  public getRawString(defaultValue?: string, indent?: string): string {\n    return this.getString(defaultValue, indent);\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toInt(defaultValue = 0): number {\n    return defaultValue;\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toFloat(defaultValue = 0): number {\n    return defaultValue;\n  }\n\n  /**\n   * 要素を真偽値で返す(boolean)\n   */\n  public toBoolean(defaultValue = false): boolean {\n    return defaultValue;\n  }\n\n  /**\n   * サイズを返す\n   */\n  public getSize(): number {\n    return 0;\n  }\n\n  /**\n   * 要素を配列で返す(Value[])\n   */\n  public getArray(defaultValue: Value[] = null): Value[] {\n    return defaultValue;\n  }\n\n  /**\n   * 要素をコンテナで返す(array)\n   */\n  public getVector(defaultValue = new csmVector<Value>()): csmVector<Value> {\n    return defaultValue;\n  }\n\n  /**\n   * 要素をマップで返す(csmMap<csmString, Value>)\n   */\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\n    return defaultValue;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    return Value.nullValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * マップのキー一覧をコンテナで返す\n   *\n   * @return マップのキーの一覧\n   */\n  public getKeys(): csmVector<string> {\n    return Value.dummyKeys;\n  }\n\n  /**\n   * Valueの種類がエラー値ならtrue\n   */\n  public isError(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類がnullならtrue\n   */\n  public isNull(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が真偽値ならtrue\n   */\n  public isBool(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が数値型ならtrue\n   */\n  public isFloat(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が文字列ならtrue\n   */\n  public isString(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類が配列ならtrue\n   */\n  public isArray(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの種類がマップ型ならtrue\n   */\n  public isMap(): boolean {\n    return false;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    return false;\n  }\n\n  /**\n   * Valueの値が静的ならtrue、静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return false;\n  }\n\n  /**\n   * Valueにエラー値をセットする\n   */\n  public setErrorNotForClientCall(errorStr: string): Value {\n    return JsonError.errorValue;\n  }\n\n  /**\n   * 初期化用メソッド\n   */\n  public static staticInitializeNotForClientCall(): void {\n    JsonBoolean.trueValue = new JsonBoolean(true);\n    JsonBoolean.falseValue = new JsonBoolean(false);\n    Value.errorValue = new JsonError('ERROR', true);\n    Value.nullValue = new JsonNullvalue();\n    Value.dummyKeys = new csmVector<string>();\n  }\n\n  /**\n   * リリース用メソッド\n   */\n  public static staticReleaseNotForClientCall(): void {\n    JsonBoolean.trueValue = null;\n    JsonBoolean.falseValue = null;\n    Value.errorValue = null;\n    Value.nullValue = null;\n    Value.dummyKeys = null;\n  }\n\n  protected _stringBuffer: string; // 文字列バッファ\n\n  private static dummyKeys: csmVector<string>; // ダミーキー\n\n  public static errorValue: Value; // 一時的な返り値として返すエラー。 CubismFramework::Disposeするまではdeleteしない\n  public static nullValue: Value; // 一時的な返り値として返すNULL。   CubismFramework::Disposeするまではdeleteしない\n\n  [key: string]: any; // 明示的に連想配列をany型で指定\n}\n\n/**\n * Ascii文字のみ対応した最小限の軽量JSONパーサ。\n * 仕様はJSONのサブセットとなる。\n * 設定ファイル(model3.json)などのロード用\n *\n * [未対応項目]\n * ・日本語などの非ASCII文字\n * ・eによる指数表現\n */\nexport class CubismJson {\n  /**\n   * コンストラクタ\n   */\n  public constructor(buffer?: ArrayBuffer, length?: number) {\n    this._error = null;\n    this._lineCount = 0;\n    this._root = null;\n\n    if (buffer != undefined) {\n      this.parseBytes(buffer, length, this._parseCallback);\n    }\n  }\n\n  /**\n   * バイトデータから直接ロードしてパースする\n   *\n   * @param buffer バッファ\n   * @param size バッファサイズ\n   * @return CubismJsonクラスのインスタンス。失敗したらNULL\n   */\n  public static create(buffer: ArrayBuffer, size: number) {\n    const json = new CubismJson();\n    const succeeded: boolean = json.parseBytes(\n      buffer,\n      size,\n      json._parseCallback\n    );\n\n    if (!succeeded) {\n      CubismJson.delete(json);\n      return null;\n    } else {\n      return json;\n    }\n  }\n\n  /**\n   * パースしたJSONオブジェクトの解放処理\n   *\n   * @param instance CubismJsonクラスのインスタンス\n   */\n  public static delete(instance: CubismJson) {\n    instance = null;\n  }\n\n  /**\n   * パースしたJSONのルート要素を返す\n   */\n  public getRoot(): Value {\n    return this._root;\n  }\n\n  /**\n   *  UnicodeのバイナリをStringに変換\n   *\n   * @param buffer 変換するバイナリデータ\n   * @return 変換後の文字列\n   */\n  public static arrayBufferToString(buffer: ArrayBuffer): string {\n    const uint8Array: Uint8Array = new Uint8Array(buffer);\n    let str = '';\n\n    for (let i = 0, len: number = uint8Array.length; i < len; ++i) {\n      str += '%' + this.pad(uint8Array[i].toString(16));\n    }\n\n    str = decodeURIComponent(str);\n    return str;\n  }\n\n  /**\n   * エンコード、パディング\n   */\n  private static pad(n: string): string {\n    return n.length < 2 ? '0' + n : n;\n  }\n\n  /**\n   * JSONのパースを実行する\n   * @param buffer    パース対象のデータバイト\n   * @param size      データバイトのサイズ\n   * return true : 成功\n   * return false: 失敗\n   */\n  public parseBytes(\n    buffer: ArrayBuffer,\n    size: number,\n    parseCallback?: parseJsonObject\n  ): boolean {\n    const endPos: number[] = new Array<number>(1); // 参照渡しにするため配列\n    const decodeBuffer: string = CubismJson.arrayBufferToString(buffer);\n\n    if (parseCallback == undefined) {\n      this._root = this.parseValue(decodeBuffer, size, 0, endPos);\n    } else {\n      // TypeScript標準のJSONパーサを使う\n      this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());\n    }\n\n    if (this._error) {\n      let strbuf = '\\0';\n      strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\n      this._root = new JsonString(strbuf);\n\n      CubismLogInfo('{0}', this._root.getRawString());\n      return false;\n    } else if (this._root == null) {\n      this._root = new JsonError(new csmString(this._error), false); // rootは解放されるのでエラーオブジェクトを別途作成する\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * パース時のエラー値を返す\n   */\n  public getParseError(): string {\n    return this._error;\n  }\n\n  /**\n   * ルート要素の次の要素がファイルの終端だったらtrueを返す\n   */\n  public checkEndOfFile(): boolean {\n    return this._root.getArray()[1].equals('EOF');\n  }\n\n  /**\n   * JSONエレメントからValue(float,String,Value*,Array,null,true,false)をパースする\n   * エレメントの書式に応じて内部でParseString(), ParseObject(), ParseArray()を呼ぶ\n   *\n   * @param   buffer      JSONエレメントのバッファ\n   * @param   length      パースする長さ\n   * @param   begin       パースを開始する位置\n   * @param   outEndPos   パース終了時の位置\n   * @return      パースから取得したValueオブジェクト\n   */\n  protected parseValue(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ) {\n    if (this._error) return null;\n\n    let o: Value = null;\n    let i: number = begin;\n    let f: number;\n\n    for (; i < length; i++) {\n      const c: string = buffer[i];\n      switch (c) {\n        case '-':\n        case '.':\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9': {\n          const afterString: string[] = new Array(1); // 参照渡しにするため\n          f = strtod(buffer.slice(i), afterString);\n          outEndPos[0] = buffer.indexOf(afterString[0]);\n          return new JsonFloat(f);\n        }\n        case '\"':\n          return new JsonString(\n            this.parseString(buffer, length, i + 1, outEndPos)\n          ); // \\\"の次の文字から\n        case '[':\n          o = this.parseArray(buffer, length, i + 1, outEndPos);\n          return o;\n        case '{':\n          o = this.parseObject(buffer, length, i + 1, outEndPos);\n          return o;\n        case 'n': // null以外にない\n          if (i + 3 < length) {\n            o = new JsonNullvalue(); // 解放できるようにする\n            outEndPos[0] = i + 4;\n          } else {\n            this._error = 'parse null';\n          }\n          return o;\n        case 't': // true以外にない\n          if (i + 3 < length) {\n            o = JsonBoolean.trueValue;\n            outEndPos[0] = i + 4;\n          } else {\n            this._error = 'parse true';\n          }\n          return o;\n        case 'f': // false以外にない\n          if (i + 4 < length) {\n            o = JsonBoolean.falseValue;\n            outEndPos[0] = i + 5;\n          } else {\n            this._error = \"illegal ',' position\";\n          }\n          return o;\n        case ',': // Array separator\n          this._error = \"illegal ',' position\";\n          return null;\n        case ']': // 不正な｝だがスキップする。配列の最後に不要な , があると思われる\n          outEndPos[0] = i; // 同じ文字を再処理\n          return null;\n        case '\\n':\n          this._lineCount++;\n        // falls through\n        case ' ':\n        case '\\t':\n        case '\\r':\n        default:\n          // スキップ\n          break;\n      }\n    }\n\n    this._error = 'illegal end of value';\n    return null;\n  }\n\n  /**\n   * 次の「\"」までの文字列をパースする。\n   *\n   * @param   string  ->  パース対象の文字列\n   * @param   length  ->  パースする長さ\n   * @param   begin   ->  パースを開始する位置\n   * @param  outEndPos   ->  パース終了時の位置\n   * @return      パースした文F字列要素\n   */\n  protected parseString(\n    string: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): string {\n    if (this._error) {\n      return null;\n    }\n\n    if (!string) {\n      this._error = 'string is null';\n      return null;\n    }\n\n    let i = begin;\n    let c: string, c2: string;\n    const ret: csmString = new csmString('');\n    let bufStart: number = begin; // sbufに登録されていない文字の開始位置\n\n    for (; i < length; i++) {\n      c = string[i];\n\n      switch (c) {\n        case '\"': {\n          // 終端の”、エスケープ文字は別に処理されるのでここに来ない\n          outEndPos[0] = i + 1; // ”の次の文字\n          ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\n          return ret.s;\n        }\n        // falls through\n        case '//': {\n          // エスケープの場合\n          i++; // ２文字をセットで扱う\n\n          if (i - 1 > bufStart) {\n            ret.append(string.slice(bufStart), i - bufStart); // 前の文字までを登録する\n          }\n          bufStart = i + 1; // エスケープ（２文字)の次の文字から\n\n          if (i < length) {\n            c2 = string[i];\n\n            switch (c2) {\n              case '\\\\':\n                ret.expansion(1, '\\\\');\n                break;\n              case '\"':\n                ret.expansion(1, '\"');\n                break;\n              case '/':\n                ret.expansion(1, '/');\n                break;\n              case 'b':\n                ret.expansion(1, '\\b');\n                break;\n              case 'f':\n                ret.expansion(1, '\\f');\n                break;\n              case 'n':\n                ret.expansion(1, '\\n');\n                break;\n              case 'r':\n                ret.expansion(1, '\\r');\n                break;\n              case 't':\n                ret.expansion(1, '\\t');\n                break;\n              case 'u':\n                this._error = 'parse string/unicord escape not supported';\n                break;\n              default:\n                break;\n            }\n          } else {\n            this._error = 'parse string/escape error';\n          }\n        }\n        // falls through\n        default: {\n          break;\n        }\n      }\n    }\n\n    this._error = 'parse string/illegal end';\n    return null;\n  }\n\n  /**\n   * JSONのオブジェクトエレメントをパースしてValueオブジェクトを返す\n   *\n   * @param buffer    JSONエレメントのバッファ\n   * @param length    パースする長さ\n   * @param begin     パースを開始する位置\n   * @param outEndPos パース終了時の位置\n   * @return パースから取得したValueオブジェクト\n   */\n  protected parseObject(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): Value {\n    if (this._error) {\n      return null;\n    }\n\n    if (!buffer) {\n      this._error = 'buffer is null';\n      return null;\n    }\n\n    const ret: JsonMap = new JsonMap();\n\n    // Key: Value\n    let key = '';\n    let i: number = begin;\n    let c = '';\n    const localRetEndPos2: number[] = Array(1);\n    let ok = false;\n\n    // , が続く限りループ\n    for (; i < length; i++) {\n      FOR_LOOP: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case '\"':\n            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\n            if (this._error) {\n              return null;\n            }\n\n            i = localRetEndPos2[0];\n            ok = true;\n            break FOR_LOOP; //-- loopから出る\n          case '}': // 閉じカッコ\n            outEndPos[0] = i + 1;\n            return ret; // 空\n          case ':':\n            this._error = \"illegal ':' position\";\n            break;\n          case '\\n':\n            this._lineCount++;\n          // falls through\n          default:\n            break; // スキップする文字\n        }\n      }\n      if (!ok) {\n        this._error = 'key not found';\n        return null;\n      }\n\n      ok = false;\n\n      // : をチェック\n      FOR_LOOP2: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ':':\n            ok = true;\n            i++;\n            break FOR_LOOP2;\n          case '}':\n            this._error = \"illegal '}' position\";\n            break;\n          // falls through\n          case '\\n':\n            this._lineCount++;\n          // case ' ': case '\\t' : case '\\r':\n          // falls through\n          default:\n            break; // スキップする文字\n        }\n      }\n\n      if (!ok) {\n        this._error = \"':' not found\";\n        return null;\n      }\n\n      // 値をチェック\n      const value: Value = this.parseValue(buffer, length, i, localRetEndPos2);\n      if (this._error) {\n        return null;\n      }\n\n      i = localRetEndPos2[0];\n\n      // ret.put(key, value);\n      ret.put(key, value);\n\n      FOR_LOOP3: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ',':\n            break FOR_LOOP3;\n          case '}':\n            outEndPos[0] = i + 1;\n            return ret; // 正常終了\n          case '\\n':\n            this._lineCount++;\n          // falls through\n          default:\n            break; // スキップ\n        }\n      }\n    }\n\n    this._error = 'illegal end of perseObject';\n    return null;\n  }\n\n  /**\n   * 次の「\"」までの文字列をパースする。\n   * @param buffer    JSONエレメントのバッファ\n   * @param length    パースする長さ\n   * @param begin     パースを開始する位置\n   * @param outEndPos パース終了時の位置\n   * @return パースから取得したValueオブジェクト\n   */\n  protected parseArray(\n    buffer: string,\n    length: number,\n    begin: number,\n    outEndPos: number[]\n  ): Value {\n    if (this._error) {\n      return null;\n    }\n\n    if (!buffer) {\n      this._error = 'buffer is null';\n      return null;\n    }\n\n    let ret: JsonArray = new JsonArray();\n\n    // key : value\n    let i: number = begin;\n    let c: string;\n    const localRetEndpos2: number[] = new Array(1);\n\n    // , が続く限りループ\n    for (; i < length; i++) {\n      // : をチェック\n      const value: Value = this.parseValue(buffer, length, i, localRetEndpos2);\n\n      if (this._error) {\n        return null;\n      }\n      i = localRetEndpos2[0];\n\n      if (value) {\n        ret.add(value);\n      }\n\n      // FOR_LOOP3:\n      // boolean breakflag = false;\n      FOR_LOOP: for (; i < length; i++) {\n        c = buffer[i];\n\n        switch (c) {\n          case ',':\n            // breakflag = true;\n            // break; // 次のKEY, VAlUEへ\n            break FOR_LOOP;\n          case ']':\n            outEndPos[0] = i + 1;\n            return ret; // 終了\n          case '\\n':\n            ++this._lineCount;\n          //case ' ': case '\\t': case '\\r':\n          // falls through\n          default:\n            break; // スキップ\n        }\n      }\n    }\n\n    ret = void 0;\n    this._error = 'illegal end of parseObject';\n    return null;\n  }\n\n  _parseCallback: parseJsonObject = CubismJsonExtension.parseJsonObject; // パース時に使う処理のコールバック関数\n\n  _error: string; // パース時のエラー\n  _lineCount: number; // エラー報告に用いる行数カウント\n  _root: Value; // パースされたルート要素\n}\n\ninterface parseJsonObject {\n  (obj: Value, map: JsonMap): JsonMap;\n}\n\n/**\n * パースしたJSONの要素をfloat値として扱う\n */\nexport class JsonFloat extends Value {\n  /**\n   * コンストラクタ\n   */\n  constructor(v: number) {\n    super();\n\n    this._value = v;\n  }\n\n  /**\n   * Valueの種類が数値型ならtrue\n   */\n  public isFloat(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    const strbuf = '\\0';\n    this._value = parseFloat(strbuf);\n    this._stringBuffer = strbuf;\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toInt(defaultValue = 0): number {\n    return parseInt(this._value.toString());\n  }\n\n  /**\n   * 要素を数値型で返す(number)\n   */\n  public toFloat(defaultValue = 0.0): number {\n    return this._value;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('number' === typeof value) {\n      // int\n      if (Math.round(value)) {\n        return false;\n      }\n      // float\n      else {\n        return value == this._value;\n      }\n    }\n    return false;\n  }\n\n  private _value: number; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素を真偽値として扱う\n */\nexport class JsonBoolean extends Value {\n  /**\n   * Valueの種類が真偽値ならtrue\n   */\n  public isBool(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を真偽値で返す(boolean)\n   */\n  public toBoolean(defaultValue = false): boolean {\n    return this._boolValue;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    this._stringBuffer = this._boolValue ? 'true' : 'false';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('boolean' === typeof value) {\n      return value == this._boolValue;\n    }\n    return false;\n  }\n\n  /**\n   * Valueの値が静的ならtrue, 静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return true;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(v: boolean) {\n    super();\n\n    this._boolValue = v;\n  }\n\n  static trueValue: JsonBoolean; // true\n  static falseValue: JsonBoolean; // false\n\n  private _boolValue: boolean; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素を文字列として扱う\n */\nexport class JsonString extends Value {\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: string);\n  public constructor(s: csmString);\n  public constructor(s: any) {\n    super();\n\n    if ('string' === typeof s) {\n      this._stringBuffer = s;\n    }\n\n    if (s instanceof csmString) {\n      this._stringBuffer = s.s;\n    }\n  }\n\n  /**\n   * Valueの種類が文字列ならtrue\n   */\n  public isString(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    return this._stringBuffer;\n  }\n\n  /**\n   * 引数の値と等しければtrue\n   */\n  public equals(value: csmString): boolean;\n  public equals(value: string): boolean;\n  public equals(value: number): boolean;\n  public equals(value: boolean): boolean;\n  public equals(value: any): boolean {\n    if ('string' === typeof value) {\n      return this._stringBuffer == value;\n    }\n\n    if (value instanceof csmString) {\n      return this._stringBuffer == value.s;\n    }\n\n    return false;\n  }\n}\n\n/**\n * JSONパース時のエラー結果。文字列型のようにふるまう\n */\nexport class JsonError extends JsonString {\n  /**\n   * Valueの値が静的ならtrue、静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return this._isStatic;\n  }\n\n  /**\n   * エラー情報をセットする\n   */\n  public setErrorNotForClientCall(s: string): Value {\n    this._stringBuffer = s;\n    return this;\n  }\n\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(s: csmString | string, isStatic: boolean) {\n    if ('string' === typeof s) {\n      super(s);\n    } else {\n      super(s);\n    }\n    this._isStatic = isStatic;\n  }\n\n  /**\n   * Valueの種類がエラー値ならtrue\n   */\n  public isError(): boolean {\n    return true;\n  }\n\n  protected _isStatic: boolean; // 静的なValueかどうか\n}\n\n/**\n * パースしたJSONの要素をNULL値として持つ\n */\nexport class JsonNullvalue extends Value {\n  /**\n   * Valueの種類がNULL値ならtrue\n   */\n  public isNull(): boolean {\n    return true;\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    return this._stringBuffer;\n  }\n\n  /**\n   * Valueの値が静的ならtrue, 静的なら解放しない\n   */\n  public isStatic(): boolean {\n    return true;\n  }\n\n  /**\n   * Valueにエラー値をセットする\n   */\n  public setErrorNotForClientCall(s: string): Value {\n    this._stringBuffer = s;\n    return JsonError.nullValue;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._stringBuffer = 'NullValue';\n  }\n}\n\n/**\n * パースしたJSONの要素を配列として持つ\n */\nexport class JsonArray extends Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._array = new csmVector<Value>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (\n      let ite: csmVector_iterator<Value> = this._array.begin();\n      ite.notEqual(this._array.end());\n      ite.preIncrement()\n    ) {\n      let v: Value = ite.ptr();\n\n      if (v && !v.isStatic()) {\n        v = void 0;\n        v = null;\n      }\n    }\n  }\n\n  /**\n   * Valueの種類が配列ならtrue\n   */\n  public isArray(): boolean {\n    return true;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    if (index < 0 || this._array.getSize() <= index) {\n      return Value.errorValue.setErrorNotForClientCall(\n        CSM_JSON_ERROR_INDEX_OF_BOUNDS\n      );\n    }\n\n    const v: Value = this._array.at(index);\n\n    if (v == null) {\n      return Value.nullValue;\n    }\n\n    return v;\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string): string {\n    const stringBuffer: string = indent + '[\\n';\n\n    for (\n      let ite: csmVector_iterator<Value> = this._array.begin();\n      ite.notEqual(this._array.end());\n      ite.increment()\n    ) {\n      const v: Value = ite.ptr();\n      this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\n    }\n\n    this._stringBuffer = stringBuffer + indent + ']\\n';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 配列要素を追加する\n   * @param v 追加する要素\n   */\n  public add(v: Value): void {\n    this._array.pushBack(v);\n  }\n\n  /**\n   * 要素をコンテナで返す(csmVector<Value>)\n   */\n  public getVector(defaultValue: csmVector<Value> = null): csmVector<Value> {\n    return this._array;\n  }\n\n  /**\n   * 要素の数を返す\n   */\n  public getSize(): number {\n    return this._array.getSize();\n  }\n\n  private _array: csmVector<Value>; // JSON要素の値\n}\n\n/**\n * パースしたJSONの要素をマップとして持つ\n */\nexport class JsonMap extends Value {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._map = new csmMap<string, Value>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\n\n    while (ite.notEqual(this._map.end())) {\n      let v: Value = ite.ptr().second;\n\n      if (v && !v.isStatic()) {\n        v = void 0;\n        v = null;\n      }\n\n      ite.preIncrement();\n    }\n  }\n\n  /**\n   * Valueの値がMap型ならtrue\n   */\n  public isMap(): boolean {\n    return true;\n  }\n\n  /**\n   * 添字演算子[string | csmString]\n   */\n  public getValueByString(s: string | csmString): Value {\n    if (s instanceof csmString) {\n      const ret: Value = this._map.getValue(s.s);\n      if (ret == null) {\n        return Value.nullValue;\n      }\n      return ret;\n    }\n\n    for (\n      let iter: csmMap_iterator<string, Value> = this._map.begin();\n      iter.notEqual(this._map.end());\n      iter.preIncrement()\n    ) {\n      if (iter.ptr().first == s) {\n        if (iter.ptr().second == null) {\n          return Value.nullValue;\n        }\n        return iter.ptr().second;\n      }\n    }\n\n    return Value.nullValue;\n  }\n\n  /**\n   * 添字演算子[index]\n   */\n  public getValueByIndex(index: number): Value {\n    return Value.errorValue.setErrorNotForClientCall(\n      CSM_JSON_ERROR_TYPE_MISMATCH\n    );\n  }\n\n  /**\n   * 要素を文字列で返す(csmString型)\n   */\n  public getString(defaultValue: string, indent: string) {\n    this._stringBuffer = indent + '{\\n';\n\n    const ite: csmMap_iterator<string, Value> = this._map.begin();\n    while (ite.notEqual(this._map.end())) {\n      const key = ite.ptr().first;\n      const v: Value = ite.ptr().second;\n\n      this._stringBuffer +=\n        indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\n      ite.preIncrement();\n    }\n\n    this._stringBuffer += indent + '}\\n';\n\n    return this._stringBuffer;\n  }\n\n  /**\n   * 要素をMap型で返す\n   */\n  public getMap(defaultValue?: csmMap<string, Value>): csmMap<string, Value> {\n    return this._map;\n  }\n\n  /**\n   * Mapに要素を追加する\n   */\n  public put(key: string, v: Value): void {\n    this._map.setValue(key, v);\n  }\n\n  /**\n   * Mapからキーのリストを取得する\n   */\n  public getKeys(): csmVector<string> {\n    if (!this._keys) {\n      this._keys = new csmVector<string>();\n\n      const ite: csmMap_iterator<string, Value> = this._map.begin();\n\n      while (ite.notEqual(this._map.end())) {\n        const key: string = ite.ptr().first;\n        this._keys.pushBack(key);\n        ite.preIncrement();\n      }\n    }\n    return this._keys;\n  }\n\n  /**\n   * Mapの要素数を取得する\n   */\n  public getSize(): number {\n    return this._keys.getSize();\n  }\n\n  private _map: csmMap<string, Value>; // JSON要素の値\n  private _keys: csmVector<string>; // JSON要素の値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismjson';\nimport { CubismJsonExtension } from './cubismjsonextension';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismJson = $.CubismJson;\n  export type CubismJson = $.CubismJson;\n  export const JsonArray = $.JsonArray;\n  export type JsonArray = $.JsonArray;\n  export const JsonBoolean = $.JsonBoolean;\n  export type JsonBoolean = $.JsonBoolean;\n  export const JsonError = $.JsonError;\n  export type JsonError = $.JsonError;\n  export const JsonFloat = $.JsonFloat;\n  export type JsonFloat = $.JsonFloat;\n  export const JsonMap = $.JsonMap;\n  export type JsonMap = $.JsonMap;\n  export const JsonNullvalue = $.JsonNullvalue;\n  export type JsonNullvalue = $.JsonNullvalue;\n  export const JsonString = $.JsonString;\n  export type JsonString = $.JsonString;\n  export const Value = $.Value;\n  export type Value = $.Value;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdManager } from './id/cubismidmanager';\nimport { CubismRenderer } from './rendering/cubismrenderer';\nimport {\n  CSM_ASSERT,\n  CubismLogInfo,\n  CubismLogWarning\n} from './utils/cubismdebug';\nimport { Value } from './utils/cubismjson';\n\nexport function strtod(s: string, endPtr: string[]): number {\n  let index = 0;\n  for (let i = 1; ; i++) {\n    const testC: string = s.slice(i - 1, i);\n\n    // 指数・マイナスの可能性があるのでスキップする\n    if (testC == 'e' || testC == '-' || testC == 'E') {\n      continue;\n    } // 文字列の範囲を広げていく\n\n    const test: string = s.substring(0, i);\n    const number = Number(test);\n    if (isNaN(number)) {\n      // 数値として認識できなくなったので終了\n      break;\n    } // 最後に数値としてできたindexを格納しておく\n\n    index = i;\n  }\n  let d = parseFloat(s); // パースした数値\n\n  if (isNaN(d)) {\n    // 数値として認識できなくなったので終了\n    d = NaN;\n  }\n\n  endPtr[0] = s.slice(index); // 後続の文字列\n  return d;\n}\n\n// ファイルスコープの変数を初期化\n\nlet s_isStarted = false;\nlet s_isInitialized = false;\nlet s_option: Option = null;\nlet s_cubismIdManager: CubismIdManager = null;\n\n/**\n * Framework内で使う定数の宣言\n */\nexport const Constant = Object.freeze<Record<string, number>>({\n  vertexOffset: 0, // メッシュ頂点のオフセット値\n  vertexStep: 2 // メッシュ頂点のステップ値\n});\n\nexport function csmDelete<T>(address: T): void {\n  if (!address) {\n    return;\n  }\n\n  address = void 0;\n}\n\n/**\n * Live2D Cubism SDK Original Workflow SDKのエントリポイント\n * 利用開始時はCubismFramework.initialize()を呼び、CubismFramework.dispose()で終了する。\n */\nexport class CubismFramework {\n  /**\n   * Cubism FrameworkのAPIを使用可能にする。\n   *  APIを実行する前に必ずこの関数を実行すること。\n   *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\n   *\n   * @param    option      Optionクラスのインスタンス\n   *\n   * @return   準備処理が完了したらtrueが返ります。\n   */\n  public static startUp(option: Option = null): boolean {\n    if (s_isStarted) {\n      CubismLogInfo('CubismFramework.startUp() is already done.');\n      return s_isStarted;\n    }\n\n    s_option = option;\n\n    if (s_option != null) {\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n    }\n\n    s_isStarted = true;\n\n    // Live2D Cubism Coreバージョン情報を表示\n    if (s_isStarted) {\n      const version: number = Live2DCubismCore.Version.csmGetVersion();\n      const major: number = (version & 0xff000000) >> 24;\n      const minor: number = (version & 0x00ff0000) >> 16;\n      const patch: number = version & 0x0000ffff;\n      const versionNumber: number = version;\n\n      CubismLogInfo(\n        `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\n        ('00' + major).slice(-2),\n        ('00' + minor).slice(-2),\n        ('0000' + patch).slice(-4),\n        versionNumber\n      );\n    }\n\n    CubismLogInfo('CubismFramework.startUp() is complete.');\n\n    return s_isStarted;\n  }\n\n  /**\n   * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\n   * Dispose()したCubismFrameworkを再利用する際に利用してください。\n   */\n  public static cleanUp(): void {\n    s_isStarted = false;\n    s_isInitialized = false;\n    s_option = null;\n    s_cubismIdManager = null;\n  }\n\n  /**\n   * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>\n   *     再度Initialize()するには先にDispose()を実行する必要があります。\n   *\n   * @param memorySize 初期化時メモリ量 [byte(s)]\n   *    複数モデル表示時などにモデルが更新されない際に使用してください。\n   *    指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\n   *    それ以外はすべて1024*1024*16 byteに丸めます。\n   */\n  public static initialize(memorySize = 0): void {\n    CSM_ASSERT(s_isStarted);\n    if (!s_isStarted) {\n      CubismLogWarning('CubismFramework is not started.');\n      return;\n    }\n\n    // --- s_isInitializedによる連続初期化ガード ---\n    // 連続してリソース確保が行われないようにする。\n    // 再度Initialize()するには先にDispose()を実行する必要がある。\n    if (s_isInitialized) {\n      CubismLogWarning(\n        'CubismFramework.initialize() skipped, already initialized.'\n      );\n      return;\n    }\n\n    //---- static 初期化 ----\n    Value.staticInitializeNotForClientCall();\n\n    s_cubismIdManager = new CubismIdManager();\n\n    // --- HACK: 初期化時メモリ量の拡張(単位byte) ---\n    // 複数モデル表示時などにモデルが更新されない際に使用してください。\n    // 指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\n    // それ以外はすべて1024*1024*16 byteに丸めます。\n    Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);\n\n    s_isInitialized = true;\n\n    CubismLogInfo('CubismFramework.initialize() is complete.');\n  }\n\n  /**\n   * Cubism Framework内の全てのリソースを解放します。\n   *      ただし、外部で確保されたリソースについては解放しません。\n   *      外部で適切に破棄する必要があります。\n   */\n  public static dispose(): void {\n    CSM_ASSERT(s_isStarted);\n    if (!s_isStarted) {\n      CubismLogWarning('CubismFramework is not started.');\n      return;\n    }\n\n    // --- s_isInitializedによる未初期化解放ガード ---\n    // dispose()するには先にinitialize()を実行する必要がある。\n    if (!s_isInitialized) {\n      // false...リソース未確保の場合\n      CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\n      return;\n    }\n\n    Value.staticReleaseNotForClientCall();\n\n    s_cubismIdManager.release();\n    s_cubismIdManager = null;\n\n    // レンダラの静的リソース（シェーダプログラム他）を解放する\n    CubismRenderer.staticRelease();\n\n    s_isInitialized = false;\n\n    CubismLogInfo('CubismFramework.dispose() is complete.');\n  }\n\n  /**\n   * Cubism FrameworkのAPIを使用する準備が完了したかどうか\n   * @return APIを使用する準備が完了していればtrueが返ります。\n   */\n  public static isStarted(): boolean {\n    return s_isStarted;\n  }\n\n  /**\n   * Cubism Frameworkのリソース初期化がすでに行われているかどうか\n   * @return リソース確保が完了していればtrueが返ります\n   */\n  public static isInitialized(): boolean {\n    return s_isInitialized;\n  }\n\n  /**\n   * Core APIにバインドしたログ関数を実行する\n   *\n   * @praram message ログメッセージ\n   */\n  public static coreLogFunction(message: string): void {\n    // Return if logging not possible.\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n      return;\n    }\n\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\n  }\n\n  /**\n   * 現在のログ出力レベル設定の値を返す。\n   *\n   * @return  現在のログ出力レベル設定の値\n   */\n  public static getLoggingLevel(): LogLevel {\n    if (s_option != null) {\n      return s_option.loggingLevel;\n    }\n    return LogLevel.LogLevel_Off;\n  }\n\n  /**\n   * IDマネージャのインスタンスを取得する\n   * @return CubismManagerクラスのインスタンス\n   */\n  public static getIdManager(): CubismIdManager {\n    return s_cubismIdManager;\n  }\n\n  /**\n   * 静的クラスとして使用する\n   * インスタンス化させない\n   */\n  private constructor() {}\n}\n\nexport class Option {\n  logFunction: Live2DCubismCore.csmLogFunction; // ログ出力の関数オブジェクト\n  loggingLevel: LogLevel; // ログ出力レベルの設定\n}\n\n/**\n * ログ出力のレベル\n */\nexport enum LogLevel {\n  LogLevel_Verbose = 0, // 詳細ログ\n  LogLevel_Debug, // デバッグログ\n  LogLevel_Info, // Infoログ\n  LogLevel_Warning, // 警告ログ\n  LogLevel_Error, // エラーログ\n  LogLevel_Off // ログ出力無効\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './live2dcubismframework';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const Constant = $.Constant;\n  export const csmDelete = $.csmDelete;\n  export const CubismFramework = $.CubismFramework;\n  export type CubismFramework = $.CubismFramework;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LogLevel } from '@framework/live2dcubismframework';\n\n/**\n * Sample Appで使用する定数\n */\n\n// Canvas width and height pixel values, or dynamic screen size ('auto').\nexport const CanvasSize: { width: number; height: number } | 'auto' = 'auto';\n\n// キャンバスの数\nexport const CanvasNum = 1;\n\n// 画面\nexport const ViewScale = 1.0;\nexport const ViewMaxScale = 2.0;\nexport const ViewMinScale = 0.8;\n\nexport const ViewLogicalLeft = -1.0;\nexport const ViewLogicalRight = 1.0;\nexport const ViewLogicalBottom = -1.0;\nexport const ViewLogicalTop = 1.0;\n\nexport const ViewLogicalMaxLeft = -2.0;\nexport const ViewLogicalMaxRight = 2.0;\nexport const ViewLogicalMaxBottom = -2.0;\nexport const ViewLogicalMaxTop = 2.0;\n\n// 相対パス\nexport const ResourcesPath = '../../Resources/';\n\n// モデルの後ろにある背景の画像ファイル\nexport const BackImageName = 'back_class_normal.png';\n\n// 歯車\nexport const GearImageName = 'icon_gear.png';\n\n// 終了ボタン\nexport const PowerImageName = 'CloseNormal.png';\n\n// モデル定義---------------------------------------------\n// モデルを配置したディレクトリ名の配列\n// ディレクトリ名とmodel3.jsonの名前を一致させておくこと\nexport const ModelDir: string[] = [\n  'Haru',\n  'Hiyori',\n  'Mark',\n  'Natori',\n  'Rice',\n  'Mao',\n  'Wanko'\n];\nexport const ModelDirSize: number = ModelDir.length;\n\n// 外部定義ファイル（json）と合わせる\nexport const MotionGroupIdle = 'Idle'; // アイドリング\nexport const MotionGroupTapBody = 'TapBody'; // 体をタップしたとき\n\n// 外部定義ファイル（json）と合わせる\nexport const HitAreaNameHead = 'Head';\nexport const HitAreaNameBody = 'Body';\n\n// モーションの優先度定数\nexport const PriorityNone = 0;\nexport const PriorityIdle = 1;\nexport const PriorityNormal = 2;\nexport const PriorityForce = 3;\n\n// MOC3の一貫性検証オプション\nexport const MOCConsistencyValidationEnable = true;\n\n// デバッグ用ログの表示オプション\nexport const DebugLogEnable = true;\nexport const DebugTouchLogEnable = false;\n\n// Frameworkから出力するログのレベル設定\nexport const CubismLoggingLevel: LogLevel = LogLevel.LogLevel_Verbose;\n\n// デフォルトのレンダーターゲットサイズ\nexport const RenderTargetWidth = 1900;\nexport const RenderTargetHeight = 1000;\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * プラットフォーム依存機能を抽象化する Cubism Platform Abstraction Layer.\n *\n * ファイル読み込みや時刻取得等のプラットフォームに依存する関数をまとめる。\n */\nexport class LAppPal {\n  /**\n   * ファイルをバイトデータとして読みこむ\n   *\n   * @param filePath 読み込み対象ファイルのパス\n   * @return\n   * {\n   *      buffer,   読み込んだバイトデータ\n   *      size        ファイルサイズ\n   * }\n   */\n  public static loadFileAsBytes(\n    filePath: string,\n    callback: (arrayBuffer: ArrayBuffer, size: number) => void\n  ): void {\n    fetch(filePath)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => callback(arrayBuffer, arrayBuffer.byteLength));\n  }\n\n  /**\n   * デルタ時間（前回フレームとの差分）を取得する\n   * @return デルタ時間[ms]\n   */\n  public static getDeltaTime(): number {\n    return this.deltaTime;\n  }\n\n  public static updateTime(): void {\n    this.currentFrame = Date.now();\n    this.deltaTime = (this.currentFrame - this.lastFrame) / 1000;\n    this.lastFrame = this.currentFrame;\n  }\n\n  /**\n   * メッセージを出力する\n   * @param message 文字列\n   */\n  public static printMessage(message: string): void {\n    console.log(message);\n  }\n\n  static lastUpdate = Date.now();\n\n  static currentFrame = 0.0;\n  static lastFrame = 0.0;\n  static deltaTime = 0.0;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * Cubism SDKのサンプルで使用するWebGLを管理するクラス\n */\nexport class LAppGlManager {\n  public constructor() {\n    this._gl = null;\n  }\n\n  public initialize(canvas: HTMLCanvasElement): boolean {\n    // glコンテキストを初期化\n    this._gl = canvas.getContext('webgl2');\n\n    if (!this._gl) {\n      // gl初期化失敗\n      alert('Cannot initialize WebGL. This browser does not support.');\n      this._gl = null;\n      // document.body.innerHTML =\n      //   'This browser does not support the <code>&lt;canvas&gt;</code> element.';\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {}\n\n  public getGl(): WebGLRenderingContext | WebGL2RenderingContext {\n    return this._gl;\n  }\n\n  private _gl: WebGLRenderingContext | WebGL2RenderingContext = null;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * @brief パラメータIDのデフォルト値を保持する定数<br>\n *         デフォルト値の仕様は以下のマニュアルに基づく<br>\n *         https://docs.live2d.com/cubism-editor-manual/standard-parametor-list/\n */\nexport const CubismDefaultParameterId = Object.freeze<Record<string, string>>({\n  // パーツID\n  HitAreaPrefix: 'HitArea',\n  HitAreaHead: 'Head',\n  HitAreaBody: 'Body',\n  PartsIdCore: 'Parts01Core',\n  PartsArmPrefix: 'Parts01Arm_',\n  PartsArmLPrefix: 'Parts01ArmL_',\n  PartsArmRPrefix: 'Parts01ArmR_',\n  // パラメータID\n  ParamAngleX: 'ParamAngleX',\n  ParamAngleY: 'ParamAngleY',\n  ParamAngleZ: 'ParamAngleZ',\n  ParamEyeLOpen: 'ParamEyeLOpen',\n  ParamEyeLSmile: 'ParamEyeLSmile',\n  ParamEyeROpen: 'ParamEyeROpen',\n  ParamEyeRSmile: 'ParamEyeRSmile',\n  ParamEyeBallX: 'ParamEyeBallX',\n  ParamEyeBallY: 'ParamEyeBallY',\n  ParamEyeBallForm: 'ParamEyeBallForm',\n  ParamBrowLY: 'ParamBrowLY',\n  ParamBrowRY: 'ParamBrowRY',\n  ParamBrowLX: 'ParamBrowLX',\n  ParamBrowRX: 'ParamBrowRX',\n  ParamBrowLAngle: 'ParamBrowLAngle',\n  ParamBrowRAngle: 'ParamBrowRAngle',\n  ParamBrowLForm: 'ParamBrowLForm',\n  ParamBrowRForm: 'ParamBrowRForm',\n  ParamMouthForm: 'ParamMouthForm',\n  ParamMouthOpenY: 'ParamMouthOpenY',\n  ParamCheek: 'ParamCheek',\n  ParamBodyAngleX: 'ParamBodyAngleX',\n  ParamBodyAngleY: 'ParamBodyAngleY',\n  ParamBodyAngleZ: 'ParamBodyAngleZ',\n  ParamBreath: 'ParamBreath',\n  ParamArmLA: 'ParamArmLA',\n  ParamArmRA: 'ParamArmRA',\n  ParamArmLB: 'ParamArmLB',\n  ParamArmRB: 'ParamArmRB',\n  ParamHandL: 'ParamHandL',\n  ParamHandR: 'ParamHandR',\n  ParamHairFront: 'ParamHairFront',\n  ParamHairSide: 'ParamHairSide',\n  ParamHairBack: 'ParamHairBack',\n  ParamHairFluffy: 'ParamHairFluffy',\n  ParamShoulderY: 'ParamShoulderY',\n  ParamBustX: 'ParamBustX',\n  ParamBustY: 'ParamBustY',\n  ParamBaseX: 'ParamBaseX',\n  ParamBaseY: 'ParamBaseY',\n  ParamNONE: 'NONE:'\n});\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismdefaultparameterid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;\n  export const HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;\n  export const HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;\n  export const ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;\n  export const ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;\n  export const ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;\n  export const ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;\n  export const ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;\n  export const ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;\n  export const ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;\n  export const ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;\n  export const ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;\n  export const ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;\n  export const ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;\n  export const ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;\n  export const ParamBreath = $.CubismDefaultParameterId.ParamBreath;\n  export const ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;\n  export const ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;\n  export const ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;\n  export const ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;\n  export const ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;\n  export const ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;\n  export const ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;\n  export const ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;\n  export const ParamBustX = $.CubismDefaultParameterId.ParamBustX;\n  export const ParamBustY = $.CubismDefaultParameterId.ParamBustY;\n  export const ParamCheek = $.CubismDefaultParameterId.ParamCheek;\n  export const ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;\n  export const ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;\n  export const ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;\n  export const ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;\n  export const ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;\n  export const ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;\n  export const ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;\n  export const ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;\n  export const ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;\n  export const ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;\n  export const ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;\n  export const ParamHandL = $.CubismDefaultParameterId.ParamHandL;\n  export const ParamHandR = $.CubismDefaultParameterId.ParamHandR;\n  export const ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;\n  export const ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;\n  export const ParamNONE = $.CubismDefaultParameterId.ParamNONE;\n  export const ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;\n  export const PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;\n  export const PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;\n  export const PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;\n  export const PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from './id/cubismid';\nimport { csmMap } from './type/csmmap';\n\n/**\n * モデル設定情報を取り扱う関数を宣言した純粋仮想クラス。\n *\n * このクラスを継承することで、モデル設定情報を取り扱うクラスになる。\n */\nexport abstract class ICubismModelSetting {\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  public abstract getModelFileName(): string;\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  public abstract getTextureCount(): number;\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  public abstract getTextureDirectory(): string;\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  public abstract getTextureFileName(index: number): string;\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  public abstract getHitAreasCount(): number;\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  public abstract getHitAreaId(index: number): CubismIdHandle;\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  public abstract getHitAreaName(index: number): string;\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  public abstract getPhysicsFileName(): string;\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  public abstract getPoseFileName(): string;\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  public abstract getExpressionCount(): number;\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  public abstract getExpressionName(index: number): string;\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  public abstract getExpressionFileName(index: number): string;\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  public abstract getMotionGroupCount(): number;\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  public abstract getMotionGroupName(index: number): string;\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  public abstract getMotionCount(groupName: string): number;\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  public abstract getMotionFileName(groupName: string, index: number): string;\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  public abstract getMotionSoundFileName(\n    groupName: string,\n    index: number\n  ): string;\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  public abstract getMotionFadeInTimeValue(\n    groupName: string,\n    index: number\n  ): number;\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  public abstract getMotionFadeOutTimeValue(\n    groupName: string,\n    index: number\n  ): number;\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  public abstract getUserDataFile(): string;\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  public abstract getLayoutMap(outLayoutMap: csmMap<string, number>): boolean;\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  public abstract getEyeBlinkParameterCount(): number;\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public abstract getEyeBlinkParameterId(index: number): CubismIdHandle;\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  public abstract getLipSyncParameterCount(): number;\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public abstract getLipSyncParameterId(index: number): CubismIdHandle;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './icubismmodelsetting';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const ICubismModelSetting = $.ICubismModelSetting;\n  export type ICubismModelSetting = $.ICubismModelSetting;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from './icubismmodelsetting';\nimport { CubismIdHandle } from './id/cubismid';\nimport { CubismFramework } from './live2dcubismframework';\nimport { csmMap, iterator } from './type/csmmap';\nimport { csmVector } from './type/csmvector';\nimport { CubismJson, Value } from './utils/cubismjson';\n\nexport enum FrequestNode {\n  FrequestNode_Groups, // getRoot().getValueByString(Groups)\n  FrequestNode_Moc, // getRoot().getValueByString(FileReferences).getValueByString(Moc)\n  FrequestNode_Motions, // getRoot().getValueByString(FileReferences).getValueByString(Motions)\n  FrequestNode_Expressions, // getRoot().getValueByString(FileReferences).getValueByString(Expressions)\n  FrequestNode_Textures, // getRoot().getValueByString(FileReferences).getValueByString(Textures)\n  FrequestNode_Physics, // getRoot().getValueByString(FileReferences).getValueByString(Physics)\n  FrequestNode_Pose, // getRoot().getValueByString(FileReferences).getValueByString(Pose)\n  FrequestNode_HitAreas // getRoot().getValueByString(HitAreas)\n}\n\n/**\n * Model3Jsonパーサー\n *\n * model3.jsonファイルをパースして値を取得する\n */\nexport class CubismModelSettingJson extends ICubismModelSetting {\n  /**\n   * 引数付きコンストラクタ\n   *\n   * @param buffer    Model3Jsonをバイト配列として読み込んだデータバッファ\n   * @param size      Model3Jsonのデータサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    super();\n    this._json = CubismJson.create(buffer, size);\n\n    if (this.getJson()) {\n      this._jsonValue = new csmVector<Value>();\n\n      // 順番はenum FrequestNodeと一致させる\n      this._jsonValue.pushBack(\n        this.getJson().getRoot().getValueByString(this.groups)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.moc)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.motions)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.expressions)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.textures)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.physics)\n      );\n      this._jsonValue.pushBack(\n        this.getJson()\n          .getRoot()\n          .getValueByString(this.fileReferences)\n          .getValueByString(this.pose)\n      );\n      this._jsonValue.pushBack(\n        this.getJson().getRoot().getValueByString(this.hitAreas)\n      );\n    }\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n\n    this._jsonValue = null;\n  }\n\n  /**\n   * CubismJsonオブジェクトを取得する\n   *\n   * @return CubismJson\n   */\n  public getJson(): CubismJson {\n    return this._json;\n  }\n\n  /**\n   * Mocファイルの名前を取得する\n   * @return Mocファイルの名前\n   */\n  public getModelFileName(): string {\n    if (!this.isExistModelFile()) {\n      return '';\n    }\n    return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\n  }\n\n  /**\n   * モデルが使用するテクスチャの数を取得する\n   * テクスチャの数\n   */\n  public getTextureCount(): number {\n    if (!this.isExistTextureFiles()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\n  }\n\n  /**\n   * テクスチャが配置されたディレクトリの名前を取得する\n   * @return テクスチャが配置されたディレクトリの名前\n   */\n  public getTextureDirectory(): string {\n    const texturePath = this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(0)\n      .getRawString();\n\n    const pathArray = texturePath.split('/');\n    // 最後の要素はテクスチャ名なので不要\n    const arrayLength = pathArray.length - 1;\n    let textureDirectoryStr = '';\n\n    // 分割したパスを結合\n    for (let i = 0; i < arrayLength; i++) {\n      textureDirectoryStr += pathArray[i];\n      if (i < arrayLength - 1) {\n        textureDirectoryStr += '/';\n      }\n    }\n\n    return textureDirectoryStr;\n  }\n\n  /**\n   * モデルが使用するテクスチャの名前を取得する\n   * @param index 配列のインデックス値\n   * @return テクスチャの名前\n   */\n  public getTextureFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Textures)\n      .getValueByIndex(index)\n      .getRawString();\n  }\n\n  /**\n   * モデルに設定された当たり判定の数を取得する\n   * @return モデルに設定された当たり判定の数\n   */\n  public getHitAreasCount(): number {\n    if (!this.isExistHitAreas()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\n  }\n\n  /**\n   * 当たり判定に設定されたIDを取得する\n   *\n   * @param index 配列のindex\n   * @return 当たり判定に設定されたID\n   */\n  public getHitAreaId(index: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._jsonValue\n        .at(FrequestNode.FrequestNode_HitAreas)\n        .getValueByIndex(index)\n        .getValueByString(this.id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 当たり判定に設定された名前を取得する\n   * @param index 配列のインデックス値\n   * @return 当たり判定に設定された名前\n   */\n  public getHitAreaName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_HitAreas)\n      .getValueByIndex(index)\n      .getValueByString(this.name)\n      .getRawString();\n  }\n\n  /**\n   * 物理演算設定ファイルの名前を取得する\n   * @return 物理演算設定ファイルの名前\n   */\n  public getPhysicsFileName(): string {\n    if (!this.isExistPhysicsFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();\n  }\n\n  /**\n   * パーツ切り替え設定ファイルの名前を取得する\n   * @return パーツ切り替え設定ファイルの名前\n   */\n  public getPoseFileName(): string {\n    if (!this.isExistPoseFile()) {\n      return '';\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの数を取得する\n   * @return 表情設定ファイルの数\n   */\n  public getExpressionCount(): number {\n    if (!this.isExistExpressionFile()) {\n      return 0;\n    }\n\n    return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();\n  }\n\n  /**\n   * 表情設定ファイルを識別する名前（別名）を取得する\n   * @param index 配列のインデックス値\n   * @return 表情の名前\n   */\n  public getExpressionName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(this.name)\n      .getRawString();\n  }\n\n  /**\n   * 表情設定ファイルの名前を取得する\n   * @param index 配列のインデックス値\n   * @return 表情設定ファイルの名前\n   */\n  public getExpressionFileName(index: number): string {\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Expressions)\n      .getValueByIndex(index)\n      .getValueByString(this.filePath)\n      .getRawString();\n  }\n\n  /**\n   * モーショングループの数を取得する\n   * @return モーショングループの数\n   */\n  public getMotionGroupCount(): number {\n    if (!this.isExistMotionGroups()) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .getSize();\n  }\n\n  /**\n   * モーショングループの名前を取得する\n   * @param index 配列のインデックス値\n   * @return モーショングループの名前\n   */\n  public getMotionGroupName(index: number): string {\n    if (!this.isExistMotionGroups()) {\n      return null;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getKeys()\n      .at(index);\n  }\n\n  /**\n   * モーショングループに含まれるモーションの数を取得する\n   * @param groupName モーショングループの名前\n   * @return モーショングループの数\n   */\n  public getMotionCount(groupName: string): number {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return 0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getSize();\n  }\n\n  /**\n   * グループ名とインデックス値からモーションファイル名を取得する\n   * @param groupName モーショングループの名前\n   * @param index     配列のインデックス値\n   * @return モーションファイルの名前\n   */\n  public getMotionFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionGroupName(groupName)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.filePath)\n      .getRawString();\n  }\n\n  /**\n   * モーションに対応するサウンドファイルの名前を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return サウンドファイルの名前\n   */\n  public getMotionSoundFileName(groupName: string, index: number): string {\n    if (!this.isExistMotionSoundFile(groupName, index)) {\n      return '';\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.soundPath)\n      .getRawString();\n  }\n\n  /**\n   * モーション開始時のフェードイン処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードイン処理時間[秒]\n   */\n  public getMotionFadeInTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeIn(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーション終了時のフェードアウト処理時間を取得する\n   * @param groupName モーショングループの名前\n   * @param index 配列のインデックス値\n   * @return フェードアウト処理時間[秒]\n   */\n  public getMotionFadeOutTimeValue(groupName: string, index: number): number {\n    if (!this.isExistMotionFadeOut(groupName, index)) {\n      return -1.0;\n    }\n\n    return this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * ユーザーデータのファイル名を取得する\n   * @return ユーザーデータのファイル名\n   */\n  public getUserDataFile(): string {\n    if (!this.isExistUserDataFile()) {\n      return '';\n    }\n\n    return this.getJson()\n      .getRoot()\n      .getValueByString(this.fileReferences)\n      .getValueByString(this.userData)\n      .getRawString();\n  }\n\n  /**\n   * レイアウト情報を取得する\n   * @param outLayoutMap csmMapクラスのインスタンス\n   * @return true レイアウト情報が存在する\n   * @return false レイアウト情報が存在しない\n   */\n  public getLayoutMap(outLayoutMap: csmMap<string, number>): boolean {\n    // 存在しない要素にアクセスするとエラーになるためValueがnullの場合はnullを代入する\n    const map: csmMap<string, Value> = this.getJson()\n      .getRoot()\n      .getValueByString(this.layout)\n      .getMap();\n\n    if (map == null) {\n      return false;\n    }\n\n    let ret = false;\n\n    for (\n      const ite: iterator<string, Value> = map.begin();\n      ite.notEqual(map.end());\n      ite.preIncrement()\n    ) {\n      outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\n      ret = true;\n    }\n\n    return ret;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータの数を取得する\n   * @return 目パチに関連付けられたパラメータの数\n   */\n  public getEyeBlinkParameterCount(): number {\n    if (!this.isExistEyeBlinkParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.eyeBlink) {\n        num = refI.getValueByString(this.ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * 目パチに関連付けられたパラメータのIDを取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getEyeBlinkParameterId(index: number): CubismIdHandle {\n    if (!this.isExistEyeBlinkParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.eyeBlink) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(this.ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @return リップシンクに関連付けられたパラメータの数\n   */\n  public getLipSyncParameterCount(): number {\n    if (!this.isExistLipSyncParameters()) {\n      return 0;\n    }\n\n    let num = 0;\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.lipSync) {\n        num = refI.getValueByString(this.ids).getVector().getSize();\n        break;\n      }\n    }\n\n    return num;\n  }\n\n  /**\n   * リップシンクに関連付けられたパラメータの数を取得する\n   * @param index 配列のインデックス値\n   * @return パラメータID\n   */\n  public getLipSyncParameterId(index: number): CubismIdHandle {\n    if (!this.isExistLipSyncParameters()) {\n      return null;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      i++\n    ) {\n      const refI: Value = this._jsonValue\n        .at(FrequestNode.FrequestNode_Groups)\n        .getValueByIndex(i);\n      if (refI.isNull() || refI.isError()) {\n        continue;\n      }\n\n      if (refI.getValueByString(this.name).getRawString() == this.lipSync) {\n        return CubismFramework.getIdManager().getId(\n          refI.getValueByString(this.ids).getValueByIndex(index).getRawString()\n        );\n      }\n    }\n    return null;\n  }\n\n  /**\n   * モデルファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistModelFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * テクスチャファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistTextureFiles(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 当たり判定のキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistHitAreas(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 物理演算ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistPhysicsFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * ポーズ設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistPoseFile(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 表情設定ファイルのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistExpressionFile(): boolean {\n    const node: Value = this._jsonValue.at(\n      FrequestNode.FrequestNode_Expressions\n    );\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * モーショングループのキーが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionGroups(): boolean {\n    const node: Value = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーショングループのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionGroupName(groupName: string): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するサウンドファイルのキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionSoundFile(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.soundPath);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードイン時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionFadeIn(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeInTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 引数で指定したモーションに対応するフェードアウト時間のキーが存在するかどうかを確認する\n   * @param groupName  グループ名\n   * @param index 配列のインデックス値\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistMotionFadeOut(groupName: string, index: number): boolean {\n    const node: Value = this._jsonValue\n      .at(FrequestNode.FrequestNode_Motions)\n      .getValueByString(groupName)\n      .getValueByIndex(index)\n      .getValueByString(this.fadeOutTime);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * UserDataのファイル名が存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistUserDataFile(): boolean {\n    const node: Value = this.getJson()\n      .getRoot()\n      .getValueByString(this.fileReferences)\n      .getValueByString(this.userData);\n    return !node.isNull() && !node.isError();\n  }\n\n  /**\n   * 目ぱちに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistEyeBlinkParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(this.name)\n          .getRawString() == this.eyeBlink\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * リップシンクに対応付けられたパラメータが存在するかどうかを確認する\n   * @return true キーが存在する\n   * @return false キーが存在しない\n   */\n  protected isExistLipSyncParameters(): boolean {\n    if (\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\n      this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()\n    ) {\n      return false;\n    }\n    for (\n      let i = 0;\n      i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize();\n      ++i\n    ) {\n      if (\n        this._jsonValue\n          .at(FrequestNode.FrequestNode_Groups)\n          .getValueByIndex(i)\n          .getValueByString(this.name)\n          .getRawString() == this.lipSync\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected _json: CubismJson;\n  protected _jsonValue: csmVector<Value>;\n\n  /**\n   * Model3Jsonのキー文字列\n   */\n  protected readonly version = 'Version';\n  protected readonly fileReferences = 'FileReferences';\n\n  protected readonly groups = 'Groups';\n  protected readonly layout = 'Layout';\n  protected readonly hitAreas = 'HitAreas';\n\n  protected readonly moc = 'Moc';\n  protected readonly textures = 'Textures';\n  protected readonly physics = 'Physics';\n  protected readonly pose = 'Pose';\n  protected readonly expressions = 'Expressions';\n  protected readonly motions = 'Motions';\n\n  protected readonly userData = 'UserData';\n  protected readonly name = 'Name';\n  protected readonly filePath = 'File';\n  protected readonly id = 'Id';\n  protected readonly ids = 'Ids';\n  protected readonly target = 'Target';\n\n  // Motions\n  protected readonly idle = 'Idle';\n  protected readonly tapBody = 'TapBody';\n  protected readonly pinchIn = 'PinchIn';\n  protected readonly pinchOut = 'PinchOut';\n  protected readonly shake = 'Shake';\n  protected readonly flickHead = 'FlickHead';\n  protected readonly parameter = 'Parameter';\n\n  protected readonly soundPath = 'Sound';\n  protected readonly fadeInTime = 'FadeInTime';\n  protected readonly fadeOutTime = 'FadeOutTime';\n\n  // Layout\n  protected readonly centerX = 'CenterX';\n  protected readonly centerY = 'CenterY';\n  protected readonly x = 'X';\n  protected readonly y = 'Y';\n  protected readonly width = 'Width';\n  protected readonly height = 'Height';\n\n  protected readonly lipSync = 'LipSync';\n  protected readonly eyeBlink = 'EyeBlink';\n\n  protected readonly initParameter = 'init_param';\n  protected readonly initPartsVisible = 'init_parts_visible';\n  protected readonly val = 'val';\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelsettingjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelSettingJson = $.CubismModelSettingJson;\n  export type CubismModelSettingJson = $.CubismModelSettingJson;\n  export const FrequestNode = $.FrequestNode;\n  export type FrequestNode = $.FrequestNode;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 呼吸機能\n *\n * 呼吸機能を提供する。\n */\nexport class CubismBreath {\n  /**\n   * インスタンスの作成\n   */\n  public static create(): CubismBreath {\n    return new CubismBreath();\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param instance 対象のCubismBreath\n   */\n  public static delete(instance: CubismBreath): void {\n    if (instance != null) {\n      instance = null;\n    }\n  }\n\n  /**\n   * 呼吸のパラメータの紐づけ\n   * @param breathParameters 呼吸を紐づけたいパラメータのリスト\n   */\n  public setParameters(breathParameters: csmVector<BreathParameterData>): void {\n    this._breathParameters = breathParameters;\n  }\n\n  /**\n   * 呼吸に紐づいているパラメータの取得\n   * @return 呼吸に紐づいているパラメータのリスト\n   */\n  public getParameters(): csmVector<BreathParameterData> {\n    return this._breathParameters;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    this._currentTime += deltaTimeSeconds;\n\n    const t: number = this._currentTime * 2.0 * Math.PI;\n\n    for (let i = 0; i < this._breathParameters.getSize(); ++i) {\n      const data: BreathParameterData = this._breathParameters.at(i);\n\n      model.addParameterValueById(\n        data.parameterId,\n        data.offset + data.peak * Math.sin(t / data.cycle),\n        data.weight\n      );\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._currentTime = 0.0;\n  }\n\n  _breathParameters: csmVector<BreathParameterData>; // 呼吸にひもづいているパラメータのリスト\n  _currentTime: number; // 積算時間[秒]\n}\n\n/**\n * 呼吸のパラメータ情報\n */\nexport class BreathParameterData {\n  /**\n   * コンストラクタ\n   * @param parameterId   呼吸をひもづけるパラメータID\n   * @param offset        呼吸を正弦波としたときの、波のオフセット\n   * @param peak          呼吸を正弦波としたときの、波の高さ\n   * @param cycle         呼吸を正弦波としたときの、波の周期\n   * @param weight        パラメータへの重み\n   */\n  constructor(\n    parameterId?: CubismIdHandle,\n    offset?: number,\n    peak?: number,\n    cycle?: number,\n    weight?: number\n  ) {\n    this.parameterId = parameterId == undefined ? null : parameterId;\n    this.offset = offset == undefined ? 0.0 : offset;\n    this.peak = peak == undefined ? 0.0 : peak;\n    this.cycle = cycle == undefined ? 0.0 : cycle;\n    this.weight = weight == undefined ? 0.0 : weight;\n  }\n\n  parameterId: CubismIdHandle; // 呼吸をひもづけるパラメータID\\\n  offset: number; // 呼吸を正弦波としたときの、波のオフセット\n  peak: number; // 呼吸を正弦波としたときの、波の高さ\n  cycle: number; // 呼吸を正弦波としたときの、波の周期\n  weight: number; // パラメータへの重み\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismbreath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const BreathParameterData = $.BreathParameterData;\n  export type BreathParameterData = $.BreathParameterData;\n  export const CubismBreath = $.CubismBreath;\n  export type CubismBreath = $.CubismBreath;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ICubismModelSetting } from '../icubismmodelsetting';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 自動まばたき機能\n *\n * 自動まばたき機能を提供する。\n */\nexport class CubismEyeBlink {\n  /**\n   * インスタンスを作成する\n   * @param modelSetting モデルの設定情報\n   * @return 作成されたインスタンス\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\n   */\n  public static create(\n    modelSetting: ICubismModelSetting = null\n  ): CubismEyeBlink {\n    return new CubismEyeBlink(modelSetting);\n  }\n\n  /**\n   * インスタンスの破棄\n   * @param eyeBlink 対象のCubismEyeBlink\n   */\n  public static delete(eyeBlink: CubismEyeBlink): void {\n    if (eyeBlink != null) {\n      eyeBlink = null;\n    }\n  }\n\n  /**\n   * まばたきの間隔の設定\n   * @param blinkingInterval まばたきの間隔の時間[秒]\n   */\n  public setBlinkingInterval(blinkingInterval: number): void {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n\n  /**\n   * まばたきのモーションの詳細設定\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\n   * @param opening   まぶたを開く動作の所要時間[秒]\n   */\n  public setBlinkingSetting(\n    closing: number,\n    closed: number,\n    opening: number\n  ): void {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの設定\n   * @param parameterIds パラメータのIDのリスト\n   */\n  public setParameterIds(parameterIds: csmVector<CubismIdHandle>): void {\n    this._parameterIds = parameterIds;\n  }\n\n  /**\n   * まばたきさせるパラメータIDのリストの取得\n   * @return パラメータIDのリスト\n   */\n  public getParameterIds(): csmVector<CubismIdHandle> {\n    return this._parameterIds;\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue: number;\n    let t = 0.0;\n    const blinkingState: EyeState = this._blinkingState;\n\n    switch (blinkingState) {\n      case EyeState.EyeState_Closing:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Closed;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0 - t;\n\n        break;\n      case EyeState.EyeState_Closed:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._closedSeconds;\n\n        if (t >= 1.0) {\n          this._blinkingState = EyeState.EyeState_Opening;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 0.0;\n\n        break;\n      case EyeState.EyeState_Opening:\n        t =\n          (this._userTimeSeconds - this._stateStartTimeSeconds) /\n          this._openingSeconds;\n\n        if (t >= 1.0) {\n          t = 1.0;\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n\n        parameterValue = t;\n\n        break;\n      case EyeState.EyeState_Interval:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = EyeState.EyeState_Closing;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n\n        parameterValue = 1.0;\n\n        break;\n      case EyeState.EyeState_First:\n      default:\n        this._blinkingState = EyeState.EyeState_Interval;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n\n        parameterValue = 1.0;\n        break;\n    }\n\n    if (!CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n\n    for (let i = 0; i < this._parameterIds.getSize(); ++i) {\n      model.setParameterValueById(this._parameterIds.at(i), parameterValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param modelSetting モデルの設定情報\n   */\n  public constructor(modelSetting: ICubismModelSetting) {\n    this._blinkingState = EyeState.EyeState_First;\n    this._nextBlinkingTime = 0.0;\n    this._stateStartTimeSeconds = 0.0;\n    this._blinkingIntervalSeconds = 4.0;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0.0;\n    this._parameterIds = new csmVector<CubismIdHandle>();\n\n    if (modelSetting == null) {\n      return;\n    }\n\n    for (let i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\n      this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\n    }\n  }\n\n  /**\n   * 次の瞬きのタイミングの決定\n   *\n   * @return 次のまばたきを行う時刻[秒]\n   */\n  public determinNextBlinkingTiming(): number {\n    const r: number = Math.random();\n    return (\n      this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0)\n    );\n  }\n\n  _blinkingState: number; // 現在の状態\n  _parameterIds: csmVector<CubismIdHandle>; // 操作対象のパラメータのIDのリスト\n  _nextBlinkingTime: number; // 次のまばたきの時刻[秒]\n  _stateStartTimeSeconds: number; // 現在の状態が開始した時刻[秒]\n  _blinkingIntervalSeconds: number; // まばたきの間隔[秒]\n  _closingSeconds: number; // まぶたを閉じる動作の所要時間[秒]\n  _closedSeconds: number; // まぶたを閉じている動作の所要時間[秒]\n  _openingSeconds: number; // まぶたを開く動作の所要時間[秒]\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  /**\n   * IDで指定された目のパラメータが、0のときに閉じるなら true 、1の時に閉じるなら false 。\n   */\n  static readonly CloseIfZero: boolean = true;\n}\n\n/**\n * まばたきの状態\n *\n * まばたきの状態を表す列挙型\n */\nexport enum EyeState {\n  EyeState_First = 0, // 初期状態\n  EyeState_Interval, // まばたきしていない状態\n  EyeState_Closing, // まぶたが閉じていく途中の状態\n  EyeState_Closed, // まぶたが閉じている状態\n  EyeState_Opening // まぶたが開いていく途中の状態\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismeyeblink';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismEyeBlink = $.CubismEyeBlink;\n  export type CubismEyeBlink = $.CubismEyeBlink;\n  export const EyeState = $.EyeState;\n  export type EyeState = $.EyeState;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\n\nconst Epsilon = 0.001;\nconst DefaultFadeInSeconds = 0.5;\n\n// Pose.jsonのタグ\nconst FadeIn = 'FadeInTime';\nconst Link = 'Link';\nconst Groups = 'Groups';\nconst Id = 'Id';\n\n/**\n * パーツの不透明度の設定\n *\n * パーツの不透明度の管理と設定を行う。\n */\nexport class CubismPose {\n  /**\n   * インスタンスの作成\n   * @param pose3json pose3.jsonのデータ\n   * @param size pose3.jsonのデータのサイズ[byte]\n   * @return 作成されたインスタンス\n   */\n  public static create(pose3json: ArrayBuffer, size: number): CubismPose {\n    const json: CubismJson = CubismJson.create(pose3json, size);\n    if (!json) {\n      return null;\n    }\n\n    const ret: CubismPose = new CubismPose();\n    const root: Value = json.getRoot();\n\n    // フェード時間の指定\n    if (!root.getValueByString(FadeIn).isNull()) {\n      ret._fadeTimeSeconds = root\n        .getValueByString(FadeIn)\n        .toFloat(DefaultFadeInSeconds);\n\n      if (ret._fadeTimeSeconds < 0.0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n\n    // パーツグループ\n    const poseListInfo: Value = root.getValueByString(Groups);\n    const poseCount: number = poseListInfo.getSize();\n\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo: Value = poseListInfo.getValueByIndex(poseIndex);\n      const idCount: number = idListInfo.getSize();\n      let groupCount = 0;\n\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo: Value = idListInfo.getValueByIndex(groupIndex);\n        const partData: PartData = new PartData();\n        const parameterId: CubismIdHandle =\n          CubismFramework.getIdManager().getId(\n            partInfo.getValueByString(Id).getRawString()\n          );\n\n        partData.partId = parameterId;\n\n        // リンクするパーツの設定\n        if (!partInfo.getValueByString(Link).isNull()) {\n          const linkListInfo: Value = partInfo.getValueByString(Link);\n          const linkCount: number = linkListInfo.getSize();\n\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart: PartData = new PartData();\n            const linkId: CubismIdHandle = CubismFramework.getIdManager().getId(\n              linkListInfo.getValueByIndex(linkIndex).getString()\n            );\n\n            linkPart.partId = linkId;\n\n            partData.link.pushBack(linkPart);\n          }\n        }\n\n        ret._partGroups.pushBack(partData.clone());\n\n        ++groupCount;\n      }\n\n      ret._partGroupCounts.pushBack(groupCount);\n    }\n\n    CubismJson.delete(json);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param pose 対象のCubismPose\n   */\n  public static delete(pose: CubismPose): void {\n    if (pose != null) {\n      pose = null;\n    }\n  }\n\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public updateParameters(model: CubismModel, deltaTimeSeconds: number): void {\n    // 前回のモデルと同じでない場合は初期化が必要\n    if (model != this._lastModel) {\n      // パラメータインデックスの初期化\n      this.reset(model);\n    }\n\n    this._lastModel = model;\n\n    // 設定から時間を変更すると、経過時間がマイナスになる事があるので、経過時間0として対応\n    if (deltaTimeSeconds < 0.0) {\n      deltaTimeSeconds = 0.0;\n    }\n\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); i++) {\n      const partGroupCount: number = this._partGroupCounts.at(i);\n\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n\n      beginIndex += partGroupCount;\n    }\n\n    this.copyPartOpacities(model);\n  }\n\n  /**\n   * 表示を初期化\n   * @param model 対象のモデル\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\n   */\n  public reset(model: CubismModel): void {\n    let beginIndex = 0;\n\n    for (let i = 0; i < this._partGroupCounts.getSize(); ++i) {\n      const groupCount: number = this._partGroupCounts.at(i);\n\n      for (let j: number = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups.at(j).initialize(model);\n\n        const partsIndex: number = this._partGroups.at(j).partIndex;\n        const paramIndex: number = this._partGroups.at(j).parameterIndex;\n\n        if (partsIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\n\n        for (let k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\n          this._partGroups.at(j).link.at(k).initialize(model);\n        }\n      }\n\n      beginIndex += groupCount;\n    }\n  }\n\n  /**\n   * パーツの不透明度をコピー\n   *\n   * @param model 対象のモデル\n   */\n  public copyPartOpacities(model: CubismModel): void {\n    for (\n      let groupIndex = 0;\n      groupIndex < this._partGroups.getSize();\n      ++groupIndex\n    ) {\n      const partData: PartData = this._partGroups.at(groupIndex);\n\n      if (partData.link.getSize() == 0) {\n        continue; // 連動するパラメータはない\n      }\n\n      const partIndex: number = this._partGroups.at(groupIndex).partIndex;\n      const opacity: number = model.getPartOpacityByIndex(partIndex);\n\n      for (\n        let linkIndex = 0;\n        linkIndex < partData.link.getSize();\n        ++linkIndex\n      ) {\n        const linkPart: PartData = partData.link.at(linkIndex);\n        const linkPartIndex: number = linkPart.partIndex;\n\n        if (linkPartIndex < 0) {\n          continue;\n        }\n\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * パーツのフェード操作を行う。\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\n   * @param partGroupCount フェード操作を行うパーツグループの個数\n   */\n  public doFade(\n    model: CubismModel,\n    deltaTimeSeconds: number,\n    beginIndex: number,\n    partGroupCount: number\n  ): void {\n    let visiblePartIndex = -1;\n    let newOpacity = 1.0;\n\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n\n    // 現在、表示状態になっているパーツを取得\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex: number = this._partGroups.at(i).partIndex;\n      const paramIndex: number = this._partGroups.at(i).parameterIndex;\n\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n\n        visiblePartIndex = i;\n        // ゼロ除算の回避\n        if (this._fadeTimeSeconds == 0) {\n          newOpacity = 1.0;\n          continue;\n        }\n\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n\n        // 新しい不透明度を計算\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n\n        if (newOpacity > 1.0) {\n          newOpacity = 1.0;\n        }\n      }\n    }\n\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1.0;\n    }\n\n    // 表示パーツ、非表示パーツの不透明度を設定する\n    for (let i: number = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex: number = this._partGroups.at(i).partIndex;\n\n      // 表示パーツの設定\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity); // 先に設定\n      }\n      // 非表示パーツの設定\n      else {\n        let opacity: number = model.getPartOpacityByIndex(partsIndex);\n        let a1: number; // 計算によって求められる不透明度\n\n        if (newOpacity < phi) {\n          a1 = (newOpacity * (phi - 1)) / phi + 1.0; // (0,1),(phi,phi)を通る直線式\n        } else {\n          a1 = ((1 - newOpacity) * phi) / (1.0 - phi); // (1,0),(phi,phi)を通る直線式\n        }\n\n        // 背景の見える割合を制限する場合\n        const backOpacity: number = (1.0 - a1) * (1.0 - newOpacity);\n\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\n        }\n\n        if (opacity > a1) {\n          opacity = a1; // 計算の不透明度よりも大きければ（濃ければ）不透明度を上げる\n        }\n\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = null;\n    this._partGroups = new csmVector<PartData>();\n    this._partGroupCounts = new csmVector<number>();\n  }\n\n  _partGroups: csmVector<PartData>; // パーツグループ\n  _partGroupCounts: csmVector<number>; // それぞれのパーツグループの個数\n  _fadeTimeSeconds: number; // フェード時間[秒]\n  _lastModel: CubismModel; // 前回操作したモデル\n}\n\n/**\n * パーツにまつわるデータを管理\n */\nexport class PartData {\n  /**\n   * コンストラクタ\n   */\n  constructor(v?: PartData) {\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.link = new csmVector<PartData>();\n\n    if (v != undefined) {\n      this.partId = v.partId;\n\n      for (\n        const ite: iterator<PartData> = v.link.begin();\n        ite.notEqual(v.link.end());\n        ite.preIncrement()\n      ) {\n        this.link.pushBack(ite.ptr().clone());\n      }\n    }\n  }\n\n  /**\n   * =演算子のオーバーロード\n   */\n  public assignment(v: PartData): PartData {\n    this.partId = v.partId;\n\n    for (\n      const ite: iterator<PartData> = v.link.begin();\n      ite.notEqual(v.link.end());\n      ite.preIncrement()\n    ) {\n      this.link.pushBack(ite.ptr().clone());\n    }\n\n    return this;\n  }\n\n  /**\n   * 初期化\n   * @param model 初期化に使用するモデル\n   */\n  public initialize(model: CubismModel): void {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  public clone(): PartData {\n    const clonePartData: PartData = new PartData();\n\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = new csmVector<PartData>();\n\n    for (\n      let ite: iterator<PartData> = this.link.begin();\n      ite.notEqual(this.link.end());\n      ite.increment()\n    ) {\n      clonePartData.link.pushBack(ite.ptr().clone());\n    }\n\n    return clonePartData;\n  }\n\n  partId: CubismIdHandle; // パーツID\n  parameterIndex: number; // パラメータのインデックス\n  partIndex: number; // パーツのインデックス\n  link: csmVector<PartData>; // 連動するパラメータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismpose';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPose = $.CubismPose;\n  export type CubismPose = $.CubismPose;\n  export const PartData = $.PartData;\n  export type PartData = $.PartData;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmMap, iterator } from '../type/csmmap';\nimport { CubismMatrix44 } from './cubismmatrix44';\n\n/**\n * モデル座標設定用の4x4行列\n *\n * モデル座標設定用の4x4行列クラス\n */\nexport class CubismModelMatrix extends CubismMatrix44 {\n  /**\n   * コンストラクタ\n   *\n   * @param w 横幅\n   * @param h 縦幅\n   */\n  constructor(w?: number, h?: number) {\n    super();\n\n    this._width = w !== undefined ? w : 0.0;\n    this._height = h !== undefined ? h : 0.0;\n\n    this.setHeight(2.0);\n  }\n\n  /**\n   * 横幅を設定\n   *\n   * @param w 横幅\n   */\n  public setWidth(w: number): void {\n    const scaleX: number = w / this._width;\n    const scaleY: number = scaleX;\n    this.scale(scaleX, scaleY);\n  }\n\n  /**\n   * 縦幅を設定\n   * @param h 縦幅\n   */\n  public setHeight(h: number): void {\n    const scaleX: number = h / this._height;\n    const scaleY: number = scaleX;\n    this.scale(scaleX, scaleY);\n  }\n\n  /**\n   * 位置を設定\n   *\n   * @param x X軸の位置\n   * @param y Y軸の位置\n   */\n  public setPosition(x: number, y: number): void {\n    this.translate(x, y);\n  }\n\n  /**\n   * 中心位置を設定\n   *\n   * @param x X軸の中心位置\n   * @param y Y軸の中心位置\n   *\n   * @note widthかheightを設定したあとでないと、拡大率が正しく取得できないためずれる。\n   */\n  public setCenterPosition(x: number, y: number) {\n    this.centerX(x);\n    this.centerY(y);\n  }\n\n  /**\n   * 上辺の位置を設定する\n   *\n   * @param y 上辺のY軸位置\n   */\n  public top(y: number): void {\n    this.setY(y);\n  }\n\n  /**\n   * 下辺の位置を設定する\n   *\n   * @param y 下辺のY軸位置\n   */\n  public bottom(y: number) {\n    const h: number = this._height * this.getScaleY();\n\n    this.translateY(y - h);\n  }\n\n  /**\n   * 左辺の位置を設定\n   *\n   * @param x 左辺のX軸位置\n   */\n  public left(x: number): void {\n    this.setX(x);\n  }\n\n  /**\n   * 右辺の位置を設定\n   *\n   * @param x 右辺のX軸位置\n   */\n  public right(x: number): void {\n    const w = this._width * this.getScaleX();\n\n    this.translateX(x - w);\n  }\n\n  /**\n   * X軸の中心位置を設定\n   *\n   * @param x X軸の中心位置\n   */\n  public centerX(x: number): void {\n    const w = this._width * this.getScaleX();\n\n    this.translateX(x - w / 2.0);\n  }\n\n  /**\n   * X軸の位置を設定\n   *\n   * @param x X軸の位置\n   */\n  public setX(x: number): void {\n    this.translateX(x);\n  }\n\n  /**\n   * Y軸の中心位置を設定\n   *\n   * @param y Y軸の中心位置\n   */\n  public centerY(y: number): void {\n    const h: number = this._height * this.getScaleY();\n\n    this.translateY(y - h / 2.0);\n  }\n\n  /**\n   * Y軸の位置を設定する\n   *\n   * @param y Y軸の位置\n   */\n  public setY(y: number): void {\n    this.translateY(y);\n  }\n\n  /**\n   * レイアウト情報から位置を設定\n   *\n   * @param layout レイアウト情報\n   */\n  public setupFromLayout(layout: csmMap<string, number>): void {\n    const keyWidth = 'width';\n    const keyHeight = 'height';\n    const keyX = 'x';\n    const keyY = 'y';\n    const keyCenterX = 'center_x';\n    const keyCenterY = 'center_y';\n    const keyTop = 'top';\n    const keyBottom = 'bottom';\n    const keyLeft = 'left';\n    const keyRight = 'right';\n\n    for (\n      const ite: iterator<string, number> = layout.begin();\n      ite.notEqual(layout.end());\n      ite.preIncrement()\n    ) {\n      const key: string = ite.ptr().first;\n      const value: number = ite.ptr().second;\n\n      if (key == keyWidth) {\n        this.setWidth(value);\n      } else if (key == keyHeight) {\n        this.setHeight(value);\n      }\n    }\n\n    for (\n      const ite: iterator<string, number> = layout.begin();\n      ite.notEqual(layout.end());\n      ite.preIncrement()\n    ) {\n      const key: string = ite.ptr().first;\n      const value: number = ite.ptr().second;\n\n      if (key == keyX) {\n        this.setX(value);\n      } else if (key == keyY) {\n        this.setY(value);\n      } else if (key == keyCenterX) {\n        this.centerX(value);\n      } else if (key == keyCenterY) {\n        this.centerY(value);\n      } else if (key == keyTop) {\n        this.top(value);\n      } else if (key == keyBottom) {\n        this.bottom(value);\n      } else if (key == keyLeft) {\n        this.left(value);\n      } else if (key == keyRight) {\n        this.right(value);\n      }\n    }\n  }\n\n  private _width: number; // 横幅\n  private _height: number; // 縦幅\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodelmatrix';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelMatrix = $.CubismModelMatrix;\n  export type CubismModelMatrix = $.CubismModelMatrix;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/**\n * 2次元ベクトル型\n *\n * 2次元ベクトル型の機能を提供する。\n */\nexport class CubismVector2 {\n  /**\n   * コンストラクタ\n   */\n  public constructor(\n    public x?: number,\n    public y?: number\n  ) {\n    this.x = x == undefined ? 0.0 : x;\n\n    this.y = y == undefined ? 0.0 : y;\n  }\n\n  /**\n   * ベクトルの加算\n   *\n   * @param vector2 加算するベクトル値\n   * @return 加算結果 ベクトル値\n   */\n  public add(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x + vector2.x;\n    ret.y = this.y + vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの減算\n   *\n   * @param vector2 減算するベクトル値\n   * @return 減算結果 ベクトル値\n   */\n  public substract(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x - vector2.x;\n    ret.y = this.y - vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの乗算\n   *\n   * @param vector2 乗算するベクトル値\n   * @return 乗算結果 ベクトル値\n   */\n  public multiply(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x * vector2.x;\n    ret.y = this.y * vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの乗算(スカラー)\n   *\n   * @param scalar 乗算するスカラー値\n   * @return 乗算結果 ベクトル値\n   */\n  public multiplyByScaler(scalar: number): CubismVector2 {\n    return this.multiply(new CubismVector2(scalar, scalar));\n  }\n\n  /**\n   * ベクトルの除算\n   *\n   * @param vector2 除算するベクトル値\n   * @return 除算結果 ベクトル値\n   */\n  public division(vector2: CubismVector2): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0.0, 0.0);\n    ret.x = this.x / vector2.x;\n    ret.y = this.y / vector2.y;\n    return ret;\n  }\n\n  /**\n   * ベクトルの除算(スカラー)\n   *\n   * @param scalar 除算するスカラー値\n   * @return 除算結果 ベクトル値\n   */\n  public divisionByScalar(scalar: number): CubismVector2 {\n    return this.division(new CubismVector2(scalar, scalar));\n  }\n\n  /**\n   * ベクトルの長さを取得する\n   *\n   * @return ベクトルの長さ\n   */\n  public getLength(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * ベクトルの距離の取得\n   *\n   * @param a 点\n   * @return ベクトルの距離\n   */\n  public getDistanceWith(a: CubismVector2): number {\n    return Math.sqrt(\n      (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y)\n    );\n  }\n\n  /**\n   * ドット積の計算\n   *\n   * @param a 値\n   * @return 結果\n   */\n  public dot(a: CubismVector2): number {\n    return this.x * a.x + this.y * a.y;\n  }\n\n  /**\n   * 正規化の適用\n   */\n  public normalize(): void {\n    const length: number = Math.pow(this.x * this.x + this.y * this.y, 0.5);\n\n    this.x = this.x / length;\n    this.y = this.y / length;\n  }\n\n  /**\n   * 等しさの確認（等しいか？）\n   *\n   * 値が等しいか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しい\n   * @return false 値は等しくない\n   */\n  public isEqual(rhs: CubismVector2): boolean {\n    return this.x == rhs.x && this.y == rhs.y;\n  }\n\n  /**\n   * 等しさの確認（等しくないか？）\n   *\n   * 値が等しくないか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しくない\n   * @return false 値は等しい\n   */\n  public isNotEqual(rhs: CubismVector2): boolean {\n    return !this.isEqual(rhs);\n  }\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismvector2';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismVector2 = $.CubismVector2;\n  export type CubismVector2 = $.CubismVector2;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismVector2 } from './cubismvector2';\n\n/**\n * 数値計算などに使用するユーティリティクラス\n */\nexport class CubismMath {\n  static readonly Epsilon: number = 0.00001;\n\n  /**\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\n   *\n   * @param value 収められる値\n   * @param min   範囲の最小値\n   * @param max   範囲の最大値\n   * @return 最小値と最大値の範囲に収めた値\n   */\n  static range(value: number, min: number, max: number): number {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n\n    return value;\n  }\n\n  /**\n   * サイン関数の値を求める\n   *\n   * @param x 角度値（ラジアン）\n   * @return サイン関数sin(x)の値\n   */\n  static sin(x: number): number {\n    return Math.sin(x);\n  }\n\n  /**\n   * コサイン関数の値を求める\n   *\n   * @param x 角度値(ラジアン)\n   * @return コサイン関数cos(x)の値\n   */\n  static cos(x: number): number {\n    return Math.cos(x);\n  }\n\n  /**\n   * 値の絶対値を求める\n   *\n   * @param x 絶対値を求める値\n   * @return 値の絶対値\n   */\n  static abs(x: number): number {\n    return Math.abs(x);\n  }\n\n  /**\n   * 平方根(ルート)を求める\n   * @param x -> 平方根を求める値\n   * @return 値の平方根\n   */\n  static sqrt(x: number): number {\n    return Math.sqrt(x);\n  }\n\n  /**\n   * 立方根を求める\n   * @param x -> 立方根を求める値\n   * @return 値の立方根\n   */\n  static cbrt(x: number): number {\n    if (x === 0) {\n      return x;\n    }\n\n    let cx: number = x;\n    const isNegativeNumber: boolean = cx < 0;\n\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n\n    let ret: number;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n\n  /**\n   * イージング処理されたサインを求める\n   * フェードイン・アウト時のイージングに利用できる\n   *\n   * @param value イージングを行う値\n   * @return イージング処理されたサイン値\n   */\n  static getEasingSine(value: number): number {\n    if (value < 0.0) {\n      return 0.0;\n    } else if (value > 1.0) {\n      return 1.0;\n    }\n\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n\n  /**\n   * 大きい方の値を返す\n   *\n   * @param left 左辺の値\n   * @param right 右辺の値\n   * @return 大きい方の値\n   */\n  static max(left: number, right: number): number {\n    return left > right ? left : right;\n  }\n\n  /**\n   * 小さい方の値を返す\n   *\n   * @param left  左辺の値\n   * @param right 右辺の値\n   * @return 小さい方の値\n   */\n  static min(left: number, right: number): number {\n    return left > right ? right : left;\n  }\n\n  /**\n   * 角度値をラジアン値に変換する\n   *\n   * @param degrees   角度値\n   * @return 角度値から変換したラジアン値\n   */\n  static degreesToRadian(degrees: number): number {\n    return (degrees / 180.0) * Math.PI;\n  }\n\n  /**\n   * ラジアン値を角度値に変換する\n   *\n   * @param radian    ラジアン値\n   * @return ラジアン値から変換した角度値\n   */\n  static radianToDegrees(radian: number): number {\n    return (radian * 180.0) / Math.PI;\n  }\n\n  /**\n   * ２つのベクトルからラジアン値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return ラジアン値から求めた方向ベクトル\n   */\n  static directionToRadian(from: CubismVector2, to: CubismVector2): number {\n    const q1: number = Math.atan2(to.y, to.x);\n    const q2: number = Math.atan2(from.y, from.x);\n\n    let ret: number = q1 - q2;\n\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2.0;\n    }\n\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2.0;\n    }\n\n    return ret;\n  }\n\n  /**\n   * ２つのベクトルから角度値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return 角度値から求めた方向ベクトル\n   */\n  static directionToDegrees(from: CubismVector2, to: CubismVector2): number {\n    const radian: number = this.directionToRadian(from, to);\n    let degree: number = this.radianToDegrees(radian);\n\n    if (to.x - from.x > 0.0) {\n      degree = -degree;\n    }\n\n    return degree;\n  }\n\n  /**\n   * ラジアン値を方向ベクトルに変換する。\n   *\n   * @param totalAngle    ラジアン値\n   * @return ラジアン値から変換した方向ベクトル\n   */\n\n  static radianToDirection(totalAngle: number): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2();\n\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n\n    return ret;\n  }\n\n  /**\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\n   * a * x^2 + b * x + c = 0\n   *\n   * @param   a -> 二次項の係数値\n   * @param   b -> 一次項の係数値\n   * @param   c -> 定数項の値\n   * @return  二次方程式の解\n   */\n  static quadraticEquation(a: number, b: number, c: number): number {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      if (this.abs(b) < CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n\n    return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n  }\n\n  /**\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\n   * 重解になったときには0.0～1.0の値になる解を返す。\n   *\n   * a * x^3 + b * x^2 + c * x + d = 0\n   *\n   * @param   a -> 三次項の係数値\n   * @param   b -> 二次項の係数値\n   * @param   c -> 一次項の係数値\n   * @param   d -> 定数項の値\n   * @return  0.0～1.0の間にある解\n   */\n  static cardanoAlgorithmForBezier(\n    a: number,\n    b: number,\n    c: number,\n    d: number\n  ): number {\n    if (this.abs(a) < CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);\n    }\n\n    const ba: number = b / a;\n    const ca: number = c / a;\n    const da: number = d / a;\n\n    const p: number = (3.0 * ca - ba * ba) / 3.0;\n    const p3: number = p / 3.0;\n    const q: number = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;\n    const q2: number = q / 2.0;\n    const discriminant: number = q2 * q2 + p3 * p3 * p3;\n\n    const center = 0.5;\n    const threshold: number = center + 0.01;\n\n    if (discriminant < 0.0) {\n      const mp3: number = -p / 3.0;\n      const mp33: number = mp3 * mp3 * mp3;\n      const r: number = this.sqrt(mp33);\n      const t: number = -q / (2.0 * r);\n      const cosphi: number = this.range(t, -1.0, 1.0);\n      const phi: number = Math.acos(cosphi);\n      const crtr: number = this.cbrt(r);\n      const t1: number = 2.0 * crtr;\n\n      const root1: number = t1 * this.cos(phi / 3.0) - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number =\n        t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0.0, 1.0);\n      }\n\n      const root3: number =\n        t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;\n      return this.range(root3, 0.0, 1.0);\n    }\n\n    if (discriminant == 0.0) {\n      let u1: number;\n      if (q2 < 0.0) {\n        u1 = this.cbrt(-q2);\n      } else {\n        u1 = -this.cbrt(q2);\n      }\n\n      const root1: number = 2.0 * u1 - ba / 3.0;\n      if (this.abs(root1 - center) < threshold) {\n        return this.range(root1, 0.0, 1.0);\n      }\n\n      const root2: number = -u1 - ba / 3.0;\n      return this.range(root2, 0.0, 1.0);\n    }\n\n    const sd: number = this.sqrt(discriminant);\n    const u1: number = this.cbrt(sd - q2);\n    const v1: number = this.cbrt(sd + q2);\n    const root1: number = u1 - v1 - ba / 3.0;\n    return this.range(root1, 0.0, 1.0);\n  }\n\n  /**\n   * 浮動小数点の余りを求める。\n   *\n   * @param dividend 被除数（割られる値）\n   * @param divisor 除数（割る値）\n   * @returns 余り\n   */\n  static mod(dividend: number, divisor: number): number {\n    if (\n      !isFinite(dividend) ||\n      divisor === 0 ||\n      isNaN(dividend) ||\n      isNaN(divisor)\n    ) {\n      console.warn(\n        `divided: ${dividend}, divisor: ${divisor} mod() returns 'NaN'.`\n      );\n      return NaN;\n    }\n\n    // 絶対値に変換する。\n    const absDividend = Math.abs(dividend);\n    const absDivisor = Math.abs(divisor);\n\n    // 絶対値で割り算する。\n    let result =\n      absDividend - Math.floor(absDividend / absDivisor) * absDivisor;\n\n    // 符号を被除数のものに指定する。\n    result *= Math.sign(dividend);\n    return result;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  private constructor() {}\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmath';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMath = $.CubismMath;\n  export type CubismMath = $.CubismMath;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from './cubismmath';\n\nconst FrameRate = 30;\nconst Epsilon = 0.01;\n\n/**\n * 顔の向きの制御機能\n *\n * 顔の向きの制御機能を提供するクラス。\n */\nexport class CubismTargetPoint {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._faceTargetX = 0.0;\n    this._faceTargetY = 0.0;\n    this._faceX = 0.0;\n    this._faceY = 0.0;\n    this._faceVX = 0.0;\n    this._faceVY = 0.0;\n    this._lastTimeSeconds = 0.0;\n    this._userTimeSeconds = 0.0;\n  }\n\n  /**\n   * 更新処理\n   */\n  public update(deltaTimeSeconds: number): void {\n    // デルタ時間を加算する\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    // 首を中央から左右に振るときの平均的な速さは 秒速度。加速・減速を考慮して、その２倍を最高速度とする\n    // 顔の振り具合を、中央（0.0）から、左右は（+-1.0）とする\n    const faceParamMaxV: number = 40.0 / 10.0; // 7.5秒間に40分移動(5.3/sc)\n    const maxV: number = (faceParamMaxV * 1.0) / FrameRate; // 1frameあたりに変化できる速度の上限\n\n    if (this._lastTimeSeconds == 0.0) {\n      this._lastTimeSeconds = this._userTimeSeconds;\n      return;\n    }\n\n    const deltaTimeWeight: number =\n      (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\n    this._lastTimeSeconds = this._userTimeSeconds;\n\n    // 最高速度になるまでの時間を\n    const timeToMaxSpeed = 0.15;\n    const frameToMaxSpeed: number = timeToMaxSpeed * FrameRate; // sec * frame/sec\n    const maxA: number = (deltaTimeWeight * maxV) / frameToMaxSpeed; // 1frameあたりの加速度\n\n    // 目指す向きは、（dx, dy）方向のベクトルとなる\n    const dx: number = this._faceTargetX - this._faceX;\n    const dy: number = this._faceTargetY - this._faceY;\n\n    if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\n      return; // 変化なし\n    }\n\n    // 速度の最大よりも大きい場合は、速度を落とす\n    const d: number = CubismMath.sqrt(dx * dx + dy * dy);\n\n    // 進行方向の最大速度ベクトル\n    const vx: number = (maxV * dx) / d;\n    const vy: number = (maxV * dy) / d;\n\n    // 現在の速度から、新規速度への変化（加速度）を求める\n    let ax: number = vx - this._faceVX;\n    let ay: number = vy - this._faceVY;\n\n    const a: number = CubismMath.sqrt(ax * ax + ay * ay);\n\n    // 加速のとき\n    if (a < -maxA || a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n\n    // 加速度を元の速度に足して、新速度とする\n    this._faceVX += ax;\n    this._faceVY += ay;\n\n    // 目的の方向に近づいたとき、滑らかに減速するための処理\n    // 設定された加速度で止まる事の出来る距離と速度の関係から\n    // 現在とりうる最高速度を計算し、それ以上の時は速度を落とす\n    // ※本来、人間は筋力で力（加速度）を調整できるため、より自由度が高いが、簡単な処理で済ませている\n    {\n      // 加速度、速度、距離の関係式。\n      //            2  6           2               3\n      //      sqrt(a  t  + 16 a h t  - 8 a h) - a t\n      // v = --------------------------------------\n      //                    2\n      //                 4 t  - 2\n      // (t=1)\n      // \t時刻tは、あらかじめ加速度、速度を1/60(フレームレート、単位なし)で\n      // \t考えているので、t＝１として消してよい（※未検証）\n\n      const maxV: number =\n        0.5 *\n        (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\n          maxA);\n      const curV: number = CubismMath.sqrt(\n        this._faceVX * this._faceVX + this._faceVY * this._faceVY\n      );\n\n      if (curV > maxV) {\n        // 現在の速度 > 最高速度のとき、最高速度まで減速\n        this._faceVX *= maxV / curV;\n        this._faceVY *= maxV / curV;\n      }\n    }\n\n    this._faceX += this._faceVX;\n    this._faceY += this._faceVY;\n  }\n\n  /**\n   * X軸の顔の向きの値を取得\n   *\n   * @return X軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getX(): number {\n    return this._faceX;\n  }\n\n  /**\n   * Y軸の顔の向きの値を取得\n   *\n   * @return Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public getY(): number {\n    return this._faceY;\n  }\n\n  /**\n   * 顔の向きの目標値を設定\n   *\n   * @param x X軸の顔の向きの値（-1.0 ~ 1.0）\n   * @param y Y軸の顔の向きの値（-1.0 ~ 1.0）\n   */\n  public set(x: number, y: number): void {\n    this._faceTargetX = x;\n    this._faceTargetY = y;\n  }\n\n  private _faceTargetX: number; // 顔の向きのX目標値（この値に近づいていく）\n  private _faceTargetY: number; // 顔の向きのY目標値（この値に近づいていく）\n  private _faceX: number; // 顔の向きX（-1.0 ~ 1.0）\n  private _faceY: number; // 顔の向きY（-1.0 ~ 1.0）\n  private _faceVX: number; // 顔の向きの変化速度X\n  private _faceVY: number; // 顔の向きの変化速度Y\n  private _lastTimeSeconds: number; // 最後の実行時間[秒]\n  private _userTimeSeconds: number; // デルタ時間の積算値[秒]\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismtargetpoint';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismTargetPoint = $.CubismTargetPoint;\n  export type CubismTargetPoint = $.CubismTargetPoint;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT, CubismDebug } from '../utils/cubismdebug';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n/** モーション再生開始コールバック関数定義 */\nexport type BeganMotionCallback = (self: ACubismMotion) => void;\n\n/** モーション再生終了コールバック関数定義 */\nexport type FinishedMotionCallback = (self: ACubismMotion) => void;\n\n/**\n * モーションの抽象基底クラス\n *\n * モーションの抽象基底クラス。MotionQueueManagerによってモーションの再生を管理する。\n */\nexport abstract class ACubismMotion {\n  /**\n   * インスタンスの破棄\n   */\n  public static delete(motion: ACubismMotion): void {\n    motion.release();\n    motion = null;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._fadeInSeconds = -1.0;\n    this._fadeOutSeconds = -1.0;\n    this._weight = 1.0;\n    this._offsetSeconds = 0.0; // 再生の開始時刻\n    this._isLoop = false; // ループするか\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ。初期値では有効。\n    this._previousLoopState = this._isLoop;\n    this._firedEventValues = new csmVector<csmString>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._weight = 0.0;\n  }\n\n  /**\n   * モデルのパラメータ\n   * @param model 対象のモデル\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  public updateParameters(\n    model: CubismModel,\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ): void {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n\n    this.setupMotionQueueEntry(motionQueueEntry, userTimeSeconds);\n\n    const fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\n\n    //---- 全てのパラメータIDをループする ----\n    this.doUpdateParameters(\n      model,\n      userTimeSeconds,\n      fadeWeight,\n      motionQueueEntry\n    );\n\n    // 後処理\n    // 終了時刻を過ぎたら終了フラグを立てる(CubismMotionQueueManager)\n    if (\n      motionQueueEntry.getEndTime() > 0 &&\n      motionQueueEntry.getEndTime() < userTimeSeconds\n    ) {\n      motionQueueEntry.setIsFinished(true); // 終了\n    }\n  }\n\n  /**\n   * @brief モデルの再生開始処理\n   *\n   * モーションの再生を開始するためのセットアップを行う。\n   *\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\n   */\n  public setupMotionQueueEntry(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ) {\n    if (motionQueueEntry == null || motionQueueEntry.isStarted()) {\n      return;\n    }\n\n    if (!motionQueueEntry.isAvailable()) {\n      return;\n    }\n\n    motionQueueEntry.setIsStarted(true);\n    motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds); // モーションの開始時刻を記録\n    motionQueueEntry.setFadeInStartTime(userTimeSeconds); // フェードインの開始時刻\n\n    if (motionQueueEntry.getEndTime() < 0.0) {\n      // 開始していないうちに終了設定している場合がある\n      this.adjustEndTime(motionQueueEntry);\n    }\n\n    // 再生開始コールバック\n    if (motionQueueEntry._motion._onBeganMotion) {\n      motionQueueEntry._motion._onBeganMotion(motionQueueEntry._motion);\n    }\n  }\n\n  /**\n   * @brief モデルのウェイト更新\n   *\n   * モーションのウェイトを更新する。\n   *\n   * @param[in]   motionQueueEntry    CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   userTimeSeconds     デルタ時間の積算値[秒]\n   */\n  public updateFadeWeight(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number\n  ): number {\n    if (motionQueueEntry == null) {\n      CubismDebug.print(LogLevel.LogLevel_Error, 'motionQueueEntry is null.');\n    }\n\n    let fadeWeight: number = this._weight; // 現在の値と掛け合わせる割合\n\n    //---- フェードイン・アウトの処理 ----\n    // 単純なサイン関数でイージングする\n    const fadeIn: number =\n      this._fadeInSeconds == 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n              this._fadeInSeconds\n          );\n\n    const fadeOut: number =\n      this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\n              this._fadeOutSeconds\n          );\n\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n\n    CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\n\n    return fadeWeight;\n  }\n\n  /**\n   * フェードインの時間を設定する\n   * @param fadeInSeconds フェードインにかかる時間[秒]\n   */\n  public setFadeInTime(fadeInSeconds: number): void {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n\n  /**\n   * フェードアウトの時間を設定する\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  public setFadeOutTime(fadeOutSeconds: number): void {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n\n  /**\n   * フェードアウトにかかる時間の取得\n   * @return フェードアウトにかかる時間[秒]\n   */\n  public getFadeOutTime(): number {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * フェードインにかかる時間の取得\n   * @return フェードインにかかる時間[秒]\n   */\n  public getFadeInTime(): number {\n    return this._fadeInSeconds;\n  }\n\n  /**\n   * モーション適用の重みの設定\n   * @param weight 重み（0.0 - 1.0）\n   */\n  public setWeight(weight: number): void {\n    this._weight = weight;\n  }\n\n  /**\n   * モーション適用の重みの取得\n   * @return 重み（0.0 - 1.0）\n   */\n  public getWeight(): number {\n    return this._weight;\n  }\n\n  /**\n   * モーションの長さの取得\n   * @return モーションの長さ[秒]\n   *\n   * @note ループの時は「-1」。\n   *       ループでない場合は、オーバーライドする。\n   *       正の値の時は取得される時間で終了する。\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\n   */\n  public getDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーションのループ1回分の長さの取得\n   * @return モーションのループ一回分の長さ[秒]\n   *\n   * @note ループしない場合は、getDuration()と同じ値を返す\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\n   */\n  public getLoopDuration(): number {\n    return -1.0;\n  }\n\n  /**\n   * モーション再生の開始時刻の設定\n   * @param offsetSeconds モーション再生の開始時刻[秒]\n   */\n  public setOffsetTime(offsetSeconds: number): void {\n    this._offsetSeconds = offsetSeconds;\n  }\n\n  /**\n   * ループ情報の設定\n   * @param loop ループ情報\n   */\n  public setLoop(loop: boolean): void {\n    this._isLoop = loop;\n  }\n\n  /**\n   * ループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public getLoop(): boolean {\n    return this._isLoop;\n  }\n\n  /**\n   * ループ時のフェードイン情報の設定\n   * @param loopFadeIn  ループ時のフェードイン情報\n   */\n  public setLoopFadeIn(loopFadeIn: boolean) {\n    this._isLoopFadeIn = loopFadeIn;\n  }\n\n  /**\n   * ループ時のフェードイン情報の取得\n   *\n   * @return  true    する\n   * @return  false   しない\n   */\n  public getLoopFadeIn(): boolean {\n    return this._isLoopFadeIn;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds 今回の再生時間[秒]\n   */\n  public getFiredEvent(\n    beforeCheckTimeSeconds: number,\n    motionTimeSeconds: number\n  ): csmVector<csmString> {\n    return this._firedEventValues;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @return true モデルへパラメータ値の反映あり\n   * @return false モデルへのパラメータ値の反映なし（モーションの変化なし）\n   */\n  public abstract doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void;\n\n  /**\n   * モーション再生開始コールバックの登録\n   *\n   * モーション再生開始コールバックを登録する。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onBeganMotionHandler モーション再生開始コールバック関数\n   */\n  public setBeganMotionHandler = (onBeganMotionHandler: BeganMotionCallback) =>\n    (this._onBeganMotion = onBeganMotionHandler);\n\n  /**\n   * モーション再生開始コールバックの取得\n   *\n   * モーション再生開始コールバックを取得する。\n   *\n   * @return 登録されているモーション再生開始コールバック関数\n   */\n  public getBeganMotionHandler = () => this._onBeganMotion;\n\n  /**\n   * モーション再生終了コールバックの登録\n   *\n   * モーション再生終了コールバックを登録する。\n   * isFinishedフラグを設定するタイミングで呼び出される。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\n   */\n  public setFinishedMotionHandler = (\n    onFinishedMotionHandler: FinishedMotionCallback\n  ) => (this._onFinishedMotion = onFinishedMotionHandler);\n\n  /**\n   * モーション再生終了コールバックの取得\n   *\n   * モーション再生終了コールバックを取得する。\n   *\n   * @return 登録されているモーション再生終了コールバック関数\n   */\n  public getFinishedMotionHandler = () => this._onFinishedMotion;\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  public isExistModelOpacity(): boolean {\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  public getModelOpacityIndex(): number {\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のId\n   */\n  public getModelOpacityId(index: number): CubismIdHandle {\n    return null;\n  }\n\n  /**\n   * 指定時間の透明度の値を返す\n   *\n   * @returns success:モーションの現在時間におけるOpacityの値\n   *\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\n   */\n  protected getModelOpacityValue(): number {\n    return 1.0;\n  }\n\n  /**\n   * 終了時刻の調整\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  protected adjustEndTime(motionQueueEntry: CubismMotionQueueEntry) {\n    const duration = this.getDuration();\n\n    // duration == -1 の場合はループする\n    const endTime =\n      duration <= 0.0 ? -1 : motionQueueEntry.getStartTime() + duration;\n\n    motionQueueEntry.setEndTime(endTime);\n  }\n\n  public _fadeInSeconds: number; // フェードインにかかる時間[秒]\n  public _fadeOutSeconds: number; // フェードアウトにかかる時間[秒]\n  public _weight: number; // モーションの重み\n  public _offsetSeconds: number; // モーション再生の開始時間[秒]\n  public _isLoop: boolean; // ループが有効かのフラグ\n  public _isLoopFadeIn: boolean; // ループ時にフェードインが有効かどうかのフラグ\n  public _previousLoopState: boolean; // 前回の `_isLoop` の状態\n  public _firedEventValues: csmVector<csmString>;\n\n  // モーション再生開始コールバック関数\n  public _onBeganMotion?: BeganMotionCallback;\n  // モーション再生終了コールバック関数\n  public _onFinishedMotion?: FinishedMotionCallback;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './acubismmotion';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { LogLevel } from '../live2dcubismframework';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const ACubismMotion = $.ACubismMotion;\n  export type ACubismMotion = $.ACubismMotion;\n  export type BeganMotionCallback = $.BeganMotionCallback;\n  export type FinishedMotionCallback = $.FinishedMotionCallback;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector } from '../type/csmvector';\nimport { CubismJson, Value } from '../utils/cubismjson';\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\n// exp3.jsonのキーとデフォルト\nconst ExpressionKeyFadeIn = 'FadeInTime';\nconst ExpressionKeyFadeOut = 'FadeOutTime';\nconst ExpressionKeyParameters = 'Parameters';\nconst ExpressionKeyId = 'Id';\nconst ExpressionKeyValue = 'Value';\nconst ExpressionKeyBlend = 'Blend';\nconst BlendValueAdd = 'Add';\nconst BlendValueMultiply = 'Multiply';\nconst BlendValueOverwrite = 'Overwrite';\nconst DefaultFadeTime = 1.0;\n\n/**\n * 表情のモーション\n *\n * 表情のモーションクラス。\n */\nexport class CubismExpressionMotion extends ACubismMotion {\n  static readonly DefaultAdditiveValue = 0.0; // 加算適用の初期値\n  static readonly DefaultMultiplyValue = 1.0; // 乗算適用の初期値\n\n  /**\n   * インスタンスを作成する。\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(\n    buffer: ArrayBuffer,\n    size: number\n  ): CubismExpressionMotion {\n    const expression: CubismExpressionMotion = new CubismExpressionMotion();\n    expression.parse(buffer, size);\n    return expression;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  public doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    weight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void {\n    for (let i = 0; i < this._parameters.getSize(); ++i) {\n      const parameter: ExpressionParameter = this._parameters.at(i);\n\n      switch (parameter.blendType) {\n        case ExpressionBlendType.Additive: {\n          model.addParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.Multiply: {\n          model.multiplyParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case ExpressionBlendType.Overwrite: {\n          model.setParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        default:\n          // 仕様にない値を設定した時はすでに加算モードになっている\n          break;\n      }\n    }\n  }\n\n  /**\n   * @brief 表情によるモデルのパラメータの計算\n   *\n   * モデルの表情に関するパラメータを計算する。\n   *\n   * @param[in]   model                        対象のモデル\n   * @param[in]   userTimeSeconds              デルタ時間の積算値[秒]\n   * @param[in]   motionQueueEntry             CubismMotionQueueManagerで管理されているモーション\n   * @param[in]   expressionParameterValues    モデルに適用する各パラメータの値\n   * @param[in]   expressionIndex              表情のインデックス\n   * @param[in]   fadeWeight                   表情のウェイト\n   */\n  public calculateExpressionParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    motionQueueEntry: CubismMotionQueueEntry,\n    expressionParameterValues: csmVector<ExpressionParameterValue>,\n    expressionIndex: number,\n    fadeWeight: number\n  ) {\n    if (motionQueueEntry == null || expressionParameterValues == null) {\n      return;\n    }\n\n    if (!motionQueueEntry.isAvailable()) {\n      return;\n    }\n\n    // CubismExpressionMotion._fadeWeight は廃止予定です。\n    // 互換性のために処理は残りますが、実際には使用しておりません。\n    this._fadeWeight = this.updateFadeWeight(motionQueueEntry, userTimeSeconds);\n\n    // モデルに適用する値を計算\n    for (let i = 0; i < expressionParameterValues.getSize(); ++i) {\n      const expressionParameterValue = expressionParameterValues.at(i);\n\n      if (expressionParameterValue.parameterId == null) {\n        continue;\n      }\n\n      const currentParameterValue = (expressionParameterValue.overwriteValue =\n        model.getParameterValueById(expressionParameterValue.parameterId));\n\n      const expressionParameters = this.getExpressionParameters();\n      let parameterIndex = -1;\n      for (let j = 0; j < expressionParameters.getSize(); ++j) {\n        if (\n          expressionParameterValue.parameterId !=\n          expressionParameters.at(j).parameterId\n        ) {\n          continue;\n        }\n\n        parameterIndex = j;\n\n        break;\n      }\n\n      // 再生中のExpressionが参照していないパラメータは初期値を適用\n      if (parameterIndex < 0) {\n        if (expressionIndex == 0) {\n          expressionParameterValue.additiveValue =\n            CubismExpressionMotion.DefaultAdditiveValue;\n          expressionParameterValue.multiplyValue =\n            CubismExpressionMotion.DefaultMultiplyValue;\n          expressionParameterValue.overwriteValue = currentParameterValue;\n        } else {\n          expressionParameterValue.additiveValue = this.calculateValue(\n            expressionParameterValue.additiveValue,\n            CubismExpressionMotion.DefaultAdditiveValue,\n            fadeWeight\n          );\n          expressionParameterValue.multiplyValue = this.calculateValue(\n            expressionParameterValue.multiplyValue,\n            CubismExpressionMotion.DefaultMultiplyValue,\n            fadeWeight\n          );\n          expressionParameterValue.overwriteValue = this.calculateValue(\n            expressionParameterValue.overwriteValue,\n            currentParameterValue,\n            fadeWeight\n          );\n        }\n        continue;\n      }\n\n      // 値を計算\n      const value = expressionParameters.at(parameterIndex).value;\n      let newAdditiveValue, newMultiplyValue, newOverwriteValue;\n      switch (expressionParameters.at(parameterIndex).blendType) {\n        case ExpressionBlendType.Additive:\n          newAdditiveValue = value;\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          newOverwriteValue = currentParameterValue;\n          break;\n\n        case ExpressionBlendType.Multiply:\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          newMultiplyValue = value;\n          newOverwriteValue = currentParameterValue;\n          break;\n\n        case ExpressionBlendType.Overwrite:\n          newAdditiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          newMultiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          newOverwriteValue = value;\n          break;\n\n        default:\n          return;\n      }\n\n      if (expressionIndex == 0) {\n        expressionParameterValue.additiveValue = newAdditiveValue;\n        expressionParameterValue.multiplyValue = newMultiplyValue;\n        expressionParameterValue.overwriteValue = newOverwriteValue;\n      } else {\n        expressionParameterValue.additiveValue =\n          expressionParameterValue.additiveValue * (1.0 - fadeWeight) +\n          newAdditiveValue * fadeWeight;\n        expressionParameterValue.multiplyValue =\n          expressionParameterValue.multiplyValue * (1.0 - fadeWeight) +\n          newMultiplyValue * fadeWeight;\n        expressionParameterValue.overwriteValue =\n          expressionParameterValue.overwriteValue * (1.0 - fadeWeight) +\n          newOverwriteValue * fadeWeight;\n      }\n    }\n  }\n\n  /**\n   * @brief 表情が参照しているパラメータを取得\n   *\n   * 表情が参照しているパラメータを取得する\n   *\n   * @return 表情パラメータ\n   */\n  public getExpressionParameters() {\n    return this._parameters;\n  }\n\n  /**\n   * @brief 表情のフェードの値を取得\n   *\n   * 現在の表情のフェードのウェイト値を取得する\n   *\n   * @returns 表情のフェードのウェイト値\n   *\n   * @deprecated CubismExpressionMotion.fadeWeightが削除予定のため非推奨。\n   * CubismExpressionMotionManager.getFadeWeight(index: number): number を使用してください。\n   * @see CubismExpressionMotionManager#getFadeWeight(index: number)\n   */\n  public getFadeWeight() {\n    return this._fadeWeight;\n  }\n\n  protected parse(buffer: ArrayBuffer, size: number) {\n    const json: CubismJson = CubismJson.create(buffer, size);\n    if (!json) {\n      return;\n    }\n\n    const root: Value = json.getRoot();\n\n    this.setFadeInTime(\n      root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)\n    ); // フェードイン\n    this.setFadeOutTime(\n      root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)\n    ); // フェードアウト\n\n    // 各パラメータについて\n    const parameterCount = root\n      .getValueByString(ExpressionKeyParameters)\n      .getSize();\n    this._parameters.prepareCapacity(parameterCount);\n\n    for (let i = 0; i < parameterCount; ++i) {\n      const param: Value = root\n        .getValueByString(ExpressionKeyParameters)\n        .getValueByIndex(i);\n      const parameterId: CubismIdHandle = CubismFramework.getIdManager().getId(\n        param.getValueByString(ExpressionKeyId).getRawString()\n      ); // パラメータID\n\n      const value: number = param\n        .getValueByString(ExpressionKeyValue)\n        .toFloat(); // 値\n\n      // 計算方法の設定\n      let blendType: ExpressionBlendType;\n\n      if (\n        param.getValueByString(ExpressionKeyBlend).isNull() ||\n        param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd\n      ) {\n        blendType = ExpressionBlendType.Additive;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueMultiply\n      ) {\n        blendType = ExpressionBlendType.Multiply;\n      } else if (\n        param.getValueByString(ExpressionKeyBlend).getString() ==\n        BlendValueOverwrite\n      ) {\n        blendType = ExpressionBlendType.Overwrite;\n      } else {\n        // その他 仕様にない値を設定した時は加算モードにすることで復旧\n        blendType = ExpressionBlendType.Additive;\n      }\n\n      // 設定オブジェクトを作成してリストに追加する\n      const item: ExpressionParameter = new ExpressionParameter();\n\n      item.parameterId = parameterId;\n      item.blendType = blendType;\n      item.value = value;\n\n      this._parameters.pushBack(item);\n    }\n\n    CubismJson.delete(json); // JSONデータは不要になったら削除する\n  }\n\n  /**\n   * @brief ブレンド計算\n   *\n   * 入力された値でブレンド計算をする。\n   *\n   * @param source 現在の値\n   * @param destination 適用する値\n   * @param weight ウェイト\n   * @returns 計算結果\n   */\n  public calculateValue(\n    source: number,\n    destination: number,\n    fadeWeight: number\n  ): number {\n    return source * (1.0 - fadeWeight) + destination * fadeWeight;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  protected constructor() {\n    super();\n    this._parameters = new csmVector<ExpressionParameter>();\n    this._fadeWeight = 0.0;\n  }\n\n  private _parameters: csmVector<ExpressionParameter>; // 表情のパラメータ情報リスト\n\n  /**\n   * 表情の現在のウェイト\n   *\n   * @deprecated 不具合を引き起こす要因となるため非推奨。\n   */\n  private _fadeWeight: number;\n}\n\n/**\n * 表情パラメータ値の計算方式\n */\nexport enum ExpressionBlendType {\n  Additive = 0, // 加算\n  Multiply = 1, // 乗算\n  Overwrite = 2 // 上書き\n}\n\n/**\n * 表情のパラメータ情報\n */\nexport class ExpressionParameter {\n  parameterId: CubismIdHandle; // パラメータID\n  blendType: ExpressionBlendType; // パラメータの演算種類\n  value: number; // 値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotion';\nimport { ExpressionParameterValue } from './cubismexpressionmotionmanager';\nimport { CubismDefaultParameterId } from '../cubismdefaultparameterid';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismExpressionMotion = $.CubismExpressionMotion;\n  export type CubismExpressionMotion = $.CubismExpressionMotion;\n  export const ExpressionBlendType = $.ExpressionBlendType;\n  export type ExpressionBlendType = $.ExpressionBlendType;\n  export const ExpressionParameter = $.ExpressionParameter;\n  export type ExpressionParameter = $.ExpressionParameter;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntryHandle } from './cubismmotionqueuemanager';\n\n/**\n * CubismMotionQueueManagerで再生している各モーションの管理クラス。\n */\nexport class CubismMotionQueueEntry {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._autoDelete = false;\n    this._motion = null;\n    this._available = true;\n    this._finished = false;\n    this._started = false;\n    this._startTimeSeconds = -1.0;\n    this._fadeInStartTimeSeconds = 0.0;\n    this._endTimeSeconds = -1.0;\n    this._stateTimeSeconds = 0.0;\n    this._stateWeight = 0.0;\n    this._lastEventCheckSeconds = 0.0;\n    this._motionQueueEntryHandle = this;\n    this._fadeOutSeconds = 0.0;\n    this._isTriggeredFadeOut = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._autoDelete && this._motion) {\n      ACubismMotion.delete(this._motion); //\n    }\n  }\n\n  /**\n   * フェードアウト時間と開始判定の設定\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  public setFadeOut(fadeOutSeconds: number): void {\n    this._fadeOutSeconds = fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n  }\n\n  /**\n   * フェードアウトの開始\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  public startFadeOut(fadeOutSeconds: number, userTimeSeconds: number): void {\n    const newEndTimeSeconds: number = userTimeSeconds + fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n\n    if (\n      this._endTimeSeconds < 0.0 ||\n      newEndTimeSeconds < this._endTimeSeconds\n    ) {\n      this._endTimeSeconds = newEndTimeSeconds;\n    }\n  }\n\n  /**\n   * モーションの終了の確認\n   *\n   * @return true モーションが終了した\n   * @return false 終了していない\n   */\n  public isFinished(): boolean {\n    return this._finished;\n  }\n\n  /**\n   * モーションの開始の確認\n   * @return true モーションが開始した\n   * @return false 開始していない\n   */\n  public isStarted(): boolean {\n    return this._started;\n  }\n\n  /**\n   * モーションの開始時刻の取得\n   * @return モーションの開始時刻[秒]\n   */\n  public getStartTime(): number {\n    return this._startTimeSeconds;\n  }\n\n  /**\n   * フェードインの開始時刻の取得\n   * @return フェードインの開始時刻[秒]\n   */\n  public getFadeInStartTime(): number {\n    return this._fadeInStartTimeSeconds;\n  }\n\n  /**\n   * フェードインの終了時刻の取得\n   * @return フェードインの終了時刻の取得\n   */\n  public getEndTime(): number {\n    return this._endTimeSeconds;\n  }\n\n  /**\n   * モーションの開始時刻の設定\n   * @param startTime モーションの開始時刻\n   */\n  public setStartTime(startTime: number): void {\n    this._startTimeSeconds = startTime;\n  }\n\n  /**\n   * フェードインの開始時刻の設定\n   * @param startTime フェードインの開始時刻[秒]\n   */\n  public setFadeInStartTime(startTime: number): void {\n    this._fadeInStartTimeSeconds = startTime;\n  }\n\n  /**\n   * フェードインの終了時刻の設定\n   * @param endTime フェードインの終了時刻[秒]\n   */\n  public setEndTime(endTime: number): void {\n    this._endTimeSeconds = endTime;\n  }\n\n  /**\n   * モーションの終了の設定\n   * @param f trueならモーションの終了\n   */\n  public setIsFinished(f: boolean): void {\n    this._finished = f;\n  }\n\n  /**\n   * モーション開始の設定\n   * @param f trueならモーションの開始\n   */\n  public setIsStarted(f: boolean): void {\n    this._started = f;\n  }\n\n  /**\n   * モーションの有効性の確認\n   * @return true モーションは有効\n   * @return false モーションは無効\n   */\n  public isAvailable(): boolean {\n    return this._available;\n  }\n\n  /**\n   * モーションの有効性の設定\n   * @param v trueならモーションは有効\n   */\n  public setIsAvailable(v: boolean): void {\n    this._available = v;\n  }\n\n  /**\n   * モーションの状態の設定\n   * @param timeSeconds 現在時刻[秒]\n   * @param weight モーション尾重み\n   */\n  public setState(timeSeconds: number, weight: number): void {\n    this._stateTimeSeconds = timeSeconds;\n    this._stateWeight = weight;\n  }\n\n  /**\n   * モーションの現在時刻の取得\n   * @return モーションの現在時刻[秒]\n   */\n  public getStateTime(): number {\n    return this._stateTimeSeconds;\n  }\n\n  /**\n   * モーションの重みの取得\n   * @return モーションの重み\n   */\n  public getStateWeight(): number {\n    return this._stateWeight;\n  }\n\n  /**\n   * 最後にイベントの発火をチェックした時間を取得\n   *\n   * @return 最後にイベントの発火をチェックした時間[秒]\n   */\n  public getLastCheckEventSeconds(): number {\n    return this._lastEventCheckSeconds;\n  }\n\n  /**\n   * 最後にイベントをチェックした時間を設定\n   * @param checkSeconds 最後にイベントをチェックした時間[秒]\n   */\n  public setLastCheckEventSeconds(checkSeconds: number): void {\n    this._lastEventCheckSeconds = checkSeconds;\n  }\n\n  /**\n   * フェードアウト開始判定の取得\n   * @return フェードアウト開始するかどうか\n   */\n  public isTriggeredFadeOut(): boolean {\n    return this._isTriggeredFadeOut;\n  }\n\n  /**\n   * フェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  public getFadeOutSeconds(): number {\n    return this._fadeOutSeconds;\n  }\n\n  /**\n   * モーションの取得\n   *\n   * @return モーション\n   */\n  public getCubismMotion(): ACubismMotion {\n    return this._motion;\n  }\n\n  _autoDelete: boolean; // 自動削除\n  _motion: ACubismMotion; // モーション\n\n  _available: boolean; // 有効化フラグ\n  _finished: boolean; // 終了フラグ\n  _started: boolean; // 開始フラグ\n  _startTimeSeconds: number; // モーション再生開始時刻[秒]\n  _fadeInStartTimeSeconds: number; // フェードイン開始時刻（ループの時は初回のみ）[秒]\n  _endTimeSeconds: number; // 終了予定時刻[秒]\n  _stateTimeSeconds: number; // 時刻の状態[秒]\n  _stateWeight: number; // 重みの状態\n  _lastEventCheckSeconds: number; // 最終のMotion側のチェックした時間\n  private _fadeOutSeconds: number; // フェードアウト時間[秒]\n  private _isTriggeredFadeOut: boolean; // フェードアウト開始フラグ\n\n  _motionQueueEntryHandle: CubismMotionQueueEntryHandle; // インスタンスごとに一意の値を持つ識別番号\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionqueueentry';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionQueueEntry = $.CubismMotionQueueEntry;\n  export type CubismMotionQueueEntry = $.CubismMotionQueueEntry;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\n\n/**\n * モーション再生の管理\n *\n * モーション再生の管理用クラス。CubismMotionモーションなどACubismMotionのサブクラスを再生するために使用する。\n *\n * @note 再生中に別のモーションが StartMotion()された場合は、新しいモーションに滑らかに変化し旧モーションは中断する。\n *       表情用モーション、体用モーションなどを分けてモーション化した場合など、\n *       複数のモーションを同時に再生させる場合は、複数のCubismMotionQueueManagerインスタンスを使用する。\n */\nexport class CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._userTimeSeconds = 0.0;\n    this._eventCallBack = null;\n    this._eventCustomData = null;\n    this._motions = new csmVector<CubismMotionQueueEntry>();\n  }\n\n  /**\n   * デストラクタ\n   */\n  public release(): void {\n    for (let i = 0; i < this._motions.getSize(); ++i) {\n      if (this._motions.at(i)) {\n        this._motions.at(i).release();\n        this._motions.set(i, null);\n      }\n    }\n\n    this._motions = null;\n  }\n\n  /**\n   * 指定したモーションの開始\n   *\n   * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。\n   *\n   * @param   motion          開始するモーション\n   * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true\n   * @param   userTimeSeconds Deprecated: デルタ時間の積算値[秒] 関数内で参照していないため使用は非推奨。\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotion(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    userTimeSeconds?: number\n  ): CubismMotionQueueEntryHandle {\n    if (motion == null) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    let motionQueueEntry: CubismMotionQueueEntry = null;\n\n    // 既にモーションがあれば終了フラグを立てる\n    for (let i = 0; i < this._motions.getSize(); ++i) {\n      motionQueueEntry = this._motions.at(i);\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime()); // フェードアウト設定\n    }\n\n    motionQueueEntry = new CubismMotionQueueEntry(); // 終了時に破棄する\n    motionQueueEntry._autoDelete = autoDelete;\n    motionQueueEntry._motion = motion;\n\n    this._motions.pushBack(motionQueueEntry);\n\n    return motionQueueEntry._motionQueueEntryHandle;\n  }\n\n  /**\n   * 全てのモーションの終了の確認\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  public isFinished(): boolean {\n    // ------- 処理を行う -------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      const motion: ACubismMotion = motionQueueEntry._motion;\n\n      if (motion == null) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      // ----- 終了済みの処理があれば削除する ------\n      if (!motionQueueEntry.isFinished()) {\n        return false;\n      } else {\n        ite.preIncrement();\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * 指定したモーションの終了の確認\n   * @param motionQueueEntryNumber モーションの識別番号\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  public isFinishedByHandle(\n    motionQueueEntryNumber: CubismMotionQueueEntryHandle\n  ): boolean {\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n      ite.increment()\n    ) {\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      if (\n        motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\n        !motionQueueEntry.isFinished()\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * 全てのモーションを停止する\n   */\n  public stopAllMotions(): void {\n    // ------- 処理を行う -------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite);\n\n        continue;\n      }\n\n      // ----- 終了済みの処理があれば削除する ------\n      motionQueueEntry.release();\n      motionQueueEntry = null;\n      ite = this._motions.erase(ite); // 削除\n    }\n  }\n\n  /**\n   * @brief CubismMotionQueueEntryの配列の取得\n   *\n   * CubismMotionQueueEntryの配列を取得する。\n   *\n   * @return  CubismMotionQueueEntryの配列へのポインタ\n   * @retval  NULL   見つからなかった\n   */\n  public getCubismMotionQueueEntries(): csmVector<CubismMotionQueueEntry> {\n    return this._motions;\n  }\n\n  /**\n   * 指定したCubismMotionQueueEntryの取得\n\n   * @param   motionQueueEntryNumber  モーションの識別番号\n   * @return  指定したCubismMotionQueueEntry\n   * @return  null   見つからなかった\n   */\n  public getCubismMotionQueueEntry(\n    motionQueueEntryNumber: any\n  ): CubismMotionQueueEntry {\n    //------- 処理を行う -------\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n      ite.preIncrement()\n    ) {\n      const motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        continue;\n      }\n\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\n        return motionQueueEntry;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * イベントを受け取るCallbackの登録\n   *\n   * @param callback コールバック関数\n   * @param customData コールバックに返されるデータ\n   */\n  public setEventCallback(\n    callback: CubismMotionEventFunction,\n    customData: any = null\n  ): void {\n    this._eventCallBack = callback;\n    this._eventCustomData = customData;\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param   model   対象のモデル\n   * @param   userTimeSeconds   デルタ時間の積算値[秒]\n   * @return  true    モデルへパラメータ値の反映あり\n   * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\n   */\n  public doUpdateMotion(model: CubismModel, userTimeSeconds: number): boolean {\n    let updated = false;\n\n    // ------- 処理を行う --------\n    // 既にモーションがあれば終了フラグを立てる\n\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      let motionQueueEntry: CubismMotionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = this._motions.erase(ite); // 削除\n        continue;\n      }\n\n      const motion: ACubismMotion = motionQueueEntry._motion;\n\n      if (motion == null) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n\n        continue;\n      }\n\n      // ------ 値を反映する ------\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n      updated = true;\n\n      // ------ ユーザトリガーイベントを検査する ----\n      const firedList: csmVector<csmString> = motion.getFiredEvent(\n        motionQueueEntry.getLastCheckEventSeconds() -\n          motionQueueEntry.getStartTime(),\n        userTimeSeconds - motionQueueEntry.getStartTime()\n      );\n\n      for (let i = 0; i < firedList.getSize(); ++i) {\n        this._eventCallBack(this, firedList.at(i), this._eventCustomData);\n      }\n\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\n\n      // ------ 終了済みの処理があれば削除する ------\n      if (motionQueueEntry.isFinished()) {\n        motionQueueEntry.release();\n        motionQueueEntry = null;\n        ite = this._motions.erase(ite); // 削除\n      } else {\n        if (motionQueueEntry.isTriggeredFadeOut()) {\n          motionQueueEntry.startFadeOut(\n            motionQueueEntry.getFadeOutSeconds(),\n            userTimeSeconds\n          );\n        }\n        ite.preIncrement();\n      }\n    }\n\n    return updated;\n  }\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _motions: csmVector<CubismMotionQueueEntry>; // モーション\n  _eventCallBack: CubismMotionEventFunction; // コールバック関数\n  _eventCustomData: any; // コールバックに戻されるデータ\n}\n\n/**\n * イベントのコールバック関数を定義\n *\n * イベントのコールバックに登録できる関数の型情報\n * @param caller        発火したイベントを再生させたCubismMotionQueueManager\n * @param eventValue    発火したイベントの文字列データ\n * @param customData   コールバックに返される登録時に指定されたデータ\n */\nexport interface CubismMotionEventFunction {\n  (\n    caller: CubismMotionQueueManager,\n    eventValue: csmString,\n    customData: any\n  ): void;\n}\n\n/**\n * モーションの識別番号\n *\n * モーションの識別番号の定義\n */\nexport declare type CubismMotionQueueEntryHandle = any;\nexport const InvalidMotionQueueEntryHandleValue: CubismMotionQueueEntryHandle =\n  -1;\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionqueuemanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionQueueManager = $.CubismMotionQueueManager;\n  export type CubismMotionQueueManager = $.CubismMotionQueueManager;\n  export const InvalidMotionQueueEntryHandleValue =\n    $.InvalidMotionQueueEntryHandleValue;\n  export type CubismMotionQueueEntryHandle = $.CubismMotionQueueEntryHandle;\n  export type CubismMotionEventFunction = $.CubismMotionEventFunction;\n}\n","import { CubismId, CubismIdHandle } from '../id/cubismid';\nimport { LogLevel, csmDelete } from '../live2dcubismframework';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmVector, iterator } from '../type/csmvector';\nimport { ACubismMotion } from './acubismmotion';\nimport { CubismExpressionMotion } from './cubismexpressionmotion';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\nimport {\n  CubismMotionQueueEntryHandle,\n  CubismMotionQueueManager\n} from './cubismmotionqueuemanager';\nimport { CubismLogInfo } from '../utils/cubismdebug';\n\n/**\n * @brief パラメータに適用する表情の値を持たせる構造体\n */\nexport class ExpressionParameterValue {\n  parameterId: CubismIdHandle; // パラメーターID\n  additiveValue: number; // 加算値\n  multiplyValue: number; // 乗算値\n  overwriteValue: number; // 上書き値\n}\n\n/**\n * @brief 表情モーションの管理\n *\n * 表情モーションの管理をおこなうクラス。\n */\nexport class CubismExpressionMotionManager extends CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._currentPriority = 0;\n    this._reservePriority = 0;\n    this._expressionParameterValues = new csmVector<ExpressionParameterValue>();\n    this._fadeWeights = new csmVector<number>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._expressionParameterValues) {\n      csmDelete(this._expressionParameterValues);\n      this._expressionParameterValues = null;\n    }\n\n    if (this._fadeWeights) {\n      csmDelete(this._fadeWeights);\n      this._fadeWeights = null;\n    }\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 再生中のモーションの優先度の取得\n   *\n   * 再生中のモーションの優先度を取得する。\n   *\n   * @returns モーションの優先度\n   */\n  public getCurrentPriority(): number {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.getCurrentPriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    return this._currentPriority;\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 予約中のモーションの優先度の取得\n   *\n   * 予約中のモーションの優先度を取得する。\n   *\n   * @return  モーションの優先度\n   */\n  public getReservePriority(): number {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.getReservePriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    return this._reservePriority;\n  }\n\n  /**\n   * @brief 再生中のモーションのウェイトを取得する。\n   *\n   * @param[in]    index    表情のインデックス\n   * @returns               表情モーションのウェイト\n   */\n  public getFadeWeight(index: number): number {\n    if (\n      index < 0 ||\n      this._fadeWeights.getSize() < 1 ||\n      index >= this._fadeWeights.getSize()\n    ) {\n      console.warn(\n        'Failed to get the fade weight value. The element at that index does not exist.'\n      );\n      return -1;\n    }\n\n    return this._fadeWeights.at(index);\n  }\n\n  /**\n   * @brief モーションのウェイトの設定。\n   *\n   * @param[in]    index    表情のインデックス\n   * @param[in]    index    表情モーションのウェイト\n   */\n  public setFadeWeight(index: number, expressionFadeWeight: number): void {\n    if (\n      index < 0 ||\n      this._fadeWeights.getSize() < 1 ||\n      this._fadeWeights.getSize() <= index\n    ) {\n      console.warn(\n        'Failed to set the fade weight value. The element at that index does not exist.'\n      );\n      return;\n    }\n\n    this._fadeWeights.set(index, expressionFadeWeight);\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   *\n   * @brief 予約中のモーションの優先度の設定\n   *\n   * 予約中のモーションの優先度を設定する。\n   *\n   * @param[in]   priority     優先度\n   */\n  public setReservePriority(priority: number) {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.setReservePriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    this._reservePriority = priority;\n  }\n\n  /**\n   * @deprecated\n   * ExpressionではPriorityを使用していないため、この関数は非推奨となりました。\n   * CubismExpressionMotionManager.startMotion() を使用してください。\n   *\n   * @brief 優先度を設定してモーションの開始\n   *\n   * 優先度を設定してモーションを開始する。\n   *\n   * @param[in]   motion          モーション\n   * @param[in]   autoDelete      再生が終了したモーションのインスタンスを削除するならtrue\n   * @param[in]   priority        優先度\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotionPriority(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    priority: number\n  ): CubismMotionQueueEntryHandle {\n    CubismLogInfo(\n      'CubismExpressionMotionManager.startMotionPriority() is deprecated because a priority value is not actually used during expression motion playback.'\n    );\n    if (priority == this.getReservePriority()) {\n      this.setReservePriority(0);\n    }\n    this._currentPriority = priority;\n\n    return this.startMotion(motion, autoDelete);\n  }\n\n  /**\n   * @brief モーションの更新\n   *\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param[in]   model   対象のモデル\n   * @param[in]   deltaTimeSeconds    デルタ時間[秒]\n   * @retval  true    更新されている\n   * @retval  false   更新されていない\n   */\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let updated = false;\n    const motions = this.getCubismMotionQueueEntries();\n\n    let expressionWeight = 0.0;\n    let expressionIndex = 0;\n\n    if (this._fadeWeights.getSize() !== motions.getSize()) {\n      const difference = motions.getSize() - this._fadeWeights.getSize();\n      for (let i = 0; i < difference; i++) {\n        this._fadeWeights.pushBack(0.0);\n      }\n    }\n\n    // ------- 処理を行う --------\n    // 既にモーションがあれば終了フラグを立てる\n    for (\n      let ite: iterator<CubismMotionQueueEntry> = this._motions.begin();\n      ite.notEqual(this._motions.end());\n\n    ) {\n      const motionQueueEntry = ite.ptr();\n\n      if (motionQueueEntry == null) {\n        ite = motions.erase(ite); //削除\n        continue;\n      }\n\n      const expressionMotion = <CubismExpressionMotion>(\n        motionQueueEntry.getCubismMotion()\n      );\n\n      if (expressionMotion == null) {\n        csmDelete(motionQueueEntry);\n        ite = motions.erase(ite); //削除\n        continue;\n      }\n\n      const expressionParameters = expressionMotion.getExpressionParameters();\n\n      if (motionQueueEntry.isAvailable()) {\n        // 再生中のExpressionが参照しているパラメータをすべてリストアップ\n        for (let i = 0; i < expressionParameters.getSize(); ++i) {\n          if (expressionParameters.at(i).parameterId == null) {\n            continue;\n          }\n\n          let index = -1;\n          // リストにパラメータIDが存在するか検索\n          for (let j = 0; j < this._expressionParameterValues.getSize(); ++j) {\n            if (\n              this._expressionParameterValues.at(j).parameterId !=\n              expressionParameters.at(i).parameterId\n            ) {\n              continue;\n            }\n\n            index = j;\n            break;\n          }\n\n          if (index >= 0) {\n            continue;\n          }\n\n          // パラメータがリストに存在しないなら新規追加\n          const item: ExpressionParameterValue = new ExpressionParameterValue();\n          item.parameterId = expressionParameters.at(i).parameterId;\n          item.additiveValue = CubismExpressionMotion.DefaultAdditiveValue;\n          item.multiplyValue = CubismExpressionMotion.DefaultMultiplyValue;\n          item.overwriteValue = model.getParameterValueById(item.parameterId);\n          this._expressionParameterValues.pushBack(item);\n        }\n      }\n\n      // ------ 値を計算する ------\n      expressionMotion.setupMotionQueueEntry(\n        motionQueueEntry,\n        this._userTimeSeconds\n      );\n      this.setFadeWeight(\n        expressionIndex,\n        expressionMotion.updateFadeWeight(\n          motionQueueEntry,\n          this._userTimeSeconds\n        )\n      );\n      expressionMotion.calculateExpressionParameters(\n        model,\n        this._userTimeSeconds,\n        motionQueueEntry,\n        this._expressionParameterValues,\n        expressionIndex,\n        this.getFadeWeight(expressionIndex)\n      );\n\n      expressionWeight +=\n        expressionMotion.getFadeInTime() == 0.0\n          ? 1.0\n          : CubismMath.getEasingSine(\n              (this._userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                expressionMotion.getFadeInTime()\n            );\n\n      updated = true;\n\n      if (motionQueueEntry.isTriggeredFadeOut()) {\n        // フェードアウト開始\n        motionQueueEntry.startFadeOut(\n          motionQueueEntry.getFadeOutSeconds(),\n          this._userTimeSeconds\n        );\n      }\n\n      ite.preIncrement();\n      ++expressionIndex;\n    }\n\n    // ----- 最新のExpressionのフェードが完了していればそれ以前を削除する ------\n    if (motions.getSize() > 1) {\n      const latestFadeWeight: number = this.getFadeWeight(\n        this._fadeWeights.getSize() - 1\n      );\n      if (latestFadeWeight >= 1.0) {\n        // 配列の最後の要素は削除しない\n        for (let i = motions.getSize() - 2; i >= 0; --i) {\n          const motionQueueEntry = motions.at(i);\n          csmDelete(motionQueueEntry);\n          motions.remove(i);\n          this._fadeWeights.remove(i);\n        }\n      }\n    }\n\n    if (expressionWeight > 1.0) {\n      expressionWeight = 1.0;\n    }\n\n    // モデルに各値を適用\n    for (let i = 0; i < this._expressionParameterValues.getSize(); ++i) {\n      const expressionParameterValue = this._expressionParameterValues.at(i);\n      model.setParameterValueById(\n        expressionParameterValue.parameterId,\n        (expressionParameterValue.overwriteValue +\n          expressionParameterValue.additiveValue) *\n          expressionParameterValue.multiplyValue,\n        expressionWeight\n      );\n\n      expressionParameterValue.additiveValue =\n        CubismExpressionMotion.DefaultAdditiveValue;\n      expressionParameterValue.multiplyValue =\n        CubismExpressionMotion.DefaultMultiplyValue;\n    }\n\n    return updated;\n  }\n\n  private _expressionParameterValues: csmVector<ExpressionParameterValue>; ///< モデルに適用する各パラメータの値\n  private _fadeWeights: csmVector<number>; ///< 再生中の表情のウェイト\n  private _currentPriority: number; ///< @deprecated 現在再生中のモーションの優先度。Expressionでは使用しないため非推奨。\n  private _reservePriority: number; ///< @deprecated 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。Expressionでは使用しないため非推奨。\n  private _startExpressionTime: number; ///< 表情の再生開始時刻\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismexpressionmotionmanager';\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismDebug, CubismLogError } from '../utils/cubismdebug';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismExpressionMotionManager = $.CubismExpressionMotionManager;\n  export type CubismExpressionMotionManager = $.CubismExpressionMotionManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * @brief モーションカーブの種類\n *\n * モーションカーブの種類。\n */\nexport enum CubismMotionCurveTarget {\n  CubismMotionCurveTarget_Model, // モデルに対して\n  CubismMotionCurveTarget_Parameter, // パラメータに対して\n  CubismMotionCurveTarget_PartOpacity // パーツの不透明度に対して\n}\n\n/**\n * @brief モーションカーブのセグメントの種類\n *\n * モーションカーブのセグメントの種類。\n */\nexport enum CubismMotionSegmentType {\n  CubismMotionSegmentType_Linear = 0, // リニア\n  CubismMotionSegmentType_Bezier = 1, // ベジェ曲線\n  CubismMotionSegmentType_Stepped = 2, // ステップ\n  CubismMotionSegmentType_InverseStepped = 3 // インバースステップ\n}\n\n/**\n * @brief モーションカーブの制御点\n *\n * モーションカーブの制御点。\n */\nexport class CubismMotionPoint {\n  time = 0.0; // 時間[秒]\n  value = 0.0; // 値\n}\n\n/**\n * モーションカーブのセグメントの評価関数\n *\n * @param   points      モーションカーブの制御点リスト\n * @param   time        評価する時間[秒]\n */\nexport interface csmMotionSegmentEvaluationFunction {\n  (points: CubismMotionPoint[], time: number): number;\n}\n\n/**\n * @brief モーションカーブのセグメント\n *\n * モーションカーブのセグメント。\n */\nexport class CubismMotionSegment {\n  /**\n   * @brief コンストラクタ\n   *\n   * コンストラクタ。\n   */\n  public constructor() {\n    this.evaluate = null;\n    this.basePointIndex = 0;\n    this.segmentType = 0;\n  }\n\n  evaluate: csmMotionSegmentEvaluationFunction; // 使用する評価関数\n  basePointIndex: number; // 最初のセグメントへのインデックス\n  segmentType: number; // セグメントの種類\n}\n\n/**\n * @brief モーションカーブ\n *\n * モーションカーブ。\n */\nexport class CubismMotionCurve {\n  public constructor() {\n    this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n    this.segmentCount = 0;\n    this.baseSegmentIndex = 0;\n    this.fadeInTime = 0.0;\n    this.fadeOutTime = 0.0;\n  }\n\n  type: CubismMotionCurveTarget; // カーブの種類\n  id: CubismIdHandle; // カーブのID\n  segmentCount: number; // セグメントの個数\n  baseSegmentIndex: number; // 最初のセグメントのインデックス\n  fadeInTime: number; // フェードインにかかる時間[秒]\n  fadeOutTime: number; // フェードアウトにかかる時間[秒]\n}\n\n/**\n * イベント。\n */\nexport class CubismMotionEvent {\n  fireTime = 0.0;\n  value: csmString;\n}\n\n/**\n * @brief モーションデータ\n *\n * モーションデータ。\n */\nexport class CubismMotionData {\n  public constructor() {\n    this.duration = 0.0;\n    this.loop = false;\n    this.curveCount = 0;\n    this.eventCount = 0;\n    this.fps = 0.0;\n\n    this.curves = new csmVector<CubismMotionCurve>();\n    this.segments = new csmVector<CubismMotionSegment>();\n    this.points = new csmVector<CubismMotionPoint>();\n    this.events = new csmVector<CubismMotionEvent>();\n  }\n\n  duration: number; // モーションの長さ[秒]\n  loop: boolean; // ループするかどうか\n  curveCount: number; // カーブの個数\n  eventCount: number; // UserDataの個数\n  fps: number; // フレームレート\n  curves: csmVector<CubismMotionCurve>; // カーブのリスト\n  segments: csmVector<CubismMotionSegment>; // セグメントのリスト\n  points: csmVector<CubismMotionPoint>; // ポイントのリスト\n  events: csmVector<CubismMotionEvent>; // イベントのリスト\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotioninternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionCurve = $.CubismMotionCurve;\n  export type CubismMotionCurve = $.CubismMotionCurve;\n  export const CubismMotionCurveTarget = $.CubismMotionCurveTarget;\n  export type CubismMotionCurveTarget = $.CubismMotionCurveTarget;\n  export const CubismMotionData = $.CubismMotionData;\n  export type CubismMotionData = $.CubismMotionData;\n  export const CubismMotionEvent = $.CubismMotionEvent;\n  export type CubismMotionEvent = $.CubismMotionEvent;\n  export const CubismMotionPoint = $.CubismMotionPoint;\n  export type CubismMotionPoint = $.CubismMotionPoint;\n  export const CubismMotionSegment = $.CubismMotionSegment;\n  export type CubismMotionSegment = $.CubismMotionSegment;\n  export const CubismMotionSegmentType = $.CubismMotionSegmentType;\n  export type CubismMotionSegmentType = $.CubismMotionSegmentType;\n  export type csmMotionSegmentEvaluationFunction =\n    $.csmMotionSegmentEvaluationFunction;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { CSM_ASSERT, CubismLogWarning } from '../utils/cubismdebug';\nimport { CubismJson, JsonMap } from '../utils/cubismjson';\nimport { CubismMotionSegmentType } from './cubismmotioninternal';\n\n// JSON keys\nconst Meta = 'Meta';\nconst Duration = 'Duration';\nconst Loop = 'Loop';\nconst AreBeziersRestricted = 'AreBeziersRestricted';\nconst CurveCount = 'CurveCount';\nconst Fps = 'Fps';\nconst TotalSegmentCount = 'TotalSegmentCount';\nconst TotalPointCount = 'TotalPointCount';\nconst Curves = 'Curves';\nconst Target = 'Target';\nconst Id = 'Id';\nconst FadeInTime = 'FadeInTime';\nconst FadeOutTime = 'FadeOutTime';\nconst Segments = 'Segments';\nconst UserData = 'UserData';\nconst UserDataCount = 'UserDataCount';\nconst TotalUserDataSize = 'TotalUserDataSize';\nconst Time = 'Time';\nconst Value = 'Value';\n\n/**\n * motion3.jsonのコンテナ。\n */\nexport class CubismMotionJson {\n  /**\n   * コンストラクタ\n   * @param buffer motion3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * モーションの長さを取得する\n   * @return モーションの長さ[秒]\n   */\n  public getMotionDuration(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Duration)\n      .toFloat();\n  }\n\n  /**\n   * モーションのループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public isMotionLoop(): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Loop)\n      .toBoolean();\n  }\n\n  /**\n   *  motion3.jsonファイルの整合性チェック\n   *\n   * @return 正常なファイルの場合はtrueを返す。\n   */\n  hasConsistency(): boolean {\n    let result = true;\n\n    if (!this._json || !this._json.getRoot()) {\n      return false;\n    }\n\n    const actualCurveListSize = this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getVector()\n      .getSize();\n    let actualTotalSegmentCount = 0;\n    let actualTotalPointCount = 0;\n\n    // カウント処理\n    for (\n      let curvePosition = 0;\n      curvePosition < actualCurveListSize;\n      ++curvePosition\n    ) {\n      for (\n        let segmentPosition = 0;\n        segmentPosition < this.getMotionCurveSegmentCount(curvePosition);\n\n      ) {\n        if (segmentPosition == 0) {\n          actualTotalPointCount += 1;\n          segmentPosition += 2;\n        }\n\n        const segment = this.getMotionCurveSegment(\n          curvePosition,\n          segmentPosition\n        ) as CubismMotionSegmentType;\n\n        switch (segment) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:\n            actualTotalPointCount += 3;\n            segmentPosition += 7;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:\n            actualTotalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          default:\n            CSM_ASSERT(0);\n            break;\n        }\n\n        ++actualTotalSegmentCount;\n      }\n    }\n\n    // 個数チェック\n    if (actualCurveListSize != this.getMotionCurveCount()) {\n      CubismLogWarning('The number of curves does not match the metadata.');\n      result = false;\n    }\n    if (actualTotalSegmentCount != this.getMotionTotalSegmentCount()) {\n      CubismLogWarning('The number of segment does not match the metadata.');\n      result = false;\n    }\n    if (actualTotalPointCount != this.getMotionTotalPointCount()) {\n      CubismLogWarning('The number of point does not match the metadata.');\n      result = false;\n    }\n\n    return result;\n  }\n\n  public getEvaluationOptionFlag(flagType: EvaluationOptionFlag): boolean {\n    if (\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType\n    ) {\n      return this._json\n        .getRoot()\n        .getValueByString(Meta)\n        .getValueByString(AreBeziersRestricted)\n        .toBoolean();\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションカーブの個数の取得\n   * @return モーションカーブの個数\n   */\n  public getMotionCurveCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(CurveCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのフレームレートの取得\n   * @return フレームレート[FPS]\n   */\n  public getMotionFps(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Fps)\n      .toFloat();\n  }\n\n  /**\n   * モーションのセグメントの総合計の取得\n   * @return モーションのセグメントの取得\n   */\n  public getMotionTotalSegmentCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalSegmentCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのカーブの制御店の総合計の取得\n   * @return モーションのカーブの制御点の総合計\n   */\n  public getMotionTotalPointCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalPointCount)\n      .toInt();\n  }\n\n  /**\n   * モーションのフェードイン時間の存在\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionFadeInTime(): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeInTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのフェードアウト時間の存在\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionFadeOutTime(): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeOutTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのフェードイン時間の取得\n   * @return フェードイン時間[秒]\n   */\n  public getMotionFadeInTime(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのフェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  public getMotionFadeOutTime(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(FadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブの種類の取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブの種類\n   */\n  public getMotionCurveTarget(curveIndex: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Target)\n      .getRawString();\n  }\n\n  /**\n   * モーションのカーブのIDの取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブのID\n   */\n  public getMotionCurveId(curveIndex: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(Curves)\n        .getValueByIndex(curveIndex)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * モーションのカーブのフェードイン時間の存在\n   * @param curveIndex カーブのインデックス\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionCurveFadeInTime(curveIndex: number): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeInTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのカーブのフェードアウト時間の存在\n   * @param curveIndex カーブのインデックス\n   * @return true 存在する\n   * @return false 存在しない\n   */\n  public isExistMotionCurveFadeOutTime(curveIndex: number): boolean {\n    return !this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeOutTime)\n      .isNull();\n  }\n\n  /**\n   * モーションのカーブのフェードイン時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードイン時間[秒]\n   */\n  public getMotionCurveFadeInTime(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeInTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブのフェードアウト時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードアウト時間[秒]\n   */\n  public getMotionCurveFadeOutTime(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(FadeOutTime)\n      .toFloat();\n  }\n\n  /**\n   * モーションのカーブのセグメントの個数を取得する\n   * @param curveIndex カーブのインデックス\n   * @return モーションのカーブのセグメントの個数\n   */\n  public getMotionCurveSegmentCount(curveIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Segments)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * モーションのカーブのセグメントの値の取得\n   * @param curveIndex カーブのインデックス\n   * @param segmentIndex セグメントのインデックス\n   * @return セグメントの値\n   */\n  public getMotionCurveSegment(\n    curveIndex: number,\n    segmentIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Curves)\n      .getValueByIndex(curveIndex)\n      .getValueByString(Segments)\n      .getValueByIndex(segmentIndex)\n      .toFloat();\n  }\n\n  /**\n   * イベントの個数の取得\n   * @return イベントの個数\n   */\n  public getEventCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(UserDataCount)\n      .toInt();\n  }\n\n  /**\n   *  イベントの総文字数の取得\n   * @return イベントの総文字数\n   */\n  public getTotalEventValueSize(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalUserDataSize)\n      .toInt();\n  }\n\n  /**\n   * イベントの時間の取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの時間[秒]\n   */\n  public getEventTime(userDataIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(userDataIndex)\n      .getValueByString(Time)\n      .toFloat();\n  }\n\n  /**\n   * イベントの取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの文字列\n   */\n  public getEventValue(userDataIndex: number): csmString {\n    return new csmString(\n      this._json\n        .getRoot()\n        .getValueByString(UserData)\n        .getValueByIndex(userDataIndex)\n        .getValueByString(Value)\n        .getRawString()\n    );\n  }\n\n  _json: CubismJson; // motion3.jsonのデータ\n}\n\n/**\n * @brief ベジェカーブの解釈方法のフラグタイプ\n */\nexport enum EvaluationOptionFlag {\n  EvaluationOptionFlag_AreBeziersRistricted = 0 ///< ベジェハンドルの規制状態\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionJson = $.CubismMotionJson;\n  export type CubismMotionJson = $.CubismMotionJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport {\n  CSM_ASSERT,\n  CubismLogDebug,\n  CubismLogWarning\n} from '../utils/cubismdebug';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from './acubismmotion';\nimport {\n  CubismMotionCurve,\n  CubismMotionCurveTarget,\n  CubismMotionData,\n  CubismMotionEvent,\n  CubismMotionPoint,\n  CubismMotionSegment,\n  CubismMotionSegmentType\n} from './cubismmotioninternal';\nimport { CubismMotionJson, EvaluationOptionFlag } from './cubismmotionjson';\nimport { CubismMotionQueueEntry } from './cubismmotionqueueentry';\n\nconst EffectNameEyeBlink = 'EyeBlink';\nconst EffectNameLipSync = 'LipSync';\nconst TargetNameModel = 'Model';\nconst TargetNameParameter = 'Parameter';\nconst TargetNamePartOpacity = 'PartOpacity';\n\n// Id\nconst IdNameOpacity = 'Opacity';\n\n/**\n * Cubism SDK R2 以前のモーションを再現させるなら true 、アニメータのモーションを正しく再現するなら false 。\n */\nconst UseOldBeziersCurveMotion = false;\n\nfunction lerpPoints(\n  a: CubismMotionPoint,\n  b: CubismMotionPoint,\n  t: number\n): CubismMotionPoint {\n  const result: CubismMotionPoint = new CubismMotionPoint();\n\n  result.time = a.time + (b.time - a.time) * t;\n  result.value = a.value + (b.value - a.value) * t;\n\n  return result;\n}\n\nfunction linearEvaluate(points: CubismMotionPoint[], time: number): number {\n  let t: number = (time - points[0].time) / (points[1].time - points[0].time);\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n\n  return points[0].value + (points[1].value - points[0].value) * t;\n}\n\nfunction bezierEvaluate(points: CubismMotionPoint[], time: number): number {\n  let t: number = (time - points[0].time) / (points[3].time - points[0].time);\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction bezierEvaluateBinarySearch(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  const xError = 0.01;\n\n  const x: number = time;\n  let x1: number = points[0].time;\n  let x2: number = points[3].time;\n  let cx1: number = points[1].time;\n  let cx2: number = points[2].time;\n\n  let ta = 0.0;\n  let tb = 1.0;\n  let t = 0.0;\n  let i = 0;\n\n  for (let var33 = true; i < 20; ++i) {\n    if (x < x1 + xError) {\n      t = ta;\n      break;\n    }\n\n    if (x2 - xError < x) {\n      t = tb;\n      break;\n    }\n\n    let centerx: number = (cx1 + cx2) * 0.5;\n    cx1 = (x1 + cx1) * 0.5;\n    cx2 = (x2 + cx2) * 0.5;\n    const ctrlx12: number = (cx1 + centerx) * 0.5;\n    const ctrlx21: number = (cx2 + centerx) * 0.5;\n    centerx = (ctrlx12 + ctrlx21) * 0.5;\n    if (x < centerx) {\n      tb = (ta + tb) * 0.5;\n      if (centerx - xError < x) {\n        t = tb;\n        break;\n      }\n\n      x2 = centerx;\n      cx2 = ctrlx12;\n    } else {\n      ta = (ta + tb) * 0.5;\n      if (x < centerx + xError) {\n        t = ta;\n        break;\n      }\n\n      x1 = centerx;\n      cx1 = ctrlx21;\n    }\n  }\n\n  if (i == 20) {\n    t = (ta + tb) * 0.5;\n  }\n\n  if (t < 0.0) {\n    t = 0.0;\n  }\n  if (t > 1.0) {\n    t = 1.0;\n  }\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction bezierEvaluateCardanoInterpretation(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  const x: number = time;\n  const x1: number = points[0].time;\n  const x2: number = points[3].time;\n  const cx1: number = points[1].time;\n  const cx2: number = points[2].time;\n\n  const a: number = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;\n  const b: number = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;\n  const c: number = 3.0 * cx1 - 3.0 * x1;\n  const d: number = x1 - x;\n\n  const t: number = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\n\n  const p01: CubismMotionPoint = lerpPoints(points[0], points[1], t);\n  const p12: CubismMotionPoint = lerpPoints(points[1], points[2], t);\n  const p23: CubismMotionPoint = lerpPoints(points[2], points[3], t);\n\n  const p012: CubismMotionPoint = lerpPoints(p01, p12, t);\n  const p123: CubismMotionPoint = lerpPoints(p12, p23, t);\n\n  return lerpPoints(p012, p123, t).value;\n}\n\nfunction steppedEvaluate(points: CubismMotionPoint[], time: number): number {\n  return points[0].value;\n}\n\nfunction inverseSteppedEvaluate(\n  points: CubismMotionPoint[],\n  time: number\n): number {\n  return points[1].value;\n}\n\nfunction evaluateCurve(\n  motionData: CubismMotionData,\n  index: number,\n  time: number,\n  isCorrection: boolean,\n  endTime: number\n): number {\n  // Find segment to evaluate.\n  const curve: CubismMotionCurve = motionData.curves.at(index);\n\n  let target = -1;\n  const totalSegmentCount: number = curve.baseSegmentIndex + curve.segmentCount;\n  let pointPosition = 0;\n  for (let i: number = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n    // Get first point of next segment.\n    pointPosition =\n      motionData.segments.at(i).basePointIndex +\n      ((motionData.segments.at(i).segmentType as CubismMotionSegmentType) ==\n      CubismMotionSegmentType.CubismMotionSegmentType_Bezier\n        ? 3\n        : 1);\n\n    // Break if time lies within current segment.\n    if (motionData.points.at(pointPosition).time > time) {\n      target = i;\n      break;\n    }\n  }\n\n  if (target == -1) {\n    if (isCorrection && time < endTime) {\n      return correctEndPoint(\n        motionData,\n        totalSegmentCount - 1,\n        motionData.segments.at(curve.baseSegmentIndex).basePointIndex,\n        pointPosition,\n        time,\n        endTime\n      );\n    }\n    return motionData.points.at(pointPosition).value;\n  }\n\n  const segment: CubismMotionSegment = motionData.segments.at(target);\n\n  return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\n}\n\n/**\n * 終点から始点への補正処理\n * @param motionData\n * @param segmentIndex\n * @param beginIndex\n * @param endIndex\n * @param time\n * @param endTime\n * @returns\n */\nfunction correctEndPoint(\n  motionData: CubismMotionData,\n  segmentIndex: number,\n  beginIndex: number,\n  endIndex: number,\n  time: number,\n  endTime: number\n): number {\n  const motionPoint: CubismMotionPoint[] = [\n    new CubismMotionPoint(),\n    new CubismMotionPoint()\n  ];\n  {\n    const src = motionData.points.at(endIndex);\n    motionPoint[0].time = src.time;\n    motionPoint[0].value = src.value;\n  }\n  {\n    const src = motionData.points.at(beginIndex);\n    motionPoint[1].time = endTime;\n    motionPoint[1].value = src.value;\n  }\n\n  switch (\n    motionData.segments.at(segmentIndex).segmentType as CubismMotionSegmentType\n  ) {\n    case CubismMotionSegmentType.CubismMotionSegmentType_Linear:\n    case CubismMotionSegmentType.CubismMotionSegmentType_Bezier:\n    default:\n      return linearEvaluate(motionPoint, time);\n    case CubismMotionSegmentType.CubismMotionSegmentType_Stepped:\n      return steppedEvaluate(motionPoint, time);\n    case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:\n      return inverseSteppedEvaluate(motionPoint, time);\n  }\n}\n\n/**\n * Enumerator for version control of Motion Behavior.\n * For details, see the SDK Manual.\n */\nexport enum MotionBehavior {\n  MotionBehavior_V1,\n  MotionBehavior_V2\n}\n\n/**\n * モーションクラス\n *\n * モーションのクラス。\n */\nexport class CubismMotion extends ACubismMotion {\n  /**\n   * インスタンスを作成する\n   *\n   * @param buffer motion3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 作成されたインスタンス\n   */\n  public static create(\n    buffer: ArrayBuffer,\n    size: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback\n  ): CubismMotion {\n    const ret = new CubismMotion();\n\n    ret.parse(buffer, size);\n    ret._sourceFrameRate = ret._motionData.fps;\n    ret._loopDurationSeconds = ret._motionData.duration;\n    ret._onFinishedMotion = onFinishedMotionHandler;\n    ret._onBeganMotion = onBeganMotionHandler;\n\n    // NOTE: Editorではループありのモーション書き出しは非対応\n    // ret->_loop = (ret->_motionData->Loop > 0);\n    return ret;\n  }\n\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model             対象のモデル\n   * @param userTimeSeconds   現在の時刻[秒]\n   * @param fadeWeight        モーションの重み\n   * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション\n   */\n  public doUpdateParameters(\n    model: CubismModel,\n    userTimeSeconds: number,\n    fadeWeight: number,\n    motionQueueEntry: CubismMotionQueueEntry\n  ): void {\n    if (this._modelCurveIdEyeBlink == null) {\n      this._modelCurveIdEyeBlink =\n        CubismFramework.getIdManager().getId(EffectNameEyeBlink);\n    }\n\n    if (this._modelCurveIdLipSync == null) {\n      this._modelCurveIdLipSync =\n        CubismFramework.getIdManager().getId(EffectNameLipSync);\n    }\n\n    if (this._modelCurveIdOpacity == null) {\n      this._modelCurveIdOpacity =\n        CubismFramework.getIdManager().getId(IdNameOpacity);\n    }\n\n    if (this._motionBehavior === MotionBehavior.MotionBehavior_V2) {\n      if (this._previousLoopState !== this._isLoop) {\n        // 終了時間を計算する\n        this.adjustEndTime(motionQueueEntry);\n        this._previousLoopState = this._isLoop;\n      }\n    }\n\n    let timeOffsetSeconds: number =\n      userTimeSeconds - motionQueueEntry.getStartTime();\n\n    if (timeOffsetSeconds < 0.0) {\n      timeOffsetSeconds = 0.0; // エラー回避\n    }\n\n    let lipSyncValue: number = Number.MAX_VALUE;\n    let eyeBlinkValue: number = Number.MAX_VALUE;\n\n    //まばたき、リップシンクのうちモーションの適用を検出するためのビット（maxFlagCount個まで\n    const maxTargetSize = 64;\n    let lipSyncFlags = 0;\n    let eyeBlinkFlags = 0;\n\n    //瞬き、リップシンクのターゲット数が上限を超えている場合\n    if (this._eyeBlinkParameterIds.getSize() > maxTargetSize) {\n      CubismLogDebug(\n        'too many eye blink targets : {0}',\n        this._eyeBlinkParameterIds.getSize()\n      );\n    }\n    if (this._lipSyncParameterIds.getSize() > maxTargetSize) {\n      CubismLogDebug(\n        'too many lip sync targets : {0}',\n        this._lipSyncParameterIds.getSize()\n      );\n    }\n\n    const tmpFadeIn: number =\n      this._fadeInSeconds <= 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n              this._fadeInSeconds\n          );\n\n    const tmpFadeOut: number =\n      this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\n        ? 1.0\n        : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) /\n              this._fadeOutSeconds\n          );\n    let value: number;\n    let c: number, parameterIndex: number;\n\n    // 'Repeat' time as necessary.\n    let time: number = timeOffsetSeconds;\n    let duration: number = this._motionData.duration;\n    const isCorrection: boolean =\n      this._motionBehavior === MotionBehavior.MotionBehavior_V2 && this._isLoop;\n\n    if (this._isLoop) {\n      if (this._motionBehavior === MotionBehavior.MotionBehavior_V2) {\n        duration += 1.0 / this._motionData.fps;\n      }\n      while (time > duration) {\n        time -= duration;\n      }\n    }\n\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    // Evaluate model curves.\n    for (\n      c = 0;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n      ++c\n    ) {\n      // Evaluate curve and call handler.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      if (curves.at(c).id == this._modelCurveIdEyeBlink) {\n        eyeBlinkValue = value;\n      } else if (curves.at(c).id == this._modelCurveIdLipSync) {\n        lipSyncValue = value;\n      } else if (curves.at(c).id == this._modelCurveIdOpacity) {\n        this._modelOpacity = value;\n        model.setModelOapcity(this.getModelOpacityValue());\n      }\n    }\n\n    let parameterMotionCurveCount = 0;\n\n    for (\n      ;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n      ++c\n    ) {\n      parameterMotionCurveCount++;\n\n      // Find parameter index.\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n      // Skip curve evaluation if no value in sink.\n      if (parameterIndex == -1) {\n        continue;\n      }\n\n      const sourceValue: number =\n        model.getParameterValueByIndex(parameterIndex);\n\n      // Evaluate curve and apply value.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\n            value *= eyeBlinkValue;\n            eyeBlinkFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\n            value += lipSyncValue;\n            lipSyncFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n\n      let v: number;\n\n      // パラメータごとのフェード\n      if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\n        // モーションのフェードを適用\n        v = sourceValue + (value - sourceValue) * fadeWeight;\n      } else {\n        // パラメータに対してフェードインかフェードアウトが設定してある場合はそちらを適用\n        let fin: number;\n        let fout: number;\n\n        if (curves.at(c).fadeInTime < 0.0) {\n          fin = tmpFadeIn;\n        } else {\n          fin =\n            curves.at(c).fadeInTime == 0.0\n              ? 1.0\n              : CubismMath.getEasingSine(\n                  (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\n                    curves.at(c).fadeInTime\n                );\n        }\n\n        if (curves.at(c).fadeOutTime < 0.0) {\n          fout = tmpFadeOut;\n        } else {\n          fout =\n            curves.at(c).fadeOutTime == 0.0 ||\n            motionQueueEntry.getEndTime() < 0.0\n              ? 1.0\n              : CubismMath.getEasingSine(\n                  (motionQueueEntry.getEndTime() - userTimeSeconds) /\n                    curves.at(c).fadeOutTime\n                );\n        }\n\n        const paramWeight: number = this._weight * fin * fout;\n\n        // パラメータごとのフェードを適用\n        v = sourceValue + (value - sourceValue) * paramWeight;\n      }\n\n      model.setParameterValueByIndex(parameterIndex, v, 1.0);\n    }\n\n    {\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._eyeBlinkParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          const sourceValue: number = model.getParameterValueById(\n            this._eyeBlinkParameterIds.at(i)\n          );\n\n          // モーションでの上書きがあった時にはまばたきは適用しない\n          if ((eyeBlinkFlags >> i) & 0x01) {\n            continue;\n          }\n\n          const v: number =\n            sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n\n          model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\n        }\n      }\n\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (\n          let i = 0;\n          i < this._lipSyncParameterIds.getSize() && i < maxTargetSize;\n          ++i\n        ) {\n          const sourceValue: number = model.getParameterValueById(\n            this._lipSyncParameterIds.at(i)\n          );\n\n          // モーションでの上書きがあった時にはリップシンクは適用しない\n          if ((lipSyncFlags >> i) & 0x01) {\n            continue;\n          }\n\n          const v: number =\n            sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n\n          model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\n        }\n      }\n    }\n\n    for (\n      ;\n      c < this._motionData.curveCount &&\n      curves.at(c).type ==\n        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n      ++c\n    ) {\n      // Find parameter index.\n      parameterIndex = model.getParameterIndex(curves.at(c).id);\n\n      // Skip curve evaluation if no value in sink.\n      if (parameterIndex == -1) {\n        continue;\n      }\n\n      // Evaluate curve and apply value.\n      value = evaluateCurve(this._motionData, c, time, isCorrection, duration);\n\n      model.setParameterValueByIndex(parameterIndex, value);\n    }\n\n    if (timeOffsetSeconds >= duration) {\n      if (this._isLoop) {\n        this.updateForNextLoop(motionQueueEntry, userTimeSeconds, time);\n      } else {\n        if (this._onFinishedMotion) {\n          this._onFinishedMotion(this);\n        }\n\n        motionQueueEntry.setIsFinished(true);\n      }\n    }\n    this._lastWeight = fadeWeight;\n  }\n\n  /**\n   * ループ情報の設定\n   * @param loop ループ情報\n   */\n  public setIsLoop(loop: boolean): void {\n    CubismLogWarning(\n      'setIsLoop() is a deprecated function. Please use setLoop().'\n    );\n    this._isLoop = loop;\n  }\n\n  /**\n   * ループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  public isLoop(): boolean {\n    CubismLogWarning(\n      'isLoop() is a deprecated function. Please use getLoop().'\n    );\n    return this._isLoop;\n  }\n\n  /**\n   * ループ時のフェードイン情報の設定\n   * @param loopFadeIn  ループ時のフェードイン情報\n   */\n  public setIsLoopFadeIn(loopFadeIn: boolean): void {\n    CubismLogWarning(\n      'setIsLoopFadeIn() is a deprecated function. Please use setLoopFadeIn().'\n    );\n    this._isLoopFadeIn = loopFadeIn;\n  }\n\n  /**\n   * ループ時のフェードイン情報の取得\n   *\n   * @return  true    する\n   * @return  false   しない\n   */\n  public isLoopFadeIn(): boolean {\n    CubismLogWarning(\n      'isLoopFadeIn() is a deprecated function. Please use getLoopFadeIn().'\n    );\n    return this._isLoopFadeIn;\n  }\n\n  /**\n   * Sets the version of the Motion Behavior.\n   *\n   * @param Specifies the version of the Motion Behavior.\n   */\n  public setMotionBehavior(motionBehavior: MotionBehavior) {\n    this._motionBehavior = motionBehavior;\n  }\n\n  /**\n   * Gets the version of the Motion Behavior.\n   *\n   * @return Returns the version of the Motion Behavior.\n   */\n  public getMotionBehavior(): MotionBehavior {\n    return this._motionBehavior;\n  }\n\n  /**\n   * モーションの長さを取得する。\n   *\n   * @return  モーションの長さ[秒]\n   */\n  public getDuration(): number {\n    return this._isLoop ? -1.0 : this._loopDurationSeconds;\n  }\n\n  /**\n   * モーションのループ時の長さを取得する。\n   *\n   * @return  モーションのループ時の長さ[秒]\n   */\n  public getLoopDuration(): number {\n    return this._loopDurationSeconds;\n  }\n\n  /**\n   * パラメータに対するフェードインの時間を設定する。\n   *\n   * @param parameterId     パラメータID\n   * @param value           フェードインにかかる時間[秒]\n   */\n  public setParameterFadeInTime(\n    parameterId: CubismIdHandle,\n    value: number\n  ): void {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        curves.at(i).fadeInTime = value;\n        return;\n      }\n    }\n  }\n\n  /**\n   * パラメータに対するフェードアウトの時間の設定\n   * @param parameterId     パラメータID\n   * @param value           フェードアウトにかかる時間[秒]\n   */\n  public setParameterFadeOutTime(\n    parameterId: CubismIdHandle,\n    value: number\n  ): void {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        curves.at(i).fadeOutTime = value;\n        return;\n      }\n    }\n  }\n\n  /**\n   * パラメータに対するフェードインの時間の取得\n   * @param    parameterId     パラメータID\n   * @return   フェードインにかかる時間[秒]\n   */\n  public getParameterFadeInTime(parameterId: CubismIdHandle): number {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        return curves.at(i).fadeInTime;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * パラメータに対するフェードアウトの時間を取得\n   *\n   * @param   parameterId     パラメータID\n   * @return   フェードアウトにかかる時間[秒]\n   */\n  public getParameterFadeOutTime(parameterId: CubismIdHandle): number {\n    const curves: csmVector<CubismMotionCurve> = this._motionData.curves;\n\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves.at(i).id) {\n        return curves.at(i).fadeOutTime;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * 自動エフェクトがかかっているパラメータIDリストの設定\n   * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\n   * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\n   */\n  public setEffectIds(\n    eyeBlinkParameterIds: csmVector<CubismIdHandle>,\n    lipSyncParameterIds: csmVector<CubismIdHandle>\n  ): void {\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n    this._lipSyncParameterIds = lipSyncParameterIds;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._sourceFrameRate = 30.0;\n    this._loopDurationSeconds = -1.0;\n    this._isLoop = false; // trueから false へデフォルトを変更\n    this._isLoopFadeIn = true; // ループ時にフェードインが有効かどうかのフラグ\n    this._lastWeight = 0.0;\n    this._motionData = null;\n    this._modelCurveIdEyeBlink = null;\n    this._modelCurveIdLipSync = null;\n    this._modelCurveIdOpacity = null;\n    this._eyeBlinkParameterIds = null;\n    this._lipSyncParameterIds = null;\n    this._modelOpacity = 1.0;\n    this._debugMode = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._motionData = void 0;\n    this._motionData = null;\n  }\n\n  /**\n   *\n   * @param motionQueueEntry\n   * @param userTimeSeconds\n   * @param time\n   */\n  public updateForNextLoop(\n    motionQueueEntry: CubismMotionQueueEntry,\n    userTimeSeconds: number,\n    time: number\n  ) {\n    switch (this._motionBehavior) {\n      case MotionBehavior.MotionBehavior_V2:\n      default:\n        motionQueueEntry.setStartTime(userTimeSeconds - time); // 最初の状態へ\n        if (this._isLoopFadeIn) {\n          // ループ中でループ用フェードインが有効のときは、フェードイン設定し直し\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds - time);\n        }\n\n        if (this._onFinishedMotion !== null) {\n          this._onFinishedMotion(this);\n        }\n        break;\n      case MotionBehavior.MotionBehavior_V1:\n        // 旧ループ処理\n        motionQueueEntry.setStartTime(userTimeSeconds); // 最初の状態へ\n        if (this._isLoopFadeIn) {\n          // ループ中でループ用フェードインが有効のときは、フェードイン設定し直し\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n        }\n        break;\n    }\n  }\n\n  /**\n   * motion3.jsonをパースする。\n   *\n   * @param motionJson  motion3.jsonが読み込まれているバッファ\n   * @param size        バッファのサイズ\n   */\n  public parse(motionJson: ArrayBuffer, size: number): void {\n    this._motionData = new CubismMotionData();\n\n    let json: CubismMotionJson = new CubismMotionJson(motionJson, size);\n\n    if (!json) {\n      json.release();\n      json = void 0;\n      return;\n    }\n\n    if (this._debugMode) {\n      json.hasConsistency();\n    }\n\n    this._motionData.duration = json.getMotionDuration();\n    this._motionData.loop = json.isMotionLoop();\n    this._motionData.curveCount = json.getMotionCurveCount();\n    this._motionData.fps = json.getMotionFps();\n    this._motionData.eventCount = json.getEventCount();\n\n    const areBeziersRestructed: boolean = json.getEvaluationOptionFlag(\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted\n    );\n\n    if (json.isExistMotionFadeInTime()) {\n      this._fadeInSeconds =\n        json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\n    } else {\n      this._fadeInSeconds = 1.0;\n    }\n\n    if (json.isExistMotionFadeOutTime()) {\n      this._fadeOutSeconds =\n        json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\n    } else {\n      this._fadeOutSeconds = 1.0;\n    }\n\n    this._motionData.curves.updateSize(\n      this._motionData.curveCount,\n      CubismMotionCurve,\n      true\n    );\n    this._motionData.segments.updateSize(\n      json.getMotionTotalSegmentCount(),\n      CubismMotionSegment,\n      true\n    );\n    this._motionData.points.updateSize(\n      json.getMotionTotalPointCount(),\n      CubismMotionPoint,\n      true\n    );\n    this._motionData.events.updateSize(\n      this._motionData.eventCount,\n      CubismMotionEvent,\n      true\n    );\n\n    let totalPointCount = 0;\n    let totalSegmentCount = 0;\n\n    // Curves\n    for (\n      let curveCount = 0;\n      curveCount < this._motionData.curveCount;\n      ++curveCount\n    ) {\n      if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n      } else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n      } else if (\n        json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity\n      ) {\n        this._motionData.curves.at(curveCount).type =\n          CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n      } else {\n        CubismLogWarning(\n          'Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!'\n        );\n      }\n\n      this._motionData.curves.at(curveCount).id =\n        json.getMotionCurveId(curveCount);\n\n      this._motionData.curves.at(curveCount).baseSegmentIndex =\n        totalSegmentCount;\n\n      this._motionData.curves.at(curveCount).fadeInTime =\n        json.isExistMotionCurveFadeInTime(curveCount)\n          ? json.getMotionCurveFadeInTime(curveCount)\n          : -1.0;\n      this._motionData.curves.at(curveCount).fadeOutTime =\n        json.isExistMotionCurveFadeOutTime(curveCount)\n          ? json.getMotionCurveFadeOutTime(curveCount)\n          : -1.0;\n\n      // Segments\n      for (\n        let segmentPosition = 0;\n        segmentPosition < json.getMotionCurveSegmentCount(curveCount);\n\n      ) {\n        if (segmentPosition == 0) {\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\n            totalPointCount;\n\n          this._motionData.points.at(totalPointCount).time =\n            json.getMotionCurveSegment(curveCount, segmentPosition);\n          this._motionData.points.at(totalPointCount).value =\n            json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n\n          totalPointCount += 1;\n          segmentPosition += 2;\n        } else {\n          this._motionData.segments.at(totalSegmentCount).basePointIndex =\n            totalPointCount - 1;\n        }\n\n        const segment: number = json.getMotionCurveSegment(\n          curveCount,\n          segmentPosition\n        );\n\n        const segmentType: CubismMotionSegmentType = segment;\n        switch (segmentType) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              linearEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\n              this._motionData.segments.at(totalSegmentCount).evaluate =\n                bezierEvaluate;\n            } else {\n              this._motionData.segments.at(totalSegmentCount).evaluate =\n                bezierEvaluateCardanoInterpretation;\n            }\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            this._motionData.points.at(totalPointCount + 1).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 3);\n            this._motionData.points.at(totalPointCount + 1).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 4);\n\n            this._motionData.points.at(totalPointCount + 2).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 5);\n            this._motionData.points.at(totalPointCount + 2).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 6);\n\n            totalPointCount += 3;\n            segmentPosition += 7;\n\n            break;\n          }\n\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              steppedEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\n            this._motionData.segments.at(totalSegmentCount).segmentType =\n              CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n            this._motionData.segments.at(totalSegmentCount).evaluate =\n              inverseSteppedEvaluate;\n\n            this._motionData.points.at(totalPointCount).time =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1);\n            this._motionData.points.at(totalPointCount).value =\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2);\n\n            totalPointCount += 1;\n            segmentPosition += 3;\n\n            break;\n          }\n          default: {\n            CSM_ASSERT(0);\n            break;\n          }\n        }\n\n        ++this._motionData.curves.at(curveCount).segmentCount;\n        ++totalSegmentCount;\n      }\n    }\n\n    for (\n      let userdatacount = 0;\n      userdatacount < json.getEventCount();\n      ++userdatacount\n    ) {\n      this._motionData.events.at(userdatacount).fireTime =\n        json.getEventTime(userdatacount);\n      this._motionData.events.at(userdatacount).value =\n        json.getEventValue(userdatacount);\n    }\n\n    json.release();\n    json = void 0;\n    json = null;\n  }\n\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds        今回の再生時間[秒]\n   */\n  public getFiredEvent(\n    beforeCheckTimeSeconds: number,\n    motionTimeSeconds: number\n  ): csmVector<csmString> {\n    this._firedEventValues.updateSize(0);\n\n    // イベントの発火チェック\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\n      if (\n        this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\n        this._motionData.events.at(u).fireTime <= motionTimeSeconds\n      ) {\n        this._firedEventValues.pushBack(\n          new csmString(this._motionData.events.at(u).value.s)\n        );\n      }\n    }\n\n    return this._firedEventValues;\n  }\n\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  public isExistModelOpacity(): boolean {\n    for (let i = 0; i < this._motionData.curveCount; i++) {\n      const curve: CubismMotionCurve = this._motionData.curves.at(i);\n\n      if (curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        continue;\n      }\n\n      if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  public getModelOpacityIndex(): number {\n    if (this.isExistModelOpacity()) {\n      for (let i = 0; i < this._motionData.curveCount; i++) {\n        const curve: CubismMotionCurve = this._motionData.curves.at(i);\n\n        if (\n          curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model\n        ) {\n          continue;\n        }\n\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のカーブのインデックス\n   */\n  public getModelOpacityId(index: number): CubismIdHandle {\n    if (index != -1) {\n      const curve: CubismMotionCurve = this._motionData.curves.at(index);\n\n      if (curve.type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {\n          return CubismFramework.getIdManager().getId(curve.id.getString().s);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * 現在時間の透明度の値を返す\n   *\n   * @returns success:モーションの当該時間におけるOpacityの値\n   */\n  public getModelOpacityValue(): number {\n    return this._modelOpacity;\n  }\n\n  /**\n   * デバッグ用フラグを設定する\n   *\n   * @param debugMode デバッグモードの有効・無効\n   */\n  public setDebugMode(debugMode: boolean): void {\n    this._debugMode = debugMode;\n  }\n\n  public _sourceFrameRate: number; // ロードしたファイルのFPS。記述が無ければデフォルト値15fpsとなる\n  public _loopDurationSeconds: number; // mtnファイルで定義される一連のモーションの長さ\n  public _motionBehavior: MotionBehavior = MotionBehavior.MotionBehavior_V2;\n  public _lastWeight: number; // 最後に設定された重み\n\n  public _motionData: CubismMotionData; // 実際のモーションデータ本体\n\n  public _eyeBlinkParameterIds: csmVector<CubismIdHandle>; // 自動まばたきを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n  public _lipSyncParameterIds: csmVector<CubismIdHandle>; // リップシンクを適用するパラメータIDハンドルのリスト。  モデル（モデルセッティング）とパラメータを対応付ける。\n\n  public _modelCurveIdEyeBlink: CubismIdHandle; // モデルが持つ自動まばたき用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n  public _modelCurveIdLipSync: CubismIdHandle; // モデルが持つリップシンク用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n  public _modelCurveIdOpacity: CubismIdHandle; // モデルが持つ不透明度用パラメータIDのハンドル。  モデルとモーションを対応付ける。\n\n  public _modelOpacity: number; // モーションから取得した不透明度\n\n  private _debugMode: boolean; // デバッグモードかどうか\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotion';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotion = $.CubismMotion;\n  export type CubismMotion = $.CubismMotion;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismModel } from '../model/cubismmodel';\nimport { ACubismMotion } from './acubismmotion';\nimport {\n  CubismMotionQueueEntryHandle,\n  CubismMotionQueueManager\n} from './cubismmotionqueuemanager';\n\n/**\n * モーションの管理\n *\n * モーションの管理を行うクラス\n */\nexport class CubismMotionManager extends CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._currentPriority = 0;\n    this._reservePriority = 0;\n  }\n\n  /**\n   * 再生中のモーションの優先度の取得\n   * @return  モーションの優先度\n   */\n  public getCurrentPriority(): number {\n    return this._currentPriority;\n  }\n\n  /**\n   * 予約中のモーションの優先度を取得する。\n   * @return  モーションの優先度\n   */\n  public getReservePriority(): number {\n    return this._reservePriority;\n  }\n\n  /**\n   * 予約中のモーションの優先度を設定する。\n   * @param   val     優先度\n   */\n  public setReservePriority(val: number): void {\n    this._reservePriority = val;\n  }\n\n  /**\n   * 優先度を設定してモーションを開始する。\n   *\n   * @param motion          モーション\n   * @param autoDelete      再生が狩猟したモーションのインスタンスを削除するならtrue\n   * @param priority        優先度\n   * @return                開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  public startMotionPriority(\n    motion: ACubismMotion,\n    autoDelete: boolean,\n    priority: number\n  ): CubismMotionQueueEntryHandle {\n    if (priority == this._reservePriority) {\n      this._reservePriority = 0; // 予約を解除\n    }\n\n    this._currentPriority = priority; // 再生中モーションの優先度を設定\n\n    return super.startMotion(motion, autoDelete);\n  }\n\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param model   対象のモデル\n   * @param deltaTimeSeconds    デルタ時間[秒]\n   * @return  true    更新されている\n   * @return  false   更新されていない\n   */\n  public updateMotion(model: CubismModel, deltaTimeSeconds: number): boolean {\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    const updated: boolean = super.doUpdateMotion(model, this._userTimeSeconds);\n\n    if (this.isFinished()) {\n      this._currentPriority = 0; // 再生中のモーションの優先度を解除\n    }\n\n    return updated;\n  }\n\n  /**\n   * モーションを予約する。\n   *\n   * @param   priority    優先度\n   * @return  true    予約できた\n   * @return  false   予約できなかった\n   */\n  public reserveMotion(priority: number): boolean {\n    if (\n      priority <= this._reservePriority ||\n      priority <= this._currentPriority\n    ) {\n      return false;\n    }\n\n    this._reservePriority = priority;\n\n    return true;\n  }\n\n  _currentPriority: number; // 現在再生中のモーションの優先度\n  _reservePriority: number; // 再生予定のモーションの優先度。再生中は0になる。モーションファイルを別スレッドで読み込むときの機能。\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmotionmanager';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMotionManager = $.CubismMotionManager;\n  export type CubismMotionManager = $.CubismMotionManager;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\n\n/**\n * 物理演算の適用先の種類\n */\nexport enum CubismPhysicsTargetType {\n  CubismPhysicsTargetType_Parameter // パラメータに対して適用\n}\n\n/**\n * 物理演算の入力の種類\n */\nexport enum CubismPhysicsSource {\n  CubismPhysicsSource_X, // X軸の位置から\n  CubismPhysicsSource_Y, // Y軸の位置から\n  CubismPhysicsSource_Angle // 角度から\n}\n\n/**\n * @brief 物理演算で使用する外部の力\n *\n * 物理演算で使用する外部の力。\n */\nexport class PhysicsJsonEffectiveForces {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n}\n\n/**\n * 物理演算のパラメータ情報\n */\nexport class CubismPhysicsParameter {\n  id: CubismIdHandle; // パラメータ\n  targetType: CubismPhysicsTargetType; // 適用先の種類\n}\n\n/**\n * 物理演算の正規化情報\n */\nexport class CubismPhysicsNormalization {\n  minimum: number; // 最大値\n  maximum: number; // 最小値\n  defalut: number; // デフォルト値\n}\n\n/**\n * 物理演算の演算委使用する物理点の情報\n */\nexport class CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n\n  initialPosition: CubismVector2; // 初期位置\n  mobility: number; // 動きやすさ\n  delay: number; // 遅れ\n  acceleration: number; // 加速度\n  radius: number; // 距離\n  position: CubismVector2; // 現在の位置\n  lastPosition: CubismVector2; // 最後の位置\n  lastGravity: CubismVector2; // 最後の重力\n  force: CubismVector2; // 現在かかっている力\n  velocity: CubismVector2; // 現在の速度\n}\n\n/**\n * 物理演算の物理点の管理\n */\nexport class CubismPhysicsSubRig {\n  constructor() {\n    this.normalizationPosition = new CubismPhysicsNormalization();\n    this.normalizationAngle = new CubismPhysicsNormalization();\n  }\n  inputCount: number; // 入力の個数\n  outputCount: number; // 出力の個数\n  particleCount: number; // 物理点の個数\n  baseInputIndex: number; // 入力の最初のインデックス\n  baseOutputIndex: number; // 出力の最初のインデックス\n  baseParticleIndex: number; // 物理点の最初のインデックス\n  normalizationPosition: CubismPhysicsNormalization; // 正規化された位置\n  normalizationAngle: CubismPhysicsNormalization; // 正規化された角度\n}\n\n/**\n * 正規化されたパラメータの取得関数の宣言\n * @param targetTranslation     // 演算結果の移動値\n * @param targetAngle           // 演算結果の角度\n * @param value                 // パラメータの値\n * @param parameterMinimunValue // パラメータの最小値\n * @param parameterMaximumValue // パラメータの最大値\n * @param parameterDefaultValue // パラメータのデフォルト値\n * @param normalizationPosition // 正規化された位置\n * @param normalizationAngle    // 正規化された角度\n * @param isInverted            // 値が反転されているか？\n * @param weight                // 重み\n */\nexport interface normalizedPhysicsParameterValueGetter {\n  (\n    targetTranslation: CubismVector2,\n    targetAngle: { angle: number },\n    value: number,\n    parameterMinimunValue: number,\n    parameterMaximumValue: number,\n    parameterDefaultValue: number,\n    normalizationPosition: CubismPhysicsNormalization,\n    normalizationAngle: CubismPhysicsNormalization,\n    isInverted: boolean,\n    weight: number\n  ): void;\n}\n\n/**\n * 物理演算の値の取得関数の宣言\n * @param translation 移動値\n * @param particles 物理点のリスト\n * @param isInverted 値が反映されているか\n * @param parentGravity 重力\n * @return 値\n */\nexport interface physicsValueGetter {\n  (\n    translation: CubismVector2,\n    particles: CubismPhysicsParticle[],\n    particleIndex: number,\n    isInverted: boolean,\n    parentGravity: CubismVector2\n  ): number;\n}\n\n/**\n * 物理演算のスケールの取得関数の宣言\n * @param translationScale 移動値のスケール\n * @param angleScale    角度のスケール\n * @return スケール値\n */\nexport interface physicsScaleGetter {\n  (translationScale: CubismVector2, angleScale: number): number;\n}\n\n/**\n * 物理演算の入力情報\n */\nexport class CubismPhysicsInput {\n  constructor() {\n    this.source = new CubismPhysicsParameter();\n  }\n  source: CubismPhysicsParameter; // 入力元のパラメータ\n  sourceParameterIndex: number; // 入力元のパラメータのインデックス\n  weight: number; // 重み\n  type: number; // 入力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  getNormalizedParameterValue: normalizedPhysicsParameterValueGetter; // 正規化されたパラメータ値の取得関数\n}\n\n/**\n * @brief 物理演算の出力情報\n *\n * 物理演算の出力情報。\n */\nexport class CubismPhysicsOutput {\n  constructor() {\n    this.destination = new CubismPhysicsParameter();\n    this.translationScale = new CubismVector2(0, 0);\n  }\n\n  destination: CubismPhysicsParameter; // 出力先のパラメータ\n  destinationParameterIndex: number; // 出力先のパラメータのインデックス\n  vertexIndex: number; // 振り子のインデックス\n  translationScale: CubismVector2; // 移動値のスケール\n  angleScale: number; // 角度のスケール\n  weight: number; // 重み\n  type: CubismPhysicsSource; // 出力の種類\n  reflect: boolean; // 値が反転されているかどうか\n  valueBelowMinimum: number; // 最小値を下回った時の値\n  valueExceededMaximum: number; // 最大値をこえた時の値\n  getValue: physicsValueGetter; // 物理演算の値の取得関数\n  getScale: physicsScaleGetter; // 物理演算のスケール値の取得関数\n}\n\n/**\n * @brief 物理演算のデータ\n *\n * 物理演算のデータ。\n */\nexport class CubismPhysicsRig {\n  constructor() {\n    this.settings = new csmVector<CubismPhysicsSubRig>();\n    this.inputs = new csmVector<CubismPhysicsInput>();\n    this.outputs = new csmVector<CubismPhysicsOutput>();\n    this.particles = new csmVector<CubismPhysicsParticle>();\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n    this.fps = 0.0;\n  }\n\n  subRigCount: number; // 物理演算の物理点の個数\n  settings: csmVector<CubismPhysicsSubRig>; // 物理演算の物理点の管理のリスト\n  inputs: csmVector<CubismPhysicsInput>; // 物理演算の入力のリスト\n  outputs: csmVector<CubismPhysicsOutput>; // 物理演算の出力のリスト\n  particles: csmVector<CubismPhysicsParticle>; // 物理演算の物理点のリスト\n  gravity: CubismVector2; // 重力\n  wind: CubismVector2; // 風\n  fps: number; //物理演算動作FPS\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsinternal';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsInput = $.CubismPhysicsInput;\n  export type CubismPhysicsInput = $.CubismPhysicsInput;\n  export const CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export type CubismPhysicsNormalization = $.CubismPhysicsNormalization;\n  export const CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export type CubismPhysicsOutput = $.CubismPhysicsOutput;\n  export const CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export type CubismPhysicsParameter = $.CubismPhysicsParameter;\n  export const CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export type CubismPhysicsParticle = $.CubismPhysicsParticle;\n  export const CubismPhysicsRig = $.CubismPhysicsRig;\n  export type CubismPhysicsRig = $.CubismPhysicsRig;\n  export const CubismPhysicsSource = $.CubismPhysicsSource;\n  export type CubismPhysicsSource = $.CubismPhysicsSource;\n  export const CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export type CubismPhysicsSubRig = $.CubismPhysicsSubRig;\n  export const CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export type CubismPhysicsTargetType = $.CubismPhysicsTargetType;\n  export const PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;\n  export type normalizedPhysicsParameterValueGetter =\n    $.normalizedPhysicsParameterValueGetter;\n  export type physicsScaleGetter = $.physicsScaleGetter;\n  export type physicsValueGetter = $.physicsValueGetter;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { CubismJson } from '../utils/cubismjson';\n\n// JSON keys\nconst Position = 'Position';\nconst X = 'X';\nconst Y = 'Y';\nconst Angle = 'Angle';\nconst Type = 'Type';\nconst Id = 'Id';\n\n// Meta\nconst Meta = 'Meta';\nconst EffectiveForces = 'EffectiveForces';\nconst TotalInputCount = 'TotalInputCount';\nconst TotalOutputCount = 'TotalOutputCount';\nconst PhysicsSettingCount = 'PhysicsSettingCount';\nconst Gravity = 'Gravity';\nconst Wind = 'Wind';\nconst VertexCount = 'VertexCount';\nconst Fps = 'Fps';\n\n// PhysicsSettings\nconst PhysicsSettings = 'PhysicsSettings';\nconst Normalization = 'Normalization';\nconst Minimum = 'Minimum';\nconst Maximum = 'Maximum';\nconst Default = 'Default';\nconst Reflect = 'Reflect';\nconst Weight = 'Weight';\n\n// Input\nconst Input = 'Input';\nconst Source = 'Source';\n\n// Output\nconst Output = 'Output';\nconst Scale = 'Scale';\nconst VertexIndex = 'VertexIndex';\nconst Destination = 'Destination';\n\n// Particle\nconst Vertices = 'Vertices';\nconst Mobility = 'Mobility';\nconst Delay = 'Delay';\nconst Radius = 'Radius';\nconst Acceleration = 'Acceleration';\n\n/**\n * physics3.jsonのコンテナ。\n */\nexport class CubismPhysicsJson {\n  /**\n   * コンストラクタ\n   * @param buffer physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * 重力の取得\n   * @return 重力\n   */\n  public getGravity(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Gravity)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 風の取得\n   * @return 風\n   */\n  public getWind(): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(EffectiveForces)\n      .getValueByString(Wind)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  /**\n   * 物理演算設定FPSの取得\n   * @return 物理演算設定FPS\n   */\n  public getFps(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(Fps)\n      .toFloat(0.0);\n  }\n\n  /**\n   * 物理店の管理の個数の取得\n   * @return 物理店の管理の個数\n   */\n  public getSubRigCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(PhysicsSettingCount)\n      .toInt();\n  }\n\n  /**\n   * 入力の総合計の取得\n   * @return 入力の総合計\n   */\n  public getTotalInputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalInputCount)\n      .toInt();\n  }\n\n  /**\n   * 出力の総合計の取得\n   * @return 出力の総合計\n   */\n  public getTotalOutputCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalOutputCount)\n      .toInt();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @return 物理点の個数\n   */\n  public getVertexCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(VertexCount)\n      .toInt();\n  }\n\n  /**\n   * 正規化された位置の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最小値\n   */\n  public getNormalizationPositionMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置の最大値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最大値\n   */\n  public getNormalizationPositionMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された位置のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置のデフォルト値\n   */\n  public getNormalizationPositionDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Position)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度の最小値\n   */\n  public getNormalizationAngleMinimumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Minimum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度の最大値の取得\n   * @param physicsSettingIndex\n   * @return 正規化された角度の最大値\n   */\n  public getNormalizationAngleMaximumValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Maximum)\n      .toFloat();\n  }\n\n  /**\n   * 正規化された角度のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度のデフォルト値\n   */\n  public getNormalizationAngleDefaultValue(\n    physicsSettingIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Normalization)\n      .getValueByString(Angle)\n      .getValueByString(Default)\n      .toFloat();\n  }\n\n  /**\n   * 入力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 入力の個数\n   */\n  public getInputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 入力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の重み\n   */\n  public getInputWeight(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 入力の反転の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の反転\n   */\n  public getInputReflect(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 入力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の種類\n   */\n  public getInputType(physicsSettingIndex: number, inputIndex: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Input)\n      .getValueByIndex(inputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 入力元のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力元のID\n   */\n  public getInputSourceId(\n    physicsSettingIndex: number,\n    inputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Input)\n        .getValueByIndex(inputIndex)\n        .getValueByString(Source)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 出力の個数\n   */\n  public getOutputCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 出力の物理点のインデックスの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の物理点のインデックス\n   */\n  public getOutputVertexIndex(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(VertexIndex)\n      .toInt();\n  }\n\n  /**\n   * 出力の角度のスケールを取得する\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の角度のスケール\n   */\n  public getOutputAngleScale(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Scale)\n      .toFloat();\n  }\n\n  /**\n   * 出力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の重み\n   */\n  public getOutputWeight(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Weight)\n      .toFloat();\n  }\n\n  /**\n   * 出力先のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力先のID\n   */\n  public getOutputDestinationId(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(PhysicsSettings)\n        .getValueByIndex(physicsSettingIndex)\n        .getValueByString(Output)\n        .getValueByIndex(outputIndex)\n        .getValueByString(Destination)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * 出力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の種類\n   */\n  public getOutputType(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): string {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Type)\n      .getRawString();\n  }\n\n  /**\n   * 出力の反転の取得\n   * @param physicsSettingIndex 物理演算のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の反転\n   */\n  public getOutputReflect(\n    physicsSettingIndex: number,\n    outputIndex: number\n  ): boolean {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Output)\n      .getValueByIndex(outputIndex)\n      .getValueByString(Reflect)\n      .toBoolean();\n  }\n\n  /**\n   * 物理点の個数の取得\n   * @param physicsSettingIndex 物理演算男設定のインデックス\n   * @return 物理点の個数\n   */\n  public getParticleCount(physicsSettingIndex: number): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getVector()\n      .getSize();\n  }\n\n  /**\n   * 物理点の動きやすさの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の動きやすさ\n   */\n  public getParticleMobility(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Mobility)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の遅れの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の遅れ\n   */\n  public getParticleDelay(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Delay)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の加速度の取得\n   * @param physicsSettingIndex 物理演算の設定\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の加速度\n   */\n  public getParticleAcceleration(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Acceleration)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の距離の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の距離\n   */\n  public getParticleRadius(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): number {\n    return this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Radius)\n      .toFloat();\n  }\n\n  /**\n   * 物理点の位置の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexInde 物理点のインデックス\n   * @return 物理点の位置\n   */\n  public getParticlePosition(\n    physicsSettingIndex: number,\n    vertexIndex: number\n  ): CubismVector2 {\n    const ret: CubismVector2 = new CubismVector2(0, 0);\n    ret.x = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(X)\n      .toFloat();\n    ret.y = this._json\n      .getRoot()\n      .getValueByString(PhysicsSettings)\n      .getValueByIndex(physicsSettingIndex)\n      .getValueByString(Vertices)\n      .getValueByIndex(vertexIndex)\n      .getValueByString(Position)\n      .getValueByString(Y)\n      .toFloat();\n    return ret;\n  }\n\n  _json: CubismJson; // physics3.jsonデータ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysicsjson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysicsJson = $.CubismPhysicsJson;\n  export type CubismPhysicsJson = $.CubismPhysicsJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMath } from '../math/cubismmath';\nimport { CubismVector2 } from '../math/cubismvector2';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModel } from '../model/cubismmodel';\nimport {\n  CubismPhysicsInput,\n  CubismPhysicsNormalization,\n  CubismPhysicsOutput,\n  CubismPhysicsParticle,\n  CubismPhysicsRig,\n  CubismPhysicsSource,\n  CubismPhysicsSubRig,\n  CubismPhysicsTargetType\n} from './cubismphysicsinternal';\nimport { CubismPhysicsJson } from './cubismphysicsjson';\n\n// physics types tags.\nconst PhysicsTypeTagX = 'X';\nconst PhysicsTypeTagY = 'Y';\nconst PhysicsTypeTagAngle = 'Angle';\n\n// Constant of air resistance.\nconst AirResistance = 5.0;\n\n// Constant of maximum weight of input and output ratio.\nconst MaximumWeight = 100.0;\n\n// Constant of threshold of movement.\nconst MovementThreshold = 0.001;\n\n// Constant of maximum allowed delta time\nconst MaxDeltaTime = 5.0;\n\n/**\n * 物理演算クラス\n */\nexport class CubismPhysics {\n  /**\n   * インスタンスの作成\n   * @param buffer    physics3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(buffer: ArrayBuffer, size: number): CubismPhysics {\n    const ret: CubismPhysics = new CubismPhysics();\n\n    ret.parse(buffer, size);\n    ret._physicsRig.gravity.y = 0;\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   * @param physics 破棄するインスタンス\n   */\n  public static delete(physics: CubismPhysics): void {\n    if (physics != null) {\n      physics.release();\n      physics = null;\n    }\n  }\n\n  /**\n   * physics3.jsonをパースする。\n   * @param physicsJson physics3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public parse(physicsJson: ArrayBuffer, size: number): void {\n    this._physicsRig = new CubismPhysicsRig();\n\n    let json: CubismPhysicsJson = new CubismPhysicsJson(physicsJson, size);\n\n    this._physicsRig.gravity = json.getGravity();\n    this._physicsRig.wind = json.getWind();\n    this._physicsRig.subRigCount = json.getSubRigCount();\n\n    this._physicsRig.fps = json.getFps();\n\n    this._physicsRig.settings.updateSize(\n      this._physicsRig.subRigCount,\n      CubismPhysicsSubRig,\n      true\n    );\n    this._physicsRig.inputs.updateSize(\n      json.getTotalInputCount(),\n      CubismPhysicsInput,\n      true\n    );\n    this._physicsRig.outputs.updateSize(\n      json.getTotalOutputCount(),\n      CubismPhysicsOutput,\n      true\n    );\n    this._physicsRig.particles.updateSize(\n      json.getVertexCount(),\n      CubismPhysicsParticle,\n      true\n    );\n\n    this._currentRigOutputs.clear();\n    this._previousRigOutputs.clear();\n\n    let inputIndex = 0,\n      outputIndex = 0,\n      particleIndex = 0;\n\n    for (let i = 0; i < this._physicsRig.settings.getSize(); ++i) {\n      this._physicsRig.settings.at(i).normalizationPosition.minimum =\n        json.getNormalizationPositionMinimumValue(i);\n      this._physicsRig.settings.at(i).normalizationPosition.maximum =\n        json.getNormalizationPositionMaximumValue(i);\n      this._physicsRig.settings.at(i).normalizationPosition.defalut =\n        json.getNormalizationPositionDefaultValue(i);\n\n      this._physicsRig.settings.at(i).normalizationAngle.minimum =\n        json.getNormalizationAngleMinimumValue(i);\n      this._physicsRig.settings.at(i).normalizationAngle.maximum =\n        json.getNormalizationAngleMaximumValue(i);\n      this._physicsRig.settings.at(i).normalizationAngle.defalut =\n        json.getNormalizationAngleDefaultValue(i);\n\n      // Input\n      this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\n      this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\n        this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\n        this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(\n          i,\n          j\n        );\n        this._physicsRig.inputs.at(inputIndex + j).reflect =\n          json.getInputReflect(i, j);\n\n        if (json.getInputType(i, j) == PhysicsTypeTagX) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_X;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputTranslationXFromNormalizedParameterValue;\n        } else if (json.getInputType(i, j) == PhysicsTypeTagY) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Y;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputTranslationYFromNormalizedParamterValue;\n        } else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\n          this._physicsRig.inputs.at(inputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\n          this._physicsRig.inputs.at(\n            inputIndex + j\n          ).getNormalizedParameterValue =\n            getInputAngleFromNormalizedParameterValue;\n        }\n\n        this._physicsRig.inputs.at(inputIndex + j).source.targetType =\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        this._physicsRig.inputs.at(inputIndex + j).source.id =\n          json.getInputSourceId(i, j);\n      }\n      inputIndex += this._physicsRig.settings.at(i).inputCount;\n\n      // Output\n      this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\n      this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\n\n      const currentRigOutput = new PhysicsOutput();\n      currentRigOutput.outputs.resize(\n        this._physicsRig.settings.at(i).outputCount\n      );\n\n      const previousRigOutput = new PhysicsOutput();\n      previousRigOutput.outputs.resize(\n        this._physicsRig.settings.at(i).outputCount\n      );\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\n        // initialize\n        currentRigOutput.outputs.set(j, 0.0);\n        previousRigOutput.outputs.set(j, 0.0);\n\n        this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =\n          -1;\n        this._physicsRig.outputs.at(outputIndex + j).vertexIndex =\n          json.getOutputVertexIndex(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).angleScale =\n          json.getOutputAngleScale(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).weight =\n          json.getOutputWeight(i, j);\n        this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\n          CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n\n        this._physicsRig.outputs.at(outputIndex + j).destination.id =\n          json.getOutputDestinationId(i, j);\n\n        if (json.getOutputType(i, j) == PhysicsTypeTagX) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_X;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputTranslationX;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleTranslationX;\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Y;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputTranslationY;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleTranslationY;\n        } else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\n          this._physicsRig.outputs.at(outputIndex + j).type =\n            CubismPhysicsSource.CubismPhysicsSource_Angle;\n          this._physicsRig.outputs.at(outputIndex + j).getValue =\n            getOutputAngle;\n          this._physicsRig.outputs.at(outputIndex + j).getScale =\n            getOutputScaleAngle;\n        }\n\n        this._physicsRig.outputs.at(outputIndex + j).reflect =\n          json.getOutputReflect(i, j);\n      }\n\n      this._currentRigOutputs.pushBack(currentRigOutput);\n      this._previousRigOutputs.pushBack(previousRigOutput);\n\n      outputIndex += this._physicsRig.settings.at(i).outputCount;\n\n      // Particle\n      this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\n      this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\n\n      for (let j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\n        this._physicsRig.particles.at(particleIndex + j).mobility =\n          json.getParticleMobility(i, j);\n        this._physicsRig.particles.at(particleIndex + j).delay =\n          json.getParticleDelay(i, j);\n        this._physicsRig.particles.at(particleIndex + j).acceleration =\n          json.getParticleAcceleration(i, j);\n        this._physicsRig.particles.at(particleIndex + j).radius =\n          json.getParticleRadius(i, j);\n        this._physicsRig.particles.at(particleIndex + j).position =\n          json.getParticlePosition(i, j);\n      }\n\n      particleIndex += this._physicsRig.settings.at(i).particleCount;\n    }\n\n    this.initialize();\n\n    json.release();\n    json = void 0;\n    json = null;\n  }\n\n  /**\n   * 現在のパラメータ値で物理演算が安定化する状態を演算する。\n   * @param model 物理演算の結果を適用するモデル\n   */\n  public stabilization(model: CubismModel): void {\n    let totalAngle: { angle: number };\n    let weight: number;\n    let radAngle: number;\n    let outputValue: number;\n    const totalTranslation: CubismVector2 = new CubismVector2();\n    let currentSetting: CubismPhysicsSubRig;\n    let currentInputs: CubismPhysicsInput[];\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentParticles: CubismPhysicsParticle[];\n\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n    const parameterDefaultValues: Float32Array =\n      model.getModel().parameters.defaultValues;\n\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n    }\n\n    for (let j = 0; j < model.getParameterCount(); ++j) {\n      this._parameterCaches[j] = parameterValues[j];\n      this._parameterInputCaches[j] = parameterValues[j];\n    }\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      totalAngle = { angle: 0.0 };\n      totalTranslation.x = 0.0;\n      totalTranslation.y = 0.0;\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      currentInputs = this._physicsRig.inputs.get(\n        currentSetting.baseInputIndex\n      );\n      currentOutputs = this._physicsRig.outputs.get(\n        currentSetting.baseOutputIndex\n      );\n      currentParticles = this._physicsRig.particles.get(\n        currentSetting.baseParticleIndex\n      );\n\n      // Load input parameters\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\n        weight = currentInputs[i].weight / MaximumWeight;\n\n        if (currentInputs[i].sourceParameterIndex == -1) {\n          currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n            currentInputs[i].source.id\n          );\n        }\n\n        currentInputs[i].getNormalizedParameterValue(\n          totalTranslation,\n          totalAngle,\n          parameterValues[currentInputs[i].sourceParameterIndex],\n          parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n          parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n          parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n          currentSetting.normalizationPosition,\n          currentSetting.normalizationAngle,\n          currentInputs[i].reflect,\n          weight\n        );\n\n        this._parameterCaches[currentInputs[i].sourceParameterIndex] =\n          parameterValues[currentInputs[i].sourceParameterIndex];\n      }\n\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n\n      totalTranslation.x =\n        totalTranslation.x * CubismMath.cos(radAngle) -\n        totalTranslation.y * CubismMath.sin(radAngle);\n      totalTranslation.y =\n        totalTranslation.x * CubismMath.sin(radAngle) +\n        totalTranslation.y * CubismMath.cos(radAngle);\n\n      // Calculate particles position.\n      updateParticlesForStabilization(\n        currentParticles,\n        currentSetting.particleCount,\n        totalTranslation,\n        totalAngle.angle,\n        this._options.wind,\n        MovementThreshold * currentSetting.normalizationPosition.maximum\n      );\n\n      // Update output parameters.\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        const particleIndex = currentOutputs[i].vertexIndex;\n\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          currentOutputs[i].destinationParameterIndex = model.getParameterIndex(\n            currentOutputs[i].destination.id\n          );\n        }\n\n        if (\n          particleIndex < 1 ||\n          particleIndex >= currentSetting.particleCount\n        ) {\n          continue;\n        }\n\n        let translation: CubismVector2 = new CubismVector2();\n        translation = currentParticles[particleIndex].position.substract(\n          currentParticles[particleIndex - 1].position\n        );\n\n        outputValue = currentOutputs[i].getValue(\n          translation,\n          currentParticles,\n          particleIndex,\n          currentOutputs[i].reflect,\n          this._options.gravity\n        );\n\n        this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n        this._previousRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n\n        const destinationParameterIndex: number =\n          currentOutputs[i].destinationParameterIndex;\n\n        const outParameterCaches: Float32Array =\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\n            ? JSON.parse(\n                JSON.stringify(\n                  parameterValues.subarray(destinationParameterIndex)\n                )\n              ) // 値渡しするため、JSON.parse, JSON.stringify\n            : parameterValues.slice(destinationParameterIndex);\n\n        updateOutputParameterValue(\n          outParameterCaches,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          outputValue,\n          currentOutputs[i]\n        );\n\n        // 値を反映\n        for (\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\n          offset < this._parameterCaches.length;\n          offset++, outParamIndex++\n        ) {\n          parameterValues[offset] = this._parameterCaches[offset] =\n            outParameterCaches[outParamIndex];\n        }\n      }\n    }\n  }\n\n  /**\n   * 物理演算の評価\n   *\n   * Pendulum interpolation weights\n   *\n   * 振り子の計算結果は保存され、パラメータへの出力は保存された前回の結果で補間されます。\n   * The result of the pendulum calculation is saved and\n   * the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\n   *\n   * 図で示すと[1]と[2]で補間されます。\n   * The figure shows the interpolation between [1] and [2].\n   *\n   * 補間の重みは最新の振り子計算タイミングと次回のタイミングの間で見た現在時間で決定する。\n   * The weight of the interpolation are determined by the current time seen between\n   * the latest pendulum calculation timing and the next timing.\n   *\n   * 図で示すと[2]と[4]の間でみた(3)の位置の重みになる。\n   * Figure shows the weight of position (3) as seen between [2] and [4].\n   *\n   * 解釈として振り子計算のタイミングと重み計算のタイミングがズレる。\n   * As an interpretation, the pendulum calculation and weights are misaligned.\n   *\n   * physics3.jsonにFPS情報が存在しない場合は常に前の振り子状態で設定される。\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\n   *\n   * この仕様は補間範囲を逸脱したことが原因の震えたような見た目を回避を目的にしている。\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\n   *\n   * ------------ time -------------->\n   *\n   *                 |+++++|------| <- weight\n   * ==[1]====#=====[2]---(3)----(4)\n   *          ^ output contents\n   *\n   * 1:_previousRigOutputs\n   * 2:_currentRigOutputs\n   * 3:_currentRemainTime (now rendering)\n   * 4:next particles timing\n   * @param model 物理演算の結果を適用するモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  public evaluate(model: CubismModel, deltaTimeSeconds: number): void {\n    let totalAngle: { angle: number };\n    let weight: number;\n    let radAngle: number;\n    let outputValue: number;\n    const totalTranslation: CubismVector2 = new CubismVector2();\n    let currentSetting: CubismPhysicsSubRig;\n    let currentInputs: CubismPhysicsInput[];\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentParticles: CubismPhysicsParticle[];\n\n    if (0.0 >= deltaTimeSeconds) {\n      return;\n    }\n\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n    const parameterDefaultValues: Float32Array =\n      model.getModel().parameters.defaultValues;\n\n    let physicsDeltaTime: number;\n    this._currentRemainTime += deltaTimeSeconds;\n    if (this._currentRemainTime > MaxDeltaTime) {\n      this._currentRemainTime = 0.0;\n    }\n\n    if ((this._parameterCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n\n    if ((this._parameterInputCaches?.length ?? 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterInputCaches[j] = parameterValues[j];\n      }\n    }\n\n    if (this._physicsRig.fps > 0.0) {\n      physicsDeltaTime = 1.0 / this._physicsRig.fps;\n    } else {\n      physicsDeltaTime = deltaTimeSeconds;\n    }\n\n    while (this._currentRemainTime >= physicsDeltaTime) {\n      // copyRigOutputs _currentRigOutputs to _previousRigOutputs\n      for (\n        let settingIndex = 0;\n        settingIndex < this._physicsRig.subRigCount;\n        ++settingIndex\n      ) {\n        currentSetting = this._physicsRig.settings.at(settingIndex);\n        currentOutputs = this._physicsRig.outputs.get(\n          currentSetting.baseOutputIndex\n        );\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          this._previousRigOutputs\n            .at(settingIndex)\n            .outputs.set(\n              i,\n              this._currentRigOutputs.at(settingIndex).outputs.at(i)\n            );\n        }\n      }\n\n      // 入力キャッシュとパラメータで線形補間してUpdateParticlesするタイミングでの入力を計算する。\n      // Calculate the input at the timing to UpdateParticles by linear interpolation with the _parameterInputCache and parameterValue.\n      // _parameterCacheはグループ間での値の伝搬の役割があるので_parameterInputCacheとの分離が必要。\n      // _parameterCache needs to be separated from _parameterInputCache because of its role in propagating values between groups.\n      const inputWeight = physicsDeltaTime / this._currentRemainTime;\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterCaches[j] =\n          this._parameterInputCaches[j] * (1.0 - inputWeight) +\n          parameterValues[j] * inputWeight;\n        this._parameterInputCaches[j] = this._parameterCaches[j];\n      }\n\n      for (\n        let settingIndex = 0;\n        settingIndex < this._physicsRig.subRigCount;\n        ++settingIndex\n      ) {\n        totalAngle = { angle: 0.0 };\n        totalTranslation.x = 0.0;\n        totalTranslation.y = 0.0;\n        currentSetting = this._physicsRig.settings.at(settingIndex);\n        currentInputs = this._physicsRig.inputs.get(\n          currentSetting.baseInputIndex\n        );\n        currentOutputs = this._physicsRig.outputs.get(\n          currentSetting.baseOutputIndex\n        );\n        currentParticles = this._physicsRig.particles.get(\n          currentSetting.baseParticleIndex\n        );\n\n        // Load input parameters\n        for (let i = 0; i < currentSetting.inputCount; ++i) {\n          weight = currentInputs[i].weight / MaximumWeight;\n\n          if (currentInputs[i].sourceParameterIndex == -1) {\n            currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n              currentInputs[i].source.id\n            );\n          }\n\n          currentInputs[i].getNormalizedParameterValue(\n            totalTranslation,\n            totalAngle,\n            this._parameterCaches[currentInputs[i].sourceParameterIndex],\n            parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n            parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n            parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n            currentSetting.normalizationPosition,\n            currentSetting.normalizationAngle,\n            currentInputs[i].reflect,\n            weight\n          );\n        }\n\n        radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n\n        totalTranslation.x =\n          totalTranslation.x * CubismMath.cos(radAngle) -\n          totalTranslation.y * CubismMath.sin(radAngle);\n        totalTranslation.y =\n          totalTranslation.x * CubismMath.sin(radAngle) +\n          totalTranslation.y * CubismMath.cos(radAngle);\n\n        // Calculate particles position.\n        updateParticles(\n          currentParticles,\n          currentSetting.particleCount,\n          totalTranslation,\n          totalAngle.angle,\n          this._options.wind,\n          MovementThreshold * currentSetting.normalizationPosition.maximum,\n          physicsDeltaTime,\n          AirResistance\n        );\n\n        // Update output parameters.\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          const particleIndex = currentOutputs[i].vertexIndex;\n\n          if (currentOutputs[i].destinationParameterIndex == -1) {\n            currentOutputs[i].destinationParameterIndex =\n              model.getParameterIndex(currentOutputs[i].destination.id);\n          }\n\n          if (\n            particleIndex < 1 ||\n            particleIndex >= currentSetting.particleCount\n          ) {\n            continue;\n          }\n\n          const translation: CubismVector2 = new CubismVector2();\n          translation.x =\n            currentParticles[particleIndex].position.x -\n            currentParticles[particleIndex - 1].position.x;\n          translation.y =\n            currentParticles[particleIndex].position.y -\n            currentParticles[particleIndex - 1].position.y;\n\n          outputValue = currentOutputs[i].getValue(\n            translation,\n            currentParticles,\n            particleIndex,\n            currentOutputs[i].reflect,\n            this._options.gravity\n          );\n\n          this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);\n\n          const destinationParameterIndex: number =\n            currentOutputs[i].destinationParameterIndex;\n          const outParameterCaches: Float32Array =\n            !Float32Array.prototype.slice &&\n            'subarray' in Float32Array.prototype\n              ? JSON.parse(\n                  JSON.stringify(\n                    this._parameterCaches.subarray(destinationParameterIndex)\n                  )\n                ) // 値渡しするため、JSON.parse, JSON.stringify\n              : this._parameterCaches.slice(destinationParameterIndex);\n\n          updateOutputParameterValue(\n            outParameterCaches,\n            parameterMinimumValues[destinationParameterIndex],\n            parameterMaximumValues[destinationParameterIndex],\n            outputValue,\n            currentOutputs[i]\n          );\n\n          // 値を反映\n          for (\n            let offset: number = destinationParameterIndex, outParamIndex = 0;\n            offset < this._parameterCaches.length;\n            offset++, outParamIndex++\n          ) {\n            this._parameterCaches[offset] = outParameterCaches[outParamIndex];\n          }\n        }\n      }\n      this._currentRemainTime -= physicsDeltaTime;\n    }\n\n    const alpha: number = this._currentRemainTime / physicsDeltaTime;\n    this.interpolate(model, alpha);\n  }\n\n  /**\n   * 物理演算結果の適用\n   * 振り子演算の最新の結果と一つ前の結果から指定した重みで適用する。\n   * @param model 物理演算の結果を適用するモデル\n   * @param weight 最新結果の重み\n   */\n  public interpolate(model: CubismModel, weight: number): void {\n    let currentOutputs: CubismPhysicsOutput[];\n    let currentSetting: CubismPhysicsSubRig;\n    const parameterValues: Float32Array = model.getModel().parameters.values;\n    const parameterMaximumValues: Float32Array =\n      model.getModel().parameters.maximumValues;\n    const parameterMinimumValues: Float32Array =\n      model.getModel().parameters.minimumValues;\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      currentOutputs = this._physicsRig.outputs.get(\n        currentSetting.baseOutputIndex\n      );\n\n      // Load input parameters.\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          continue;\n        }\n\n        const destinationParameterIndex: number =\n          currentOutputs[i].destinationParameterIndex;\n        const outParameterValues: Float32Array =\n          !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype\n            ? JSON.parse(\n                JSON.stringify(\n                  parameterValues.subarray(destinationParameterIndex)\n                )\n              ) // 値渡しするため、JSON.parse, JSON.stringify\n            : parameterValues.slice(destinationParameterIndex);\n\n        updateOutputParameterValue(\n          outParameterValues,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          this._previousRigOutputs.at(settingIndex).outputs.at(i) *\n            (1 - weight) +\n            this._currentRigOutputs.at(settingIndex).outputs.at(i) * weight,\n          currentOutputs[i]\n        );\n\n        // 値を反映\n        for (\n          let offset: number = destinationParameterIndex, outParamIndex = 0;\n          offset < parameterValues.length;\n          offset++, outParamIndex++\n        ) {\n          parameterValues[offset] = outParameterValues[outParamIndex];\n        }\n      }\n    }\n  }\n\n  /**\n   * オプションの設定\n   * @param options オプション\n   */\n  public setOptions(options: Options): void {\n    this._options = options;\n  }\n\n  /**\n   * オプションの取得\n   * @return オプション\n   */\n  public getOption(): Options {\n    return this._options;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._physicsRig = null;\n\n    // set default options\n    this._options = new Options();\n    this._options.gravity.y = -1.0;\n    this._options.gravity.x = 0.0;\n    this._options.wind.x = 0.0;\n    this._options.wind.y = 0.0;\n    this._currentRigOutputs = new csmVector<PhysicsOutput>();\n    this._previousRigOutputs = new csmVector<PhysicsOutput>();\n    this._currentRemainTime = 0.0;\n    this._parameterCaches = null;\n    this._parameterInputCaches = null;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._physicsRig = void 0;\n    this._physicsRig = null;\n  }\n\n  /**\n   * 初期化する\n   */\n  public initialize(): void {\n    let strand: CubismPhysicsParticle[];\n    let currentSetting: CubismPhysicsSubRig;\n    let radius: CubismVector2;\n\n    for (\n      let settingIndex = 0;\n      settingIndex < this._physicsRig.subRigCount;\n      ++settingIndex\n    ) {\n      currentSetting = this._physicsRig.settings.at(settingIndex);\n      strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\n\n      // Initialize the top of particle.\n      strand[0].initialPosition = new CubismVector2(0.0, 0.0);\n      strand[0].lastPosition = new CubismVector2(\n        strand[0].initialPosition.x,\n        strand[0].initialPosition.y\n      );\n      strand[0].lastGravity = new CubismVector2(0.0, -1.0);\n      strand[0].lastGravity.y *= -1.0;\n      strand[0].velocity = new CubismVector2(0.0, 0.0);\n      strand[0].force = new CubismVector2(0.0, 0.0);\n\n      // Initialize particles.\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\n        radius = new CubismVector2(0.0, 0.0);\n        radius.y = strand[i].radius;\n        strand[i].initialPosition = new CubismVector2(\n          strand[i - 1].initialPosition.x + radius.x,\n          strand[i - 1].initialPosition.y + radius.y\n        );\n        strand[i].position = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastPosition = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastGravity = new CubismVector2(0.0, -1.0);\n        strand[i].lastGravity.y *= -1.0;\n        strand[i].velocity = new CubismVector2(0.0, 0.0);\n        strand[i].force = new CubismVector2(0.0, 0.0);\n      }\n    }\n  }\n\n  _physicsRig: CubismPhysicsRig; // 物理演算のデータ\n  _options: Options; // オプション\n\n  _currentRigOutputs: csmVector<PhysicsOutput>; ///< 最新の振り子計算の結果\n  _previousRigOutputs: csmVector<PhysicsOutput>; ///< 一つ前の振り子計算の結果\n\n  _currentRemainTime: number; ///< 物理演算が処理していない時間\n\n  _parameterCaches: Float32Array; ///< Evaluateで利用するパラメータのキャッシュ\n  _parameterInputCaches: Float32Array; ///< UpdateParticlesが動くときの入力をキャッシュ\n}\n\n/**\n * 物理演算のオプション\n */\nexport class Options {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n\n  gravity: CubismVector2; // 重力方向\n  wind: CubismVector2; // 風の方向\n}\n\n/**\n * パラメータに適用する前の物理演算の出力結果\n */\nexport class PhysicsOutput {\n  constructor() {\n    this.outputs = new csmVector<number>(0);\n  }\n\n  outputs: csmVector<number>; // 物理演算出力結果\n}\n\n/**\n * Gets sign.\n *\n * @param value Evaluation target value.\n *\n * @return Sign of value.\n */\nfunction sign(value: number): number {\n  let ret = 0;\n\n  if (value > 0.0) {\n    ret = 1;\n  } else if (value < 0.0) {\n    ret = -1;\n  }\n\n  return ret;\n}\n\nfunction getInputTranslationXFromNormalizedParameterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizationPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetTranslation.x +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationPosition.minimum,\n      normalizationPosition.maximum,\n      normalizationPosition.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getInputTranslationYFromNormalizedParamterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizationPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetTranslation.y +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationPosition.minimum,\n      normalizationPosition.maximum,\n      normalizationPosition.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getInputAngleFromNormalizedParameterValue(\n  targetTranslation: CubismVector2,\n  targetAngle: { angle: number },\n  value: number,\n  parameterMinimumValue: number,\n  parameterMaximumValue: number,\n  parameterDefaultValue: number,\n  normalizaitionPosition: CubismPhysicsNormalization,\n  normalizationAngle: CubismPhysicsNormalization,\n  isInverted: boolean,\n  weight: number\n): void {\n  targetAngle.angle +=\n    normalizeParameterValue(\n      value,\n      parameterMinimumValue,\n      parameterMaximumValue,\n      parameterDefaultValue,\n      normalizationAngle.minimum,\n      normalizationAngle.maximum,\n      normalizationAngle.defalut,\n      isInverted\n    ) * weight;\n}\n\nfunction getOutputTranslationX(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number = translation.x;\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n\n  return outputValue;\n}\n\nfunction getOutputTranslationY(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number = translation.y;\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n  return outputValue;\n}\n\nfunction getOutputAngle(\n  translation: CubismVector2,\n  particles: CubismPhysicsParticle[],\n  particleIndex: number,\n  isInverted: boolean,\n  parentGravity: CubismVector2\n): number {\n  let outputValue: number;\n\n  if (particleIndex >= 2) {\n    parentGravity = particles[particleIndex - 1].position.substract(\n      particles[particleIndex - 2].position\n    );\n  } else {\n    parentGravity = parentGravity.multiplyByScaler(-1.0);\n  }\n\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\n\n  if (isInverted) {\n    outputValue *= -1.0;\n  }\n\n  return outputValue;\n}\n\nfunction getRangeValue(min: number, max: number): number {\n  const maxValue: number = CubismMath.max(min, max);\n  const minValue: number = CubismMath.min(min, max);\n\n  return CubismMath.abs(maxValue - minValue);\n}\n\nfunction getDefaultValue(min: number, max: number): number {\n  const minValue: number = CubismMath.min(min, max);\n  return minValue + getRangeValue(min, max) / 2.0;\n}\n\nfunction getOutputScaleTranslationX(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(translationScale.x));\n}\n\nfunction getOutputScaleTranslationY(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(translationScale.y));\n}\n\nfunction getOutputScaleAngle(\n  translationScale: CubismVector2,\n  angleScale: number\n): number {\n  return JSON.parse(JSON.stringify(angleScale));\n}\n\n/**\n * Updates particles.\n *\n * @param strand                Target array of particle.\n * @param strandCount           Count of particle.\n * @param totalTranslation      Total translation value.\n * @param totalAngle            Total angle.\n * @param windDirection         Direction of Wind.\n * @param thresholdValue        Threshold of movement.\n * @param deltaTimeSeconds      Delta time.\n * @param airResistance         Air resistance.\n */\nfunction updateParticles(\n  strand: CubismPhysicsParticle[],\n  strandCount: number,\n  totalTranslation: CubismVector2,\n  totalAngle: number,\n  windDirection: CubismVector2,\n  thresholdValue: number,\n  deltaTimeSeconds: number,\n  airResistance: number\n) {\n  let delay: number;\n  let radian: number;\n  let direction: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let velocity: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\n  let newDirection: CubismVector2 = new CubismVector2(0.0, 0.0);\n\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\n  const currentGravity: CubismVector2 =\n    CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity\n      .multiplyByScaler(strand[i].acceleration)\n      .add(windDirection);\n\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n\n    delay = strand[i].delay * deltaTimeSeconds * 30.0;\n\n    direction = strand[i].position.substract(strand[i - 1].position);\n\n    radian =\n      CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\n      airResistance;\n\n    direction.x =\n      CubismMath.cos(radian) * direction.x -\n      direction.y * CubismMath.sin(radian);\n    direction.y =\n      CubismMath.sin(radian) * direction.x +\n      direction.y * CubismMath.cos(radian);\n\n    strand[i].position = strand[i - 1].position.add(direction);\n\n    velocity = strand[i].velocity.multiplyByScaler(delay);\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\n\n    strand[i].position = strand[i].position.add(velocity).add(force);\n\n    newDirection = strand[i].position.substract(strand[i - 1].position);\n    newDirection.normalize();\n\n    strand[i].position = strand[i - 1].position.add(\n      newDirection.multiplyByScaler(strand[i].radius)\n    );\n\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0.0;\n    }\n\n    if (delay != 0.0) {\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(\n        strand[i].mobility\n      );\n    }\n\n    strand[i].force = new CubismVector2(0.0, 0.0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\n\n/**\n * Updates particles for stabilization.\n *\n * @param strand                Target array of particle.\n * @param strandCount           Count of particle.\n * @param totalTranslation      Total translation value.\n * @param totalAngle            Total angle.\n * @param windDirection         Direction of Wind.\n * @param thresholdValue        Threshold of movement.\n */\nfunction updateParticlesForStabilization(\n  strand: CubismPhysicsParticle[],\n  strandCount: number,\n  totalTranslation: CubismVector2,\n  totalAngle: number,\n  windDirection: CubismVector2,\n  thresholdValue: number\n) {\n  let force: CubismVector2 = new CubismVector2(0.0, 0.0);\n\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n\n  const totalRadian: number = CubismMath.degreesToRadian(totalAngle);\n  const currentGravity: CubismVector2 =\n    CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity\n      .multiplyByScaler(strand[i].acceleration)\n      .add(windDirection);\n\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n\n    strand[i].velocity = new CubismVector2(0.0, 0.0);\n    force = strand[i].force;\n    force.normalize();\n\n    force = force.multiplyByScaler(strand[i].radius);\n    strand[i].position = strand[i - 1].position.add(force);\n\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0.0;\n    }\n\n    strand[i].force = new CubismVector2(0.0, 0.0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\n\n/**\n * Updates output parameter value.\n * @param parameterValue            Target parameter value.\n * @param parameterValueMinimum     Minimum of parameter value.\n * @param parameterValueMaximum     Maximum of parameter value.\n * @param translation               Translation value.\n */\nfunction updateOutputParameterValue(\n  parameterValue: Float32Array,\n  parameterValueMinimum: number,\n  parameterValueMaximum: number,\n  translation: number,\n  output: CubismPhysicsOutput\n): void {\n  let value: number;\n  const outputScale: number = output.getScale(\n    output.translationScale,\n    output.angleScale\n  );\n\n  value = translation * outputScale;\n\n  if (value < parameterValueMinimum) {\n    if (value < output.valueBelowMinimum) {\n      output.valueBelowMinimum = value;\n    }\n\n    value = parameterValueMinimum;\n  } else if (value > parameterValueMaximum) {\n    if (value > output.valueExceededMaximum) {\n      output.valueExceededMaximum = value;\n    }\n\n    value = parameterValueMaximum;\n  }\n\n  const weight: number = output.weight / MaximumWeight;\n\n  if (weight >= 1.0) {\n    parameterValue[0] = value;\n  } else {\n    value = parameterValue[0] * (1.0 - weight) + value * weight;\n    parameterValue[0] = value;\n  }\n}\n\nfunction normalizeParameterValue(\n  value: number,\n  parameterMinimum: number,\n  parameterMaximum: number,\n  parameterDefault: number,\n  normalizedMinimum: number,\n  normalizedMaximum: number,\n  normalizedDefault: number,\n  isInverted: boolean\n) {\n  let result = 0.0;\n\n  const maxValue: number = CubismMath.max(parameterMaximum, parameterMinimum);\n\n  if (maxValue < value) {\n    value = maxValue;\n  }\n\n  const minValue: number = CubismMath.min(parameterMaximum, parameterMinimum);\n\n  if (minValue > value) {\n    value = minValue;\n  }\n\n  const minNormValue: number = CubismMath.min(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const maxNormValue: number = CubismMath.max(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const middleNormValue: number = normalizedDefault;\n\n  const middleValue: number = getDefaultValue(minValue, maxValue);\n  const paramValue: number = value - middleValue;\n\n  switch (sign(paramValue)) {\n    case 1: {\n      const nLength: number = maxNormValue - middleNormValue;\n      const pLength: number = maxValue - middleValue;\n\n      if (pLength != 0.0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n\n      break;\n    }\n    case -1: {\n      const nLength: number = minNormValue - middleNormValue;\n      const pLength: number = minValue - middleValue;\n\n      if (pLength != 0.0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n\n      break;\n    }\n    case 0: {\n      result = middleNormValue;\n\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  return isInverted ? result : result * -1.0;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismphysics';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismPhysics = $.CubismPhysics;\n  export type CubismPhysics = $.CubismPhysics;\n  export const Options = $.Options;\n  export type Options = $.Options;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { Constant } from '../live2dcubismframework';\nimport { csmVector } from '../type/csmvector';\nimport { csmRect } from '../type/csmrectf';\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\nimport { CubismClippingContext, CubismTextureColor } from './cubismrenderer';\nimport { CubismLogError, CubismLogWarning } from '../utils/cubismdebug';\n\nconst ColorChannelCount = 4; // 実験時に1チャンネルの場合は1、RGBだけの場合は3、アルファも含める場合は4\nconst ClippingMaskMaxCountOnDefault = 36; // 通常のフレームバッファ一枚あたりのマスク最大数\nconst ClippingMaskMaxCountOnMultiRenderTexture = 32; // フレームバッファが2枚以上ある場合のフレームバッファ一枚あたりのマスク最大数\n\nexport type ClippingContextConstructor<\n  T_ClippingContext extends CubismClippingContext\n> = new (\n  manager: CubismClippingManager<T_ClippingContext>,\n  drawableMasks: Int32Array,\n  drawableMaskCounts: number\n) => T_ClippingContext;\n\nexport interface ICubismClippingManager {\n  getClippingMaskBufferSize(): number;\n}\n\nexport abstract class CubismClippingManager<\n  T_ClippingContext extends CubismClippingContext\n> implements ICubismClippingManager\n{\n  /**\n   * コンストラクタ\n   */\n  public constructor(\n    clippingContextFactory: ClippingContextConstructor<T_ClippingContext>\n  ) {\n    this._renderTextureCount = 0;\n    this._clippingMaskBufferSize = 256;\n    this._clippingContextListForMask = new csmVector<T_ClippingContext>();\n    this._clippingContextListForDraw = new csmVector<T_ClippingContext>();\n    this._channelColors = new csmVector<CubismTextureColor>();\n    this._tmpBoundsOnModel = new csmRect();\n    this._tmpMatrix = new CubismMatrix44();\n    this._tmpMatrixForMask = new CubismMatrix44();\n    this._tmpMatrixForDraw = new CubismMatrix44();\n\n    this._clippingContexttConstructor = clippingContextFactory;\n\n    let tmp: CubismTextureColor = new CubismTextureColor();\n    tmp.r = 1.0;\n    tmp.g = 0.0;\n    tmp.b = 0.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 1.0;\n    tmp.b = 0.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 0.0;\n    tmp.b = 1.0;\n    tmp.a = 0.0;\n    this._channelColors.pushBack(tmp);\n\n    tmp = new CubismTextureColor();\n    tmp.r = 0.0;\n    tmp.g = 0.0;\n    tmp.b = 0.0;\n    tmp.a = 1.0;\n    this._channelColors.pushBack(tmp);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n      if (this._clippingContextListForMask.at(i)) {\n        this._clippingContextListForMask.at(i).release();\n        this._clippingContextListForMask.set(i, void 0);\n      }\n      this._clippingContextListForMask.set(i, null);\n    }\n    this._clippingContextListForMask = null;\n\n    // _clippingContextListForDrawは_clippingContextListForMaskにあるインスタンスを指している。上記の処理により要素ごとのDELETEは不要。\n    for (let i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\n      this._clippingContextListForDraw.set(i, null);\n    }\n    this._clippingContextListForDraw = null;\n\n    for (let i = 0; i < this._channelColors.getSize(); i++) {\n      this._channelColors.set(i, null);\n    }\n\n    this._channelColors = null;\n\n    if (this._clearedFrameBufferFlags != null) {\n      this._clearedFrameBufferFlags.clear();\n    }\n    this._clearedFrameBufferFlags = null;\n  }\n\n  /**\n   * マネージャの初期化処理\n   * クリッピングマスクを使う描画オブジェクトの登録を行う\n   * @param model モデルのインスタンス\n   * @param renderTextureCount バッファの生成数\n   */\n  public initialize(model: CubismModel, renderTextureCount: number): void {\n    // レンダーテクスチャの合計枚数の設定\n    // 1以上の整数でない場合はそれぞれ警告を出す\n    if (renderTextureCount % 1 != 0) {\n      CubismLogWarning(\n        'The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.'\n      );\n      // 小数点以下を除去\n      renderTextureCount = ~~renderTextureCount;\n    }\n    if (renderTextureCount < 1) {\n      CubismLogWarning(\n        'The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.'\n      );\n    }\n    // 負の値が使われている場合は強制的に1枚と設定する\n    this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;\n\n    this._clearedFrameBufferFlags = new csmVector<boolean>(\n      this._renderTextureCount\n    );\n\n    // クリッピングマスクを使う描画オブジェクトをすべて登録する\n    // クリッピングマスクは、通常数個程度に限定して使うものとする\n    for (let i = 0; i < model.getDrawableCount(); i++) {\n      if (model.getDrawableMaskCounts()[i] <= 0) {\n        // クリッピングマスクが使用されていないアートメッシュ（多くの場合使用しない）\n        this._clippingContextListForDraw.pushBack(null);\n        continue;\n      }\n\n      // 既にあるClipContextと同じかチェックする\n      let clippingContext: T_ClippingContext = this.findSameClip(\n        model.getDrawableMasks()[i],\n        model.getDrawableMaskCounts()[i]\n      );\n      if (clippingContext == null) {\n        // 同一のマスクが存在していない場合は生成する\n\n        clippingContext = new this._clippingContexttConstructor(\n          this,\n          model.getDrawableMasks()[i],\n          model.getDrawableMaskCounts()[i]\n        );\n        this._clippingContextListForMask.pushBack(clippingContext);\n      }\n\n      clippingContext.addClippedDrawable(i);\n\n      this._clippingContextListForDraw.pushBack(clippingContext);\n    }\n  }\n\n  /**\n   * 既にマスクを作っているかを確認\n   * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\n   * 作っていなければNULLを返す\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\n   * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\n   */\n  public findSameClip(\n    drawableMasks: Int32Array,\n    drawableMaskCounts: number\n  ): T_ClippingContext {\n    // 作成済みClippingContextと一致するか確認\n    for (let i = 0; i < this._clippingContextListForMask.getSize(); i++) {\n      const clippingContext: T_ClippingContext =\n        this._clippingContextListForMask.at(i);\n      const count: number = clippingContext._clippingIdCount;\n\n      // 個数が違う場合は別物\n      if (count != drawableMaskCounts) {\n        continue;\n      }\n\n      let sameCount = 0;\n\n      // 同じIDを持つか確認。配列の数が同じなので、一致した個数が同じなら同じ物を持つとする\n      for (let j = 0; j < count; j++) {\n        const clipId: number = clippingContext._clippingIdList[j];\n\n        for (let k = 0; k < count; k++) {\n          if (drawableMasks[k] == clipId) {\n            sameCount++;\n            break;\n          }\n        }\n      }\n\n      if (sameCount == count) {\n        return clippingContext;\n      }\n    }\n\n    return null; // 見つからなかった\n  }\n\n  /**\n   * 高精細マスク処理用の行列を計算する\n   * @param model モデルのインスタンス\n   * @param isRightHanded 処理が右手系であるか\n   */\n  public setupMatrixForHighPrecision(\n    model: CubismModel,\n    isRightHanded: boolean\n  ): void {\n    // 全てのクリッピングを用意する\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\n    let usingClipCount = 0;\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // １つのクリッピングマスクに関して\n      const cc: T_ClippingContext =\n        this._clippingContextListForMask.at(clipIndex);\n\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n      this.calcClippedDrawTotalBounds(model, cc);\n\n      if (cc._isUsing) {\n        usingClipCount++; // 使用中としてカウント\n      }\n    }\n\n    // マスク行列作成処理\n    if (usingClipCount > 0) {\n      this.setupLayoutBounds(0);\n\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\n      if (this._clearedFrameBufferFlags.getSize() != this._renderTextureCount) {\n        this._clearedFrameBufferFlags.clear();\n        for (let i = 0; i < this._renderTextureCount; i++) {\n          this._clearedFrameBufferFlags.pushBack(false);\n        }\n      } else {\n        // マスクのクリアフラグを毎フレーム開始時に初期化\n        for (let i = 0; i < this._renderTextureCount; i++) {\n          this._clearedFrameBufferFlags.set(i, false);\n        }\n      }\n\n      // 実際にマスクを生成する\n      // 全てのマスクをどの様にレイアウトして描くかを決定し、ClipContext , ClippedDrawContext に記憶する\n      for (\n        let clipIndex = 0;\n        clipIndex < this._clippingContextListForMask.getSize();\n        clipIndex++\n      ) {\n        // --- 実際に１つのマスクを描く ---\n        const clipContext: T_ClippingContext =\n          this._clippingContextListForMask.at(clipIndex);\n        const allClippedDrawRect: csmRect = clipContext._allClippedDrawRect; //このマスクを使う、全ての描画オブジェクトの論理座標上の囲み矩形\n        const layoutBoundsOnTex01 = clipContext._layoutBounds; //この中にマスクを収める\n        const margin = 0.05;\n        let scaleX = 0.0;\n        let scaleY = 0.0;\n        const ppu: number = model.getPixelsPerUnit();\n        const maskPixelSize: number = clipContext\n          .getClippingManager()\n          .getClippingMaskBufferSize();\n        const physicalMaskWidth: number =\n          layoutBoundsOnTex01.width * maskPixelSize;\n        const physicalMaskHeight: number =\n          layoutBoundsOnTex01.height * maskPixelSize;\n\n        this._tmpBoundsOnModel.setRect(allClippedDrawRect);\n        if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\n          this._tmpBoundsOnModel.expand(allClippedDrawRect.width * margin, 0.0);\n          scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n        } else {\n          scaleX = ppu / physicalMaskWidth;\n        }\n\n        if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\n          this._tmpBoundsOnModel.expand(\n            0.0,\n            allClippedDrawRect.height * margin\n          );\n          scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n        } else {\n          scaleY = ppu / physicalMaskHeight;\n        }\n\n        // マスク生成時に使う行列を求める\n        this.createMatrixForMask(\n          isRightHanded,\n          layoutBoundsOnTex01,\n          scaleX,\n          scaleY\n        );\n\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n      }\n    }\n  }\n\n  /**\n   * マスク作成・描画用の行列を作成する。\n   * @param isRightHanded 座標を右手系として扱うかを指定\n   * @param layoutBoundsOnTex01 マスクを収める領域\n   * @param scaleX 描画オブジェクトの伸縮率\n   * @param scaleY 描画オブジェクトの伸縮率\n   */\n  public createMatrixForMask(\n    isRightHanded: boolean,\n    layoutBoundsOnTex01: csmRect,\n    scaleX: number,\n    scaleY: number\n  ): void {\n    this._tmpMatrix.loadIdentity();\n    {\n      // Layout0..1 を -1..1に変換\n      this._tmpMatrix.translateRelative(-1.0, -1.0);\n      this._tmpMatrix.scaleRelative(2.0, 2.0);\n    }\n    {\n      // view to Layout0..1\n      this._tmpMatrix.translateRelative(\n        layoutBoundsOnTex01.x,\n        layoutBoundsOnTex01.y\n      ); //new = [translate]\n      this._tmpMatrix.scaleRelative(scaleX, scaleY); //new = [translate][scale]\n      this._tmpMatrix.translateRelative(\n        -this._tmpBoundsOnModel.x,\n        -this._tmpBoundsOnModel.y\n      ); //new = [translate][scale][translate]\n    }\n    // tmpMatrixForMask が計算結果\n    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n\n    this._tmpMatrix.loadIdentity();\n    {\n      this._tmpMatrix.translateRelative(\n        layoutBoundsOnTex01.x,\n        layoutBoundsOnTex01.y * (isRightHanded ? -1.0 : 1.0)\n      ); //new = [translate]\n      this._tmpMatrix.scaleRelative(\n        scaleX,\n        scaleY * (isRightHanded ? -1.0 : 1.0)\n      ); //new = [translate][scale]\n      this._tmpMatrix.translateRelative(\n        -this._tmpBoundsOnModel.x,\n        -this._tmpBoundsOnModel.y\n      ); //new = [translate][scale][translate]\n    }\n\n    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n  }\n\n  /**\n   * クリッピングコンテキストを配置するレイアウト\n   * 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\n   * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\n   *\n   * @param usingClipCount 配置するクリッピングコンテキストの数\n   */\n  public setupLayoutBounds(usingClipCount: number): void {\n    const useClippingMaskMaxCount =\n      this._renderTextureCount <= 1\n        ? ClippingMaskMaxCountOnDefault\n        : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;\n\n    if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {\n      if (usingClipCount > useClippingMaskMaxCount) {\n        // マスクの制限数の警告を出す\n        CubismLogError(\n          'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\n          usingClipCount - useClippingMaskMaxCount,\n          this._renderTextureCount,\n          usingClipCount\n        );\n      }\n      // この場合は一つのマスクターゲットを毎回クリアして使用する\n      for (\n        let index = 0;\n        index < this._clippingContextListForMask.getSize();\n        index++\n      ) {\n        const clipContext: T_ClippingContext =\n          this._clippingContextListForMask.at(index);\n        clipContext._layoutChannelIndex = 0; // どうせ毎回消すので固定\n        clipContext._layoutBounds.x = 0.0;\n        clipContext._layoutBounds.y = 0.0;\n        clipContext._layoutBounds.width = 1.0;\n        clipContext._layoutBounds.height = 1.0;\n        clipContext._bufferIndex = 0;\n      }\n      return;\n    }\n\n    // レンダーテクスチャが1枚なら9分割する（最大36枚）\n    const layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;\n\n    // 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする（デフォルトなら1）。\n    // マスクグループの数が4以下ならRGBA各チャンネルに1つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\n    let countPerSheetDiv: number = usingClipCount / this._renderTextureCount; // レンダーテクスチャ1枚あたり何枚割り当てるか。\n    const reduceLayoutTextureCount: number =\n      usingClipCount % this._renderTextureCount; // レイアウトの数を1枚減らすレンダーテクスチャの数（この数だけのレンダーテクスチャが対象）。\n\n    // 1枚に割り当てるマスクの分割数を取りたいため、小数点は切り上げる\n    countPerSheetDiv = Math.ceil(countPerSheetDiv);\n\n    // RGBAを順番に使っていく\n    let divCount: number = countPerSheetDiv / ColorChannelCount; // 1チャンネルに配置する基本のマスク\n    const modCount: number = countPerSheetDiv % ColorChannelCount; // 余り、この番号のチャンネルまでに一つずつ配分する（インデックスではない）\n\n    // 小数点は切り捨てる\n    divCount = ~~divCount;\n\n    // RGBAそれぞれのチャンネルを用意していく（0:R, 1:G, 2:B, 3:A）\n    let curClipIndex = 0; // 順番に設定していく\n\n    for (\n      let renderTextureIndex = 0;\n      renderTextureIndex < this._renderTextureCount;\n      renderTextureIndex++\n    ) {\n      for (\n        let channelIndex = 0;\n        channelIndex < ColorChannelCount;\n        channelIndex++\n      ) {\n        // このチャンネルにレイアウトする数\n        // NOTE: レイアウト数 = 1チャンネルに配置する基本のマスク + 余りのマスクを置くチャンネルなら1つ追加\n        let layoutCount: number = divCount + (channelIndex < modCount ? 1 : 0);\n\n        // レイアウトの数を1枚減らす場合にそれを行うチャンネルを決定\n        // divが0の時は正常なインデックスの範囲内になるように調整\n        const checkChannelIndex = modCount + (divCount < 1 ? -1 : 0);\n\n        // 今回が対象のチャンネルかつ、レイアウトの数を1枚減らすレンダーテクスチャが存在する場合\n        if (channelIndex == checkChannelIndex && reduceLayoutTextureCount > 0) {\n          // 現在のレンダーテクスチャが、対象のレンダーテクスチャであればレイアウトの数を1枚減らす。\n          layoutCount -= !(renderTextureIndex < reduceLayoutTextureCount)\n            ? 1\n            : 0;\n        }\n\n        // 分割方法を決定する\n        if (layoutCount == 0) {\n          // 何もしない\n        } else if (layoutCount == 1) {\n          // 全てをそのまま使う\n          const clipContext: T_ClippingContext =\n            this._clippingContextListForMask.at(curClipIndex++);\n          clipContext._layoutChannelIndex = channelIndex;\n          clipContext._layoutBounds.x = 0.0;\n          clipContext._layoutBounds.y = 0.0;\n          clipContext._layoutBounds.width = 1.0;\n          clipContext._layoutBounds.height = 1.0;\n          clipContext._bufferIndex = renderTextureIndex;\n        } else if (layoutCount == 2) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos: number = i % 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n            cc._layoutChannelIndex = channelIndex;\n\n            // UVを2つに分解して使う\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = 0.0;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 1.0;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else if (layoutCount <= 4) {\n          // 4分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos: number = i % 2;\n            let ypos: number = i / 2;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n\n            const cc = this._clippingContextListForMask.at(curClipIndex++);\n            cc._layoutChannelIndex = channelIndex;\n\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = ypos * 0.5;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 0.5;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else if (layoutCount <= layoutCountMaxValue) {\n          // 9分割して使う\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 3;\n            let ypos = i / 3;\n\n            // 小数点は切り捨てる\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n            cc._layoutChannelIndex = channelIndex;\n\n            cc._layoutBounds.x = xpos / 3.0;\n            cc._layoutBounds.y = ypos / 3.0;\n            cc._layoutBounds.width = 1.0 / 3.0;\n            cc._layoutBounds.height = 1.0 / 3.0;\n            cc._bufferIndex = renderTextureIndex;\n          }\n        } else {\n          // マスクの制限枚数を超えた場合の処理\n          CubismLogError(\n            'not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}',\n            usingClipCount - useClippingMaskMaxCount,\n            this._renderTextureCount,\n            usingClipCount\n          );\n\n          // SetupShaderProgramでオーバーアクセスが発生するので仮で数値を入れる\n          // もちろん描画結果は正しいものではなくなる\n          for (let index = 0; index < layoutCount; index++) {\n            const cc: T_ClippingContext = this._clippingContextListForMask.at(\n              curClipIndex++\n            );\n\n            cc._layoutChannelIndex = 0;\n\n            cc._layoutBounds.x = 0.0;\n            cc._layoutBounds.y = 0.0;\n            cc._layoutBounds.width = 1.0;\n            cc._layoutBounds.height = 1.0;\n            cc._bufferIndex = 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\n   * @param model モデルのインスタンス\n   * @param clippingContext クリッピングマスクのコンテキスト\n   */\n  public calcClippedDrawTotalBounds(\n    model: CubismModel,\n    clippingContext: T_ClippingContext\n  ): void {\n    // 被クリッピングマスク（マスクされる描画オブジェクト）の全体の矩形\n    let clippedDrawTotalMinX: number = Number.MAX_VALUE;\n    let clippedDrawTotalMinY: number = Number.MAX_VALUE;\n    let clippedDrawTotalMaxX: number = Number.MIN_VALUE;\n    let clippedDrawTotalMaxY: number = Number.MIN_VALUE;\n\n    // このマスクが実際に必要か判定する\n    // このクリッピングを利用する「描画オブジェクト」がひとつでも使用可能であればマスクを生成する必要がある\n    const clippedDrawCount: number =\n      clippingContext._clippedDrawableIndexList.length;\n\n    for (\n      let clippedDrawableIndex = 0;\n      clippedDrawableIndex < clippedDrawCount;\n      clippedDrawableIndex++\n    ) {\n      // マスクを使用する描画オブジェクトの描画される矩形を求める\n      const drawableIndex: number =\n        clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n\n      const drawableVertexCount: number =\n        model.getDrawableVertexCount(drawableIndex);\n      const drawableVertexes: Float32Array =\n        model.getDrawableVertices(drawableIndex);\n\n      let minX: number = Number.MAX_VALUE;\n      let minY: number = Number.MAX_VALUE;\n      let maxX: number = -Number.MAX_VALUE;\n      let maxY: number = -Number.MAX_VALUE;\n\n      const loop: number = drawableVertexCount * Constant.vertexStep;\n      for (\n        let pi: number = Constant.vertexOffset;\n        pi < loop;\n        pi += Constant.vertexStep\n      ) {\n        const x: number = drawableVertexes[pi];\n        const y: number = drawableVertexes[pi + 1];\n\n        if (x < minX) {\n          minX = x;\n        }\n        if (x > maxX) {\n          maxX = x;\n        }\n        if (y < minY) {\n          minY = y;\n        }\n        if (y > maxY) {\n          maxY = y;\n        }\n      }\n\n      // 有効な点が一つも取れなかったのでスキップ\n      if (minX == Number.MAX_VALUE) {\n        continue;\n      }\n\n      // 全体の矩形に反映\n      if (minX < clippedDrawTotalMinX) {\n        clippedDrawTotalMinX = minX;\n      }\n      if (minY < clippedDrawTotalMinY) {\n        clippedDrawTotalMinY = minY;\n      }\n      if (maxX > clippedDrawTotalMaxX) {\n        clippedDrawTotalMaxX = maxX;\n      }\n      if (maxY > clippedDrawTotalMaxY) {\n        clippedDrawTotalMaxY = maxY;\n      }\n\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n        clippingContext._allClippedDrawRect.x = 0.0;\n        clippingContext._allClippedDrawRect.y = 0.0;\n        clippingContext._allClippedDrawRect.width = 0.0;\n        clippingContext._allClippedDrawRect.height = 0.0;\n        clippingContext._isUsing = false;\n      } else {\n        clippingContext._isUsing = true;\n        const w: number = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n        const h: number = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.width = w;\n        clippingContext._allClippedDrawRect.height = h;\n      }\n    }\n  }\n\n  /**\n   * 画面描画に使用するクリッピングマスクのリストを取得する\n   * @return 画面描画に使用するクリッピングマスクのリスト\n   */\n  public getClippingContextListForDraw(): csmVector<T_ClippingContext> {\n    return this._clippingContextListForDraw;\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   * @return クリッピングマスクバッファのサイズ\n   */\n  public getClippingMaskBufferSize(): number {\n    return this._clippingMaskBufferSize;\n  }\n\n  /**\n   * このバッファのレンダーテクスチャの枚数を取得する\n   * @return このバッファのレンダーテクスチャの枚数\n   */\n  public getRenderTextureCount(): number {\n    return this._renderTextureCount;\n  }\n\n  /**\n   * カラーチャンネル（RGBA）のフラグを取得する\n   * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\n   */\n  public getChannelFlagAsColor(channelNo: number): CubismTextureColor {\n    return this._channelColors.at(channelNo);\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  public setClippingMaskBufferSize(size: number): void {\n    this._clippingMaskBufferSize = size;\n  }\n\n  protected _clearedFrameBufferFlags: csmVector<boolean>; //マスクのクリアフラグの配列\n\n  protected _channelColors: csmVector<CubismTextureColor>;\n  protected _clippingContextListForMask: csmVector<T_ClippingContext>; // マスク用クリッピングコンテキストのリスト\n  protected _clippingContextListForDraw: csmVector<T_ClippingContext>; // 描画用クリッピングコンテキストのリスト\n  protected _clippingMaskBufferSize: number; // クリッピングマスクのバッファサイズ（初期値:256）\n  protected _renderTextureCount: number; // 生成するレンダーテクスチャの枚数\n\n  protected _tmpMatrix: CubismMatrix44; // マスク計算用の行列\n  protected _tmpMatrixForMask: CubismMatrix44; // マスク計算用の行列\n  protected _tmpMatrixForDraw: CubismMatrix44; // マスク計算用の行列\n  protected _tmpBoundsOnModel: csmRect; // マスク配置計算用の矩形\n\n  protected _clippingContexttConstructor: ClippingContextConstructor<T_ClippingContext>;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '../math/cubismmatrix44';\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmMap, iterator } from '../type/csmmap';\nimport { csmRect } from '../type/csmrectf';\nimport { csmVector } from '../type/csmvector';\nimport { CubismLogError } from '../utils/cubismdebug';\nimport { CubismBlendMode, CubismTextureColor } from './cubismrenderer';\nimport { CubismRenderer_WebGL } from './cubismrenderer_webgl';\n\nlet s_instance: CubismShaderManager_WebGL; // インスタンス（シングルトン）\nconst ShaderCount = 10; // シェーダーの数 = マスク生成用 + (通常用 + 加算 + 乗算) * (マスク無の乗算済アルファ対応版 + マスク有の乗算済アルファ対応版 + マスク有反転の乗算済アルファ対応版)\n\n/**\n * WebGL用のシェーダープログラムを生成・破棄するクラス\n */\nexport class CubismShader_WebGL {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._shaderSets = new csmVector<CubismShaderSet>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this.releaseShaderProgram();\n  }\n\n  /**\n   * 描画用のシェーダプログラムの一連のセットアップを実行する\n   * @param renderer レンダラー\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public setupShaderProgramForDraw(\n    renderer: CubismRenderer_WebGL,\n    model: Readonly<CubismModel>,\n    index: number\n  ): void {\n    if (!renderer.isPremultipliedAlpha()) {\n      CubismLogError('NoPremultipliedAlpha is not allowed');\n    }\n\n    if (this._shaderSets.getSize() == 0) {\n      this.generateShaders();\n    }\n\n    // Blending\n    let srcColor: number;\n    let dstColor: number;\n    let srcAlpha: number;\n    let dstAlpha: number;\n\n    // _shaderSets用のオフセット計算\n    const masked: boolean = renderer.getClippingContextBufferForDraw() != null; // この描画オブジェクトはマスク対象か\n    const invertedMask: boolean = model.getDrawableInvertedMaskBit(index);\n    const offset: number = masked ? (invertedMask ? 2 : 1) : 0;\n\n    let shaderSet: CubismShaderSet;\n    switch (model.getDrawableBlendMode(index)) {\n      case CubismBlendMode.CubismBlendMode_Normal:\n      default:\n        shaderSet = this._shaderSets.at(\n          ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset\n        );\n        srcColor = this.gl.ONE;\n        dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n        srcAlpha = this.gl.ONE;\n        dstAlpha = this.gl.ONE_MINUS_SRC_ALPHA;\n        break;\n\n      case CubismBlendMode.CubismBlendMode_Additive:\n        shaderSet = this._shaderSets.at(\n          ShaderNames.ShaderNames_AddPremultipliedAlpha + offset\n        );\n        srcColor = this.gl.ONE;\n        dstColor = this.gl.ONE;\n        srcAlpha = this.gl.ZERO;\n        dstAlpha = this.gl.ONE;\n        break;\n\n      case CubismBlendMode.CubismBlendMode_Multiplicative:\n        shaderSet = this._shaderSets.at(\n          ShaderNames.ShaderNames_MultPremultipliedAlpha + offset\n        );\n        srcColor = this.gl.DST_COLOR;\n        dstColor = this.gl.ONE_MINUS_SRC_ALPHA;\n        srcAlpha = this.gl.ZERO;\n        dstAlpha = this.gl.ONE;\n        break;\n    }\n\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    // 頂点配列の設定\n    if (renderer._bufferData.vertex == null) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n\n    // 頂点配列の設定\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // テクスチャ頂点の設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    if (masked) {\n      this.gl.activeTexture(this.gl.TEXTURE1);\n\n      // frameBufferに書かれたテクスチャ\n      const tex: WebGLTexture = renderer\n        .getClippingContextBufferForDraw()\n        .getClippingManager()\n        .getColorBuffer()\n        .at(renderer.getClippingContextBufferForDraw()._bufferIndex);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n      this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n\n      // view座標をClippingContextの座標に変換するための行列を設定\n      this.gl.uniformMatrix4fv(\n        shaderSet.uniformClipMatrixLocation,\n        false,\n        renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray()\n      );\n\n      // 使用するカラーチャンネルを設定\n      const channelIndex: number =\n        renderer.getClippingContextBufferForDraw()._layoutChannelIndex;\n      const colorChannel: CubismTextureColor = renderer\n        .getClippingContextBufferForDraw()\n        .getClippingManager()\n        .getChannelFlagAsColor(channelIndex);\n      this.gl.uniform4f(\n        shaderSet.uniformChannelFlagLocation,\n        colorChannel.r,\n        colorChannel.g,\n        colorChannel.b,\n        colorChannel.a\n      );\n    }\n\n    // テクスチャ設定\n    const textureNo: number = model.getDrawableTextureIndex(index);\n    const textureId: WebGLTexture = renderer\n      .getBindedTextures()\n      .getValue(textureNo);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    //座標変換\n    const matrix4x4: CubismMatrix44 = renderer.getMvpMatrix();\n    this.gl.uniformMatrix4fv(\n      shaderSet.uniformMatrixLocation,\n      false,\n      matrix4x4.getArray()\n    );\n\n    //ベース色の取得\n    const baseColor: CubismTextureColor = renderer.getModelColorWithOpacity(\n      model.getDrawableOpacity(index)\n    );\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      baseColor.r,\n      baseColor.g,\n      baseColor.b,\n      baseColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformMultiplyColorLocation,\n      multiplyColor.r,\n      multiplyColor.g,\n      multiplyColor.b,\n      multiplyColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformScreenColorLocation,\n      screenColor.r,\n      screenColor.g,\n      screenColor.b,\n      screenColor.a\n    );\n\n    // IBOを作成し、データを転送\n    if (renderer._bufferData.index == null) {\n      renderer._bufferData.index = this.gl.createBuffer();\n    }\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\n\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      renderer._bufferData.index\n    );\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexArray,\n      this.gl.DYNAMIC_DRAW\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * マスク用のシェーダプログラムの一連のセットアップを実行する\n   * @param renderer レンダラー\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public setupShaderProgramForMask(\n    renderer: CubismRenderer_WebGL,\n    model: Readonly<CubismModel>,\n    index: number\n  ): void {\n    if (!renderer.isPremultipliedAlpha()) {\n      CubismLogError('NoPremultipliedAlpha is not allowed');\n    }\n\n    if (this._shaderSets.getSize() == 0) {\n      this.generateShaders();\n    }\n\n    const shaderSet: CubismShaderSet = this._shaderSets.at(\n      ShaderNames.ShaderNames_SetupMask\n    );\n    this.gl.useProgram(shaderSet.shaderProgram);\n\n    // 頂点配列の設定\n    if (renderer._bufferData.vertex == null) {\n      renderer._bufferData.vertex = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.vertex);\n    const vertexArray: Float32Array = model.getDrawableVertices(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributePositionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    //テクスチャ設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const textureNo: number = model.getDrawableTextureIndex(index);\n    const textureId: WebGLTexture = renderer\n      .getBindedTextures()\n      .getValue(textureNo);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n    this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n\n    // テクスチャ頂点の設定\n    if (renderer._bufferData.uv == null) {\n      renderer._bufferData.uv = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, renderer._bufferData.uv);\n    const uvArray: Float32Array = model.getDrawableVertexUvs(index);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n    this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n    this.gl.vertexAttribPointer(\n      shaderSet.attributeTexCoordLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // チャンネル\n    const context = renderer.getClippingContextBufferForMask();\n    const channelIndex: number =\n      renderer.getClippingContextBufferForMask()._layoutChannelIndex;\n    const colorChannel: CubismTextureColor = renderer\n      .getClippingContextBufferForMask()\n      .getClippingManager()\n      .getChannelFlagAsColor(channelIndex);\n    this.gl.uniform4f(\n      shaderSet.uniformChannelFlagLocation,\n      colorChannel.r,\n      colorChannel.g,\n      colorChannel.b,\n      colorChannel.a\n    );\n\n    this.gl.uniformMatrix4fv(\n      shaderSet.uniformClipMatrixLocation,\n      false,\n      renderer.getClippingContextBufferForMask()._matrixForMask.getArray()\n    );\n\n    const rect: csmRect =\n      renderer.getClippingContextBufferForMask()._layoutBounds;\n\n    this.gl.uniform4f(\n      shaderSet.uniformBaseColorLocation,\n      rect.x * 2.0 - 1.0,\n      rect.y * 2.0 - 1.0,\n      rect.getRight() * 2.0 - 1.0,\n      rect.getBottom() * 2.0 - 1.0\n    );\n\n    const multiplyColor: CubismTextureColor = model.getMultiplyColor(index);\n    const screenColor: CubismTextureColor = model.getScreenColor(index);\n\n    this.gl.uniform4f(\n      shaderSet.uniformMultiplyColorLocation,\n      multiplyColor.r,\n      multiplyColor.g,\n      multiplyColor.b,\n      multiplyColor.a\n    );\n\n    this.gl.uniform4f(\n      shaderSet.uniformScreenColorLocation,\n      screenColor.r,\n      screenColor.g,\n      screenColor.b,\n      screenColor.a\n    );\n\n    // Blending\n    const srcColor: number = this.gl.ZERO;\n    const dstColor: number = this.gl.ONE_MINUS_SRC_COLOR;\n    const srcAlpha: number = this.gl.ZERO;\n    const dstAlpha: number = this.gl.ONE_MINUS_SRC_ALPHA;\n\n    // IBOを作成し、データを転送\n    if (renderer._bufferData.index == null) {\n      renderer._bufferData.index = this.gl.createBuffer();\n    }\n    const indexArray: Uint16Array = model.getDrawableVertexIndices(index);\n\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      renderer._bufferData.index\n    );\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexArray,\n      this.gl.DYNAMIC_DRAW\n    );\n\n    this.gl.blendFuncSeparate(srcColor, dstColor, srcAlpha, dstAlpha);\n  }\n\n  /**\n   * シェーダープログラムを解放する\n   */\n  public releaseShaderProgram(): void {\n    for (let i = 0; i < this._shaderSets.getSize(); i++) {\n      this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\n      this._shaderSets.at(i).shaderProgram = 0;\n      this._shaderSets.set(i, void 0);\n      this._shaderSets.set(i, null);\n    }\n  }\n\n  /**\n   * シェーダープログラムを初期化する\n   * @param vertShaderSrc 頂点シェーダのソース\n   * @param fragShaderSrc フラグメントシェーダのソース\n   */\n  public generateShaders(): void {\n    for (let i = 0; i < ShaderCount; i++) {\n      this._shaderSets.pushBack(new CubismShaderSet());\n    }\n\n    this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcSetupMask,\n      fragmentShaderSrcsetupMask\n    );\n\n    this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrc,\n      fragmentShaderSrcPremultipliedAlpha\n    );\n    this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskPremultipliedAlpha\n    );\n    this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskInvertedPremultipliedAlpha\n    );\n\n    // 加算も通常と同じシェーダーを利用する\n    this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\n    this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\n    this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n    // 乗算も通常と同じシェーダーを利用する\n    this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\n    this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\n    this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\n\n    // SetupMask\n    this._shaderSets.at(0).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(0).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(0).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(0).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(0).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(0).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(0).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(0).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(0).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（PremultipliedAlpha）\n    this._shaderSets.at(1).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(1).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(1).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(1).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(1).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(1).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(1).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(1).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(2).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(2).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(2).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(2).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(2).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(2).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(2).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(2).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(2).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 通常（クリッピング・反転, PremultipliedAlpha）\n    this._shaderSets.at(3).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(3).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(3).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(3).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(3).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(3).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(3).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(3).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(3).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（PremultipliedAlpha）\n    this._shaderSets.at(4).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(4).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(4).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(4).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(4).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(4).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(4).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(4).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(5).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(5).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(5).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(5).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(5).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(5).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(5).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(5).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(5).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 加算（クリッピング・反転、PremultipliedAlpha）\n    this._shaderSets.at(6).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(6).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(6).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(6).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(6).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(6).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(6).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(6).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(6).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（PremultipliedAlpha）\n    this._shaderSets.at(7).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(7).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(7).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(7).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(7).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(7).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(7).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(7).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（クリッピング、PremultipliedAlpha）\n    this._shaderSets.at(8).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(8).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(8).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(8).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(8).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(8).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(8).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(8).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(8).shaderProgram,\n        'u_screenColor'\n      );\n\n    // 乗算（クリッピング・反転、PremultipliedAlpha）\n    this._shaderSets.at(9).attributePositionLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'a_position'\n      );\n    this._shaderSets.at(9).attributeTexCoordLocation =\n      this.gl.getAttribLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'a_texCoord'\n      );\n    this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      's_texture0'\n    );\n    this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      's_texture1'\n    );\n    this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets.at(9).shaderProgram,\n      'u_matrix'\n    );\n    this._shaderSets.at(9).uniformClipMatrixLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_clipMatrix'\n      );\n    this._shaderSets.at(9).uniformChannelFlagLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_channelFlag'\n      );\n    this._shaderSets.at(9).uniformBaseColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_baseColor'\n      );\n    this._shaderSets.at(9).uniformMultiplyColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_multiplyColor'\n      );\n    this._shaderSets.at(9).uniformScreenColorLocation =\n      this.gl.getUniformLocation(\n        this._shaderSets.at(9).shaderProgram,\n        'u_screenColor'\n      );\n  }\n\n  /**\n   * シェーダプログラムをロードしてアドレスを返す\n   * @param vertexShaderSource    頂点シェーダのソース\n   * @param fragmentShaderSource  フラグメントシェーダのソース\n   * @return シェーダプログラムのアドレス\n   */\n  public loadShaderProgram(\n    vertexShaderSource: string,\n    fragmentShaderSource: string\n  ): WebGLProgram {\n    // Create Shader Program\n    let shaderProgram: WebGLProgram = this.gl.createProgram();\n\n    let vertShader = this.compileShaderSource(\n      this.gl.VERTEX_SHADER,\n      vertexShaderSource\n    );\n\n    if (!vertShader) {\n      CubismLogError('Vertex shader compile error!');\n      return 0;\n    }\n\n    let fragShader = this.compileShaderSource(\n      this.gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n    if (!fragShader) {\n      CubismLogError('Vertex shader compile error!');\n      return 0;\n    }\n\n    // Attach vertex shader to program\n    this.gl.attachShader(shaderProgram, vertShader);\n\n    // Attach fragment shader to program\n    this.gl.attachShader(shaderProgram, fragShader);\n\n    // link program\n    this.gl.linkProgram(shaderProgram);\n    const linkStatus = this.gl.getProgramParameter(\n      shaderProgram,\n      this.gl.LINK_STATUS\n    );\n\n    // リンクに失敗したらシェーダーを削除\n    if (!linkStatus) {\n      CubismLogError('Failed to link program: {0}', shaderProgram);\n\n      this.gl.deleteShader(vertShader);\n      vertShader = 0;\n\n      this.gl.deleteShader(fragShader);\n      fragShader = 0;\n\n      if (shaderProgram) {\n        this.gl.deleteProgram(shaderProgram);\n        shaderProgram = 0;\n      }\n\n      return 0;\n    }\n\n    // Release vertex and fragment shaders.\n    this.gl.deleteShader(vertShader);\n    this.gl.deleteShader(fragShader);\n\n    return shaderProgram;\n  }\n\n  /**\n   * シェーダープログラムをコンパイルする\n   * @param shaderType シェーダタイプ(Vertex/Fragment)\n   * @param shaderSource シェーダソースコード\n   *\n   * @return コンパイルされたシェーダープログラム\n   */\n  public compileShaderSource(\n    shaderType: GLenum,\n    shaderSource: string\n  ): WebGLProgram {\n    const source: string = shaderSource;\n\n    const shader: WebGLProgram = this.gl.createShader(shaderType);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n\n    if (!shader) {\n      const log: string = this.gl.getShaderInfoLog(shader);\n      CubismLogError('Shader compile log: {0} ', log);\n    }\n\n    const status: any = this.gl.getShaderParameter(\n      shader,\n      this.gl.COMPILE_STATUS\n    );\n    if (!status) {\n      this.gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  public setGl(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n  }\n\n  _shaderSets: csmVector<CubismShaderSet>; // ロードしたシェーダープログラムを保持する変数\n  gl: WebGLRenderingContext; // webglコンテキスト\n}\n\n/**\n * GLContextごとにCubismShader_WebGLを確保するためのクラス\n * シングルトンなクラスであり、CubismShaderManager_WebGL.getInstanceからアクセスする。\n */\nexport class CubismShaderManager_WebGL {\n  /**\n   * インスタンスを取得する（シングルトン）\n   * @return インスタンス\n   */\n  public static getInstance(): CubismShaderManager_WebGL {\n    if (s_instance == null) {\n      s_instance = new CubismShaderManager_WebGL();\n    }\n    return s_instance;\n  }\n\n  /**\n   * インスタンスを開放する（シングルトン）\n   */\n  public static deleteInstance(): void {\n    if (s_instance) {\n      s_instance.release();\n      s_instance = null;\n    }\n  }\n\n  /**\n   * Privateなコンストラクタ\n   */\n  private constructor() {\n    this._shaderMap = new csmMap<WebGLRenderingContext, CubismShader_WebGL>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    for (\n      const ite: iterator<WebGLRenderingContext, CubismShader_WebGL> =\n        this._shaderMap.begin();\n      ite.notEqual(this._shaderMap.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().second.release();\n    }\n    this._shaderMap.clear();\n  }\n\n  /**\n   * GLContextをキーにShaderを取得する\n   * @param gl\n   * @returns\n   */\n  public getShader(gl: WebGLRenderingContext): CubismShader_WebGL {\n    return this._shaderMap.getValue(gl);\n  }\n\n  /**\n   * GLContextを登録する\n   * @param gl\n   */\n  public setGlContext(gl: WebGLRenderingContext): void {\n    if (!this._shaderMap.isExist(gl)) {\n      const instance = new CubismShader_WebGL();\n      instance.setGl(gl);\n      this._shaderMap.setValue(gl, instance);\n    }\n  }\n\n  /**\n   * GLContextごとのShaderを保持する変数\n   */\n  private _shaderMap: csmMap<WebGLRenderingContext, CubismShader_WebGL>;\n}\n\n/**\n * CubismShader_WebGLのインナークラス\n */\nexport class CubismShaderSet {\n  shaderProgram: WebGLProgram; // シェーダープログラムのアドレス\n  attributePositionLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（Position）\n  attributeTexCoordLocation: GLuint; // シェーダープログラムに渡す変数のアドレス（TexCoord）\n  uniformMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Matrix）\n  uniformClipMatrixLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ClipMatrix）\n  samplerTexture0Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture0）\n  samplerTexture1Location: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（Texture1）\n  uniformBaseColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（BaseColor）\n  uniformChannelFlagLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ChannelFlag）\n  uniformMultiplyColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（MultiplyColor）\n  uniformScreenColorLocation: WebGLUniformLocation; // シェーダープログラムに渡す変数のアドレス（ScreenColor）\n}\n\nexport enum ShaderNames {\n  // SetupMask\n  ShaderNames_SetupMask,\n\n  // Normal\n  ShaderNames_NormalPremultipliedAlpha,\n  ShaderNames_NormalMaskedPremultipliedAlpha,\n  ShaderNames_NomralMaskedInvertedPremultipliedAlpha,\n\n  // Add\n  ShaderNames_AddPremultipliedAlpha,\n  ShaderNames_AddMaskedPremultipliedAlpha,\n  ShaderNames_AddMaskedPremultipliedAlphaInverted,\n\n  // Mult\n  ShaderNames_MultPremultipliedAlpha,\n  ShaderNames_MultMaskedPremultipliedAlpha,\n  ShaderNames_MultMaskedPremultipliedAlphaInverted\n}\n\nexport const vertexShaderSrcSetupMask =\n  'attribute vec4     a_position;' +\n  'attribute vec2     a_texCoord;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_myPos;' +\n  'uniform mat4       u_clipMatrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_clipMatrix * a_position;' +\n  '   v_myPos = u_clipMatrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\nexport const fragmentShaderSrcsetupMask =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_myPos;' +\n  'uniform vec4       u_baseColor;' +\n  'uniform vec4       u_channelFlag;' +\n  'uniform sampler2D  s_texture0;' +\n  'void main()' +\n  '{' +\n  '   float isInside = ' +\n  '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\n  '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\n  '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\n  '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\n  '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\n  '}';\n\n//----- バーテックスシェーダプログラム -----\n// Normal & Add & Mult 共通\nexport const vertexShaderSrc =\n  'attribute vec4     a_position;' + //v.vertex\n  'attribute vec2     a_texCoord;' + //v.texcoord\n  'varying vec2       v_texCoord;' + //v2f.texcoord\n  'uniform mat4       u_matrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_matrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\n// Normal & Add & Mult 共通（クリッピングされたものの描画用）\nexport const vertexShaderSrcMasked =\n  'attribute vec4     a_position;' +\n  'attribute vec2     a_texCoord;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_clipPos;' +\n  'uniform mat4       u_matrix;' +\n  'uniform mat4       u_clipMatrix;' +\n  'void main()' +\n  '{' +\n  '   gl_Position = u_matrix * a_position;' +\n  '   v_clipPos = u_clipMatrix * a_position;' +\n  '   v_texCoord = a_texCoord;' +\n  '   v_texCoord.y = 1.0 - v_texCoord.y;' +\n  '}';\n\n//----- フラグメントシェーダプログラム -----\n// Normal & Add & Mult 共通 （PremultipliedAlpha）\nexport const fragmentShaderSrcPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' + //v2f.texcoord\n  'uniform vec4       u_baseColor;' +\n  'uniform sampler2D  s_texture0;' + //_MainTex\n  'uniform vec4       u_multiplyColor;' +\n  'uniform vec4       u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 color = texColor * u_baseColor;' +\n  '   gl_FragColor = vec4(color.rgb, color.a);' +\n  '}';\n\n// Normal （クリッピングされたものの描画用、PremultipliedAlpha兼用）\nexport const fragmentShaderSrcMaskPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2       v_texCoord;' +\n  'varying vec4       v_clipPos;' +\n  'uniform vec4       u_baseColor;' +\n  'uniform vec4       u_channelFlag;' +\n  'uniform sampler2D  s_texture0;' +\n  'uniform sampler2D  s_texture1;' +\n  'uniform vec4       u_multiplyColor;' +\n  'uniform vec4       u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 col_formask = texColor * u_baseColor;' +\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n  '   col_formask = col_formask * maskVal;' +\n  '   gl_FragColor = col_formask;' +\n  '}';\n\n// Normal & Add & Mult 共通（クリッピングされて反転使用の描画用、PremultipliedAlphaの場合）\nexport const fragmentShaderSrcMaskInvertedPremultipliedAlpha =\n  'precision mediump float;' +\n  'varying vec2      v_texCoord;' +\n  'varying vec4      v_clipPos;' +\n  'uniform sampler2D s_texture0;' +\n  'uniform sampler2D s_texture1;' +\n  'uniform vec4      u_channelFlag;' +\n  'uniform vec4      u_baseColor;' +\n  'uniform vec4      u_multiplyColor;' +\n  'uniform vec4      u_screenColor;' +\n  'void main()' +\n  '{' +\n  '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +\n  '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +\n  '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +\n  '   vec4 col_formask = texColor * u_baseColor;' +\n  '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\n  '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\n  '   col_formask = col_formask * (1.0 - maskVal);' +\n  '   gl_FragColor = col_formask;' +\n  '}';\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismshader_webgl';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismShaderSet = $.CubismShaderSet;\n  export type CubismShaderSet = $.CubismShaderSet;\n  export const CubismShader_WebGL = $.CubismShader_WebGL;\n  export type CubismShader_WebGL = $.CubismShader_WebGL;\n  export const CubismShaderManager_WebGL = $.CubismShaderManager_WebGL;\n  export type CubismShaderManager_WebGL = $.CubismShaderManager_WebGL;\n  export const ShaderNames = $.ShaderNames;\n  export type ShaderNames = $.ShaderNames;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismModel } from '../model/cubismmodel';\nimport { csmMap } from '../type/csmmap';\nimport { csmRect } from '../type/csmrectf';\nimport { csmVector } from '../type/csmvector';\nimport { CubismLogError } from '../utils/cubismdebug';\nimport { CubismClippingManager } from './cubismclippingmanager';\nimport { CubismClippingContext, CubismRenderer } from './cubismrenderer';\nimport { CubismShaderManager_WebGL } from './cubismshader_webgl';\n\nlet s_viewport: number[];\nlet s_fbo: WebGLFramebuffer;\n\n/**\n * クリッピングマスクの処理を実行するクラス\n */\nexport class CubismClippingManager_WebGL extends CubismClippingManager<CubismClippingContext_WebGL> {\n  /**\n   * テンポラリのレンダーテクスチャのアドレスを取得する\n   * FrameBufferObjectが存在しない場合、新しく生成する\n   *\n   * @return レンダーテクスチャの配列\n   */\n  public getMaskRenderTexture(): csmVector<WebGLFramebuffer> {\n    // テンポラリのRenderTextureを取得する\n    if (this._maskTexture && this._maskTexture.textures != null) {\n      // 前回使ったものを返す\n      this._maskTexture.frameNo = this._currentFrameNo;\n    } else {\n      // FrameBufferObjectが存在しない場合、新しく生成する\n      if (this._maskRenderTextures != null) {\n        this._maskRenderTextures.clear();\n      }\n      this._maskRenderTextures = new csmVector<WebGLFramebuffer>();\n\n      // ColorBufferObjectが存在しない場合、新しく生成する\n      if (this._maskColorBuffers != null) {\n        this._maskColorBuffers.clear();\n      }\n      this._maskColorBuffers = new csmVector<WebGLTexture>();\n\n      // クリッピングバッファサイズを取得\n      const size: number = this._clippingMaskBufferSize;\n\n      for (let index = 0; index < this._renderTextureCount; index++) {\n        this._maskColorBuffers.pushBack(this.gl.createTexture()); // 直接代入\n        this.gl.bindTexture(\n          this.gl.TEXTURE_2D,\n          this._maskColorBuffers.at(index)\n        );\n        this.gl.texImage2D(\n          this.gl.TEXTURE_2D,\n          0,\n          this.gl.RGBA,\n          size,\n          size,\n          0,\n          this.gl.RGBA,\n          this.gl.UNSIGNED_BYTE,\n          null\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_WRAP_S,\n          this.gl.CLAMP_TO_EDGE\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_WRAP_T,\n          this.gl.CLAMP_TO_EDGE\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_MIN_FILTER,\n          this.gl.LINEAR\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_MAG_FILTER,\n          this.gl.LINEAR\n        );\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n\n        this._maskRenderTextures.pushBack(this.gl.createFramebuffer());\n        this.gl.bindFramebuffer(\n          this.gl.FRAMEBUFFER,\n          this._maskRenderTextures.at(index)\n        );\n        this.gl.framebufferTexture2D(\n          this.gl.FRAMEBUFFER,\n          this.gl.COLOR_ATTACHMENT0,\n          this.gl.TEXTURE_2D,\n          this._maskColorBuffers.at(index),\n          0\n        );\n      }\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n\n      this._maskTexture = new CubismRenderTextureResource(\n        this._currentFrameNo,\n        this._maskRenderTextures\n      );\n    }\n\n    return this._maskTexture.textures;\n  }\n\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  public setGL(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super(CubismClippingContext_WebGL);\n  }\n\n  /**\n   * クリッピングコンテキストを作成する。モデル描画時に実行する。\n   * @param model モデルのインスタンス\n   * @param renderer レンダラのインスタンス\n   */\n  public setupClippingContext(\n    model: CubismModel,\n    renderer: CubismRenderer_WebGL\n  ): void {\n    this._currentFrameNo++;\n\n    // 全てのクリッピングを用意する\n    // 同じクリップ（複数の場合はまとめて一つのクリップ）を使う場合は1度だけ設定する\n    let usingClipCount = 0;\n    for (\n      let clipIndex = 0;\n      clipIndex < this._clippingContextListForMask.getSize();\n      clipIndex++\n    ) {\n      // 1つのクリッピングマスクに関して\n      const cc: CubismClippingContext_WebGL =\n        this._clippingContextListForMask.at(clipIndex);\n\n      // このクリップを利用する描画オブジェクト群全体を囲む矩形を計算\n      this.calcClippedDrawTotalBounds(model, cc);\n\n      if (cc._isUsing) {\n        usingClipCount++; // 使用中としてカウント\n      }\n    }\n\n    // マスク作成処理\n    if (usingClipCount > 0) {\n      // 生成したFrameBufferと同じサイズでビューポートを設定\n      this.gl.viewport(\n        0,\n        0,\n        this._clippingMaskBufferSize,\n        this._clippingMaskBufferSize\n      );\n\n      // 後の計算のためにインデックスの最初をセット\n      this._currentMaskRenderTexture = this.getMaskRenderTexture().at(0);\n\n      renderer.preDraw(); // バッファをクリアする\n\n      this.setupLayoutBounds(usingClipCount);\n\n      // ---------- マスク描画処理 ----------\n      // マスク用RenderTextureをactiveにセット\n      this.gl.bindFramebuffer(\n        this.gl.FRAMEBUFFER,\n        this._currentMaskRenderTexture\n      );\n\n      // サイズがレンダーテクスチャの枚数と合わない場合は合わせる\n      if (this._clearedFrameBufferFlags.getSize() != this._renderTextureCount) {\n        this._clearedFrameBufferFlags.clear();\n        this._clearedFrameBufferFlags = new csmVector<boolean>(\n          this._renderTextureCount\n        );\n      }\n\n      // マスクのクリアフラグを毎フレーム開始時に初期化\n      for (\n        let index = 0;\n        index < this._clearedFrameBufferFlags.getSize();\n        index++\n      ) {\n        this._clearedFrameBufferFlags.set(index, false);\n      }\n\n      // 実際にマスクを生成する\n      // 全てのマスクをどのようにレイアウトして描くかを決定し、ClipContext, ClippedDrawContextに記憶する\n      for (\n        let clipIndex = 0;\n        clipIndex < this._clippingContextListForMask.getSize();\n        clipIndex++\n      ) {\n        // --- 実際に1つのマスクを描く ---\n        const clipContext: CubismClippingContext_WebGL =\n          this._clippingContextListForMask.at(clipIndex);\n        const allClipedDrawRect: csmRect = clipContext._allClippedDrawRect; // このマスクを使う、すべての描画オブジェクトの論理座標上の囲み矩形\n        const layoutBoundsOnTex01: csmRect = clipContext._layoutBounds; // この中にマスクを収める\n        const margin = 0.05; // モデル座標上の矩形を、適宜マージンを付けて使う\n        let scaleX = 0;\n        let scaleY = 0;\n\n        // clipContextに設定したレンダーテクスチャをインデックスで取得\n        const clipContextRenderTexture = this.getMaskRenderTexture().at(\n          clipContext._bufferIndex\n        );\n\n        // 現在のレンダーテクスチャがclipContextのものと異なる場合\n        if (this._currentMaskRenderTexture != clipContextRenderTexture) {\n          this._currentMaskRenderTexture = clipContextRenderTexture;\n          renderer.preDraw(); // バッファをクリアする\n          // マスク用RenderTextureをactiveにセット\n          this.gl.bindFramebuffer(\n            this.gl.FRAMEBUFFER,\n            this._currentMaskRenderTexture\n          );\n        }\n\n        this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n        this._tmpBoundsOnModel.expand(\n          allClipedDrawRect.width * margin,\n          allClipedDrawRect.height * margin\n        );\n        //########## 本来は割り当てられた領域の全体を使わず必要最低限のサイズがよい\n\n        // シェーダ用の計算式を求める。回転を考慮しない場合は以下のとおり\n        // movePeriod' = movePeriod * scaleX + offX\t\t  [[ movePeriod' = (movePeriod - tmpBoundsOnModel.movePeriod)*scale + layoutBoundsOnTex01.movePeriod ]]\n        scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n        scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n\n        // マスク生成時に使う行列を求める\n        {\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\n          this._tmpMatrix.loadIdentity();\n          {\n            // layout0..1 を -1..1に変換\n            this._tmpMatrix.translateRelative(-1.0, -1.0);\n            this._tmpMatrix.scaleRelative(2.0, 2.0);\n          }\n          {\n            // view to layout0..1\n            this._tmpMatrix.translateRelative(\n              layoutBoundsOnTex01.x,\n              layoutBoundsOnTex01.y\n            );\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\n            this._tmpMatrix.translateRelative(\n              -this._tmpBoundsOnModel.x,\n              -this._tmpBoundsOnModel.y\n            );\n            // new = [translate][scale][translate]\n          }\n          // tmpMatrixForMaskが計算結果\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n        }\n\n        //--------- draw時の mask 参照用行列を計算\n        {\n          // シェーダに渡す行列を求める <<<<<<<<<<<<<<<<<<<<<<<< 要最適化（逆順に計算すればシンプルにできる）\n          this._tmpMatrix.loadIdentity();\n          {\n            this._tmpMatrix.translateRelative(\n              layoutBoundsOnTex01.x,\n              layoutBoundsOnTex01.y\n            );\n            this._tmpMatrix.scaleRelative(scaleX, scaleY); // new = [translate][scale]\n            this._tmpMatrix.translateRelative(\n              -this._tmpBoundsOnModel.x,\n              -this._tmpBoundsOnModel.y\n            );\n            // new = [translate][scale][translate]\n          }\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n        }\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n\n        const clipDrawCount: number = clipContext._clippingIdCount;\n        for (let i = 0; i < clipDrawCount; i++) {\n          const clipDrawIndex: number = clipContext._clippingIdList[i];\n\n          // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n          if (\n            !model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)\n          ) {\n            continue;\n          }\n\n          renderer.setIsCulling(\n            model.getDrawableCulling(clipDrawIndex) != false\n          );\n\n          // マスクがクリアされていないなら処理する\n          if (!this._clearedFrameBufferFlags.at(clipContext._bufferIndex)) {\n            // マスクをクリアする\n            // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n            this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n            this._clearedFrameBufferFlags.set(clipContext._bufferIndex, true);\n          }\n\n          // 今回専用の変換を適用して描く\n          // チャンネルも切り替える必要がある(A,R,G,B)\n          renderer.setClippingContextBufferForMask(clipContext);\n\n          renderer.drawMeshWebGL(model, clipDrawIndex);\n        }\n      }\n\n      // --- 後処理 ---\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\n      renderer.setClippingContextBufferForMask(null);\n\n      this.gl.viewport(\n        s_viewport[0],\n        s_viewport[1],\n        s_viewport[2],\n        s_viewport[3]\n      );\n    }\n  }\n\n  /**\n   * カラーバッファを取得する\n   * @return カラーバッファ\n   */\n  public getColorBuffer(): csmVector<WebGLTexture> {\n    return this._maskColorBuffers;\n  }\n\n  /**\n   * マスクの合計数をカウント\n   * @returns\n   */\n  public getClippingMaskCount(): number {\n    return this._clippingContextListForMask.getSize();\n  }\n\n  public _currentMaskRenderTexture: WebGLFramebuffer; // マスク用レンダーテクスチャのアドレス\n  public _maskRenderTextures: csmVector<WebGLFramebuffer>; // レンダーテクスチャのリスト\n  public _maskColorBuffers: csmVector<WebGLTexture>; // マスク用カラーバッファーのアドレスのリスト\n  public _currentFrameNo: number; // マスクテクスチャに与えるフレーム番号\n\n  public _maskTexture: CubismRenderTextureResource; // マスク用のテクスチャリソースのリスト\n\n  gl: WebGLRenderingContext; // WebGLレンダリングコンテキスト\n}\n\n/**\n * レンダーテクスチャのリソースを定義する構造体\n * クリッピングマスクで使用する\n */\nexport class CubismRenderTextureResource {\n  /**\n   * 引数付きコンストラクタ\n   * @param frameNo レンダラーのフレーム番号\n   * @param texture テクスチャのアドレス\n   */\n  public constructor(frameNo: number, texture: csmVector<WebGLFramebuffer>) {\n    this.frameNo = frameNo;\n    this.textures = texture;\n  }\n\n  public frameNo: number; // レンダラのフレーム番号\n  public textures: csmVector<WebGLFramebuffer>; // テクスチャのアドレス\n}\n\n/**\n * クリッピングマスクのコンテキスト\n */\nexport class CubismClippingContext_WebGL extends CubismClippingContext {\n  /**\n   * 引数付きコンストラクタ\n   */\n  public constructor(\n    manager: CubismClippingManager_WebGL,\n    clippingDrawableIndices: Int32Array,\n    clipCount: number\n  ) {\n    super(clippingDrawableIndices, clipCount);\n    this._owner = manager;\n  }\n\n  /**\n   * このマスクを管理するマネージャのインスタンスを取得する\n   * @return クリッピングマネージャのインスタンス\n   */\n  public getClippingManager(): CubismClippingManager_WebGL {\n    return this._owner;\n  }\n\n  public setGl(gl: WebGLRenderingContext): void {\n    this._owner.setGL(gl);\n  }\n\n  private _owner: CubismClippingManager_WebGL; // このマスクを管理しているマネージャのインスタンス\n}\n\nexport class CubismRendererProfile_WebGL {\n  private setGlEnable(index: GLenum, enabled: GLboolean): void {\n    if (enabled) this.gl.enable(index);\n    else this.gl.disable(index);\n  }\n\n  private setGlEnableVertexAttribArray(\n    index: GLuint,\n    enabled: GLboolean\n  ): void {\n    if (enabled) this.gl.enableVertexAttribArray(index);\n    else this.gl.disableVertexAttribArray(index);\n  }\n\n  public save(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    //-- push state --\n    this._lastArrayBufferBinding = this.gl.getParameter(\n      this.gl.ARRAY_BUFFER_BINDING\n    );\n    this._lastElementArrayBufferBinding = this.gl.getParameter(\n      this.gl.ELEMENT_ARRAY_BUFFER_BINDING\n    );\n    this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);\n\n    this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1をアクティブに（以後の設定対象とする）\n    this._lastTexture1Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0をアクティブに（以後の設定対象とする）\n    this._lastTexture0Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n\n    this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(\n      0,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(\n      1,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(\n      2,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(\n      3,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n\n    this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);\n    this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);\n    this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);\n    this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);\n    this._lastBlend = this.gl.isEnabled(this.gl.BLEND);\n\n    this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);\n\n    this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);\n\n    // backup blending\n    this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);\n    this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);\n    this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);\n    this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);\n\n    // モデル描画直前のFBOとビューポートを保存\n    this._lastFBO = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n    this._lastViewport = this.gl.getParameter(this.gl.VIEWPORT);\n  }\n\n  public restore(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    this.gl.useProgram(this._lastProgram);\n\n    this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);\n    this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);\n    this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);\n    this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);\n\n    this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);\n    this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);\n    this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);\n    this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);\n    this.setGlEnable(this.gl.BLEND, this._lastBlend);\n\n    this.gl.frontFace(this._lastFrontFace);\n\n    this.gl.colorMask(\n      this._lastColorMask[0],\n      this._lastColorMask[1],\n      this._lastColorMask[2],\n      this._lastColorMask[3]\n    );\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      this._lastElementArrayBufferBinding\n    );\n\n    this.gl.activeTexture(this.gl.TEXTURE1); //テクスチャユニット1を復元\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);\n\n    this.gl.activeTexture(this.gl.TEXTURE0); //テクスチャユニット0を復元\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);\n\n    this.gl.activeTexture(this._lastActiveTexture);\n\n    this.gl.blendFuncSeparate(\n      this._lastBlending[0],\n      this._lastBlending[1],\n      this._lastBlending[2],\n      this._lastBlending[3]\n    );\n  }\n\n  public setGl(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n  }\n\n  constructor() {\n    this._lastVertexAttribArrayEnabled = new Array<GLboolean>(4);\n    this._lastColorMask = new Array<GLboolean>(4);\n    this._lastBlending = new Array<GLint>(4);\n    this._lastViewport = new Array<GLint>(4);\n  }\n\n  private _lastArrayBufferBinding: GLint; ///< モデル描画直前の頂点バッファ\n  private _lastElementArrayBufferBinding: GLint; ///< モデル描画直前のElementバッファ\n  private _lastProgram: GLint; ///< モデル描画直前のシェーダプログラムバッファ\n  private _lastActiveTexture: GLint; ///< モデル描画直前のアクティブなテクスチャ\n  private _lastTexture0Binding2D: GLint; ///< モデル描画直前のテクスチャユニット0\n  private _lastTexture1Binding2D: GLint; ///< モデル描画直前のテクスチャユニット1\n  private _lastVertexAttribArrayEnabled: GLboolean[]; ///< モデル描画直前のテクスチャユニット1\n  private _lastScissorTest: GLboolean; ///< モデル描画直前のGL_VERTEX_ATTRIB_ARRAY_ENABLEDパラメータ\n  private _lastBlend: GLboolean; ///< モデル描画直前のGL_SCISSOR_TESTパラメータ\n  private _lastStencilTest: GLboolean; ///< モデル描画直前のGL_STENCIL_TESTパラメータ\n  private _lastDepthTest: GLboolean; ///< モデル描画直前のGL_DEPTH_TESTパラメータ\n  private _lastCullFace: GLboolean; ///< モデル描画直前のGL_CULL_FACEパラメータ\n  private _lastFrontFace: GLint; ///< モデル描画直前のGL_CULL_FACEパラメータ\n  private _lastColorMask: GLboolean[]; ///< モデル描画直前のGL_COLOR_WRITEMASKパラメータ\n  private _lastBlending: GLint[]; ///< モデル描画直前のカラーブレンディングパラメータ\n  private _lastFBO: GLint; ///< モデル描画直前のフレームバッファ\n  private _lastViewport: GLint[]; ///< モデル描画直前のビューポート\n\n  gl: WebGLRenderingContext;\n}\n\n/**\n * WebGL用の描画命令を実装したクラス\n */\nexport class CubismRenderer_WebGL extends CubismRenderer {\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   *\n   * @param model モデルのインスタンス\n   * @param maskBufferCount バッファの生成数\n   */\n  public initialize(model: CubismModel, maskBufferCount = 1): void {\n    if (model.isUsingMasking()) {\n      this._clippingManager = new CubismClippingManager_WebGL(); // クリッピングマスク・バッファ前処理方式を初期化\n      this._clippingManager.initialize(model, maskBufferCount);\n    }\n\n    this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\n\n    super.initialize(model); // 親クラスの処理を呼ぶ\n  }\n\n  /**\n   * WebGLテクスチャのバインド処理\n   * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\n   * @param modelTextureNo セットするモデルテクスチャの番号\n   * @param glTextureNo WebGLテクスチャの番号\n   */\n  public bindTexture(modelTextureNo: number, glTexture: WebGLTexture): void {\n    this._textures.setValue(modelTextureNo, glTexture);\n  }\n\n  /**\n   * WebGLにバインドされたテクスチャのリストを取得する\n   * @return テクスチャのリスト\n   */\n  public getBindedTextures(): csmMap<number, WebGLTexture> {\n    return this._textures;\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  public setClippingMaskBufferSize(size: number) {\n    // クリッピングマスクを利用しない場合は早期リターン\n    if (!this._model.isUsingMasking()) {\n      return;\n    }\n\n    // インスタンス破棄前にレンダーテクスチャの数を保存\n    const renderTextureCount: number =\n      this._clippingManager.getRenderTextureCount();\n\n    // FrameBufferのサイズを変更するためにインスタンスを破棄・再作成する\n    this._clippingManager.release();\n    this._clippingManager = void 0;\n    this._clippingManager = null;\n\n    this._clippingManager = new CubismClippingManager_WebGL();\n\n    this._clippingManager.setClippingMaskBufferSize(size);\n\n    this._clippingManager.initialize(\n      this.getModel(),\n      renderTextureCount // インスタンス破棄前に保存したレンダーテクスチャの数\n    );\n  }\n\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   * @return クリッピングマスクバッファのサイズ\n   */\n  public getClippingMaskBufferSize(): number {\n    return this._model.isUsingMasking()\n      ? this._clippingManager.getClippingMaskBufferSize()\n      : -1;\n  }\n\n  /**\n   * レンダーテクスチャの枚数を取得する\n   * @return レンダーテクスチャの枚数\n   */\n  public getRenderTextureCount(): number {\n    return this._model.isUsingMasking()\n      ? this._clippingManager.getRenderTextureCount()\n      : -1;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._clippingContextBufferForMask = null;\n    this._clippingContextBufferForDraw = null;\n    this._rendererProfile = new CubismRendererProfile_WebGL();\n    this.firstDraw = true;\n    this._textures = new csmMap<number, number>();\n    this._sortedDrawableIndexList = new csmVector<number>();\n    this._bufferData = {\n      vertex: (WebGLBuffer = null),\n      uv: (WebGLBuffer = null),\n      index: (WebGLBuffer = null)\n    };\n\n    // テクスチャ対応マップの容量を確保しておく\n    this._textures.prepareCapacity(32, true);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    if (this._clippingManager) {\n      this._clippingManager.release();\n      this._clippingManager = void 0;\n      this._clippingManager = null;\n    }\n\n    if (this.gl == null) {\n      return;\n    }\n    this.gl.deleteBuffer(this._bufferData.vertex);\n    this._bufferData.vertex = null;\n    this.gl.deleteBuffer(this._bufferData.uv);\n    this._bufferData.uv = null;\n    this.gl.deleteBuffer(this._bufferData.index);\n    this._bufferData.index = null;\n    this._bufferData = null;\n\n    this._textures = null;\n  }\n\n  /**\n   * モデルを描画する実際の処理\n   */\n  public doDrawModel(): void {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n\n    //------------ クリッピングマスク・バッファ前処理方式の場合 ------------\n    if (this._clippingManager != null) {\n      this.preDraw();\n\n      if (this.isUsingHighPrecisionMask()) {\n        this._clippingManager.setupMatrixForHighPrecision(\n          this.getModel(),\n          false\n        );\n      } else {\n        this._clippingManager.setupClippingContext(this.getModel(), this);\n      }\n    }\n\n    // 上記クリッピング処理内でも一度PreDrawを呼ぶので注意!!\n    this.preDraw();\n\n    const drawableCount: number = this.getModel().getDrawableCount();\n    const renderOrder: Int32Array = this.getModel().getDrawableRenderOrders();\n\n    // インデックスを描画順でソート\n    for (let i = 0; i < drawableCount; ++i) {\n      const order: number = renderOrder[i];\n      this._sortedDrawableIndexList.set(order, i);\n    }\n\n    // 描画\n    for (let i = 0; i < drawableCount; ++i) {\n      const drawableIndex: number = this._sortedDrawableIndexList.at(i);\n\n      // Drawableが表示状態でなければ処理をパスする\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n        continue;\n      }\n\n      const clipContext =\n        this._clippingManager != null\n          ? this._clippingManager\n              .getClippingContextListForDraw()\n              .at(drawableIndex)\n          : null;\n\n      if (clipContext != null && this.isUsingHighPrecisionMask()) {\n        // 描くことになっていた\n        if (clipContext._isUsing) {\n          // 生成したFrameBufferと同じサイズでビューポートを設定\n          this.gl.viewport(\n            0,\n            0,\n            this._clippingManager.getClippingMaskBufferSize(),\n            this._clippingManager.getClippingMaskBufferSize()\n          );\n\n          this.preDraw(); // バッファをクリアする\n\n          // ---------- マスク描画処理 ----------\n          // マスク用RenderTextureをactiveにセット\n          this.gl.bindFramebuffer(\n            this.gl.FRAMEBUFFER,\n            clipContext\n              .getClippingManager()\n              .getMaskRenderTexture()\n              .at(clipContext._bufferIndex)\n          );\n\n          // マスクをクリアする\n          // (仮仕様) 1が無効（描かれない）領域、0が有効（描かれる）領域。（シェーダーCd*Csで0に近い値をかけてマスクを作る。1をかけると何も起こらない）\n          this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n          this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        }\n\n        {\n          const clipDrawCount: number = clipContext._clippingIdCount;\n\n          for (let index = 0; index < clipDrawCount; index++) {\n            const clipDrawIndex: number = clipContext._clippingIdList[index];\n\n            // 頂点情報が更新されておらず、信頼性がない場合は描画をパスする\n            if (\n              !this._model.getDrawableDynamicFlagVertexPositionsDidChange(\n                clipDrawIndex\n              )\n            ) {\n              continue;\n            }\n\n            this.setIsCulling(\n              this._model.getDrawableCulling(clipDrawIndex) != false\n            );\n\n            // 今回専用の変換を適用して描く\n            // チャンネルも切り替える必要がある(A,R,G,B)\n            this.setClippingContextBufferForMask(clipContext);\n\n            this.drawMeshWebGL(this._model, clipDrawIndex);\n          }\n        }\n\n        {\n          // --- 後処理 ---\n          this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo); // 描画対象を戻す\n          this.setClippingContextBufferForMask(null);\n\n          this.gl.viewport(\n            s_viewport[0],\n            s_viewport[1],\n            s_viewport[2],\n            s_viewport[3]\n          );\n\n          this.preDraw(); // バッファをクリアする\n        }\n      }\n\n      // クリッピングマスクをセットする\n      this.setClippingContextBufferForDraw(clipContext);\n\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n\n      this.drawMeshWebGL(this._model, drawableIndex);\n    }\n  }\n\n  /**\n   * 描画オブジェクト（アートメッシュ）を描画する。\n   * @param model 描画対象のモデル\n   * @param index 描画対象のメッシュのインデックス\n   */\n  public drawMeshWebGL(model: Readonly<CubismModel>, index: number): void {\n    // 裏面描画の有効・無効\n    if (this.isCulling()) {\n      this.gl.enable(this.gl.CULL_FACE);\n    } else {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n\n    this.gl.frontFace(this.gl.CCW); // Cubism SDK OpenGLはマスク・アートメッシュ共にCCWが表面\n\n    if (this.isGeneratingMask()) {\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        .setupShaderProgramForMask(this, model, index);\n    } else {\n      CubismShaderManager_WebGL.getInstance()\n        .getShader(this.gl)\n        .setupShaderProgramForDraw(this, model, index);\n    }\n\n    {\n      const indexCount: number = model.getDrawableVertexIndexCount(index);\n      this.gl.drawElements(\n        this.gl.TRIANGLES,\n        indexCount,\n        this.gl.UNSIGNED_SHORT,\n        0\n      );\n    }\n\n    // 後処理\n    this.gl.useProgram(null);\n    this.setClippingContextBufferForDraw(null);\n    this.setClippingContextBufferForMask(null);\n  }\n\n  protected saveProfile(): void {\n    this._rendererProfile.save();\n  }\n\n  protected restoreProfile(): void {\n    this._rendererProfile.restore();\n  }\n\n  /**\n   * レンダラが保持する静的なリソースを解放する\n   * WebGLの静的なシェーダープログラムを解放する\n   */\n  public static doStaticRelease(): void {\n    CubismShaderManager_WebGL.deleteInstance();\n  }\n\n  /**\n   * レンダーステートを設定する\n   * @param fbo アプリケーション側で指定しているフレームバッファ\n   * @param viewport ビューポート\n   */\n  public setRenderState(fbo: WebGLFramebuffer, viewport: number[]): void {\n    s_fbo = fbo;\n    s_viewport = viewport;\n  }\n\n  /**\n   * 描画開始時の追加処理\n   * モデルを描画する前にクリッピングマスクに必要な処理を実装している\n   */\n  public preDraw(): void {\n    if (this.firstDraw) {\n      this.firstDraw = false;\n    }\n\n    this.gl.disable(this.gl.SCISSOR_TEST);\n    this.gl.disable(this.gl.STENCIL_TEST);\n    this.gl.disable(this.gl.DEPTH_TEST);\n\n    // カリング（1.0beta3）\n    this.gl.frontFace(this.gl.CW);\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.colorMask(true, true, true, true);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null); // 前にバッファがバインドされていたら破棄する必要がある\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n\n    // 異方性フィルタリングを適用する\n    if (this.getAnisotropy() > 0.0 && this._extension) {\n      for (let i = 0; i < this._textures.getSize(); ++i) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));\n        this.gl.texParameterf(\n          this.gl.TEXTURE_2D,\n          this._extension.TEXTURE_MAX_ANISOTROPY_EXT,\n          this.getAnisotropy()\n        );\n      }\n    }\n  }\n\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストをセットする\n   */\n  public setClippingContextBufferForMask(clip: CubismClippingContext_WebGL) {\n    this._clippingContextBufferForMask = clip;\n  }\n\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストを取得する\n   * @return マスクテクスチャに描画するクリッピングコンテキスト\n   */\n  public getClippingContextBufferForMask(): CubismClippingContext_WebGL {\n    return this._clippingContextBufferForMask;\n  }\n\n  /**\n   * 画面上に描画するクリッピングコンテキストをセットする\n   */\n  public setClippingContextBufferForDraw(\n    clip: CubismClippingContext_WebGL\n  ): void {\n    this._clippingContextBufferForDraw = clip;\n  }\n\n  /**\n   * 画面上に描画するクリッピングコンテキストを取得する\n   * @return 画面上に描画するクリッピングコンテキスト\n   */\n  public getClippingContextBufferForDraw(): CubismClippingContext_WebGL {\n    return this._clippingContextBufferForDraw;\n  }\n\n  /**\n   * マスク生成時かを判定する\n   * @returns 判定値\n   */\n  public isGeneratingMask() {\n    return this.getClippingContextBufferForMask() != null;\n  }\n\n  /**\n   * glの設定\n   */\n  public startUp(gl: WebGLRenderingContext): void {\n    this.gl = gl;\n\n    if (this._clippingManager) {\n      this._clippingManager.setGL(gl);\n    }\n\n    CubismShaderManager_WebGL.getInstance().setGlContext(gl);\n    this._rendererProfile.setGl(gl);\n\n    // 異方性フィルタリングが使用できるかチェック\n    this._extension =\n      this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n      this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\n      this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\n  }\n\n  _textures: csmMap<number, WebGLTexture>; // モデルが参照するテクスチャとレンダラでバインドしているテクスチャとのマップ\n  _sortedDrawableIndexList: csmVector<number>; // 描画オブジェクトのインデックスを描画順に並べたリスト\n  _clippingManager: CubismClippingManager_WebGL; // クリッピングマスク管理オブジェクト\n  _clippingContextBufferForMask: CubismClippingContext_WebGL; // マスクテクスチャに描画するためのクリッピングコンテキスト\n  _clippingContextBufferForDraw: CubismClippingContext_WebGL; // 画面上描画するためのクリッピングコンテキスト\n  _rendererProfile: CubismRendererProfile_WebGL;\n  firstDraw: boolean;\n  _bufferData: {\n    vertex: WebGLBuffer;\n    uv: WebGLBuffer;\n    index: WebGLBuffer;\n  }; // 頂点バッファデータ\n  _extension: any; // 拡張機能\n  gl: WebGLRenderingContext; // webglコンテキスト\n}\n\n/**\n * レンダラが保持する静的なリソースを開放する\n */\nCubismRenderer.staticRelease = (): void => {\n  CubismRenderer_WebGL.doStaticRelease();\n};\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismrenderer_webgl';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismClippingContext = $.CubismClippingContext_WebGL;\n  export type CubismClippingContext = $.CubismClippingContext_WebGL;\n  export const CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\n  export type CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;\n  export const CubismRenderTextureResource = $.CubismRenderTextureResource;\n  export type CubismRenderTextureResource = $.CubismRenderTextureResource;\n  export const CubismRenderer_WebGL = $.CubismRenderer_WebGL;\n  export type CubismRenderer_WebGL = $.CubismRenderer_WebGL;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport {\n  CubismBlendMode,\n  CubismTextureColor\n} from '../rendering/cubismrenderer';\nimport { csmMap } from '../type/csmmap';\nimport { csmVector } from '../type/csmvector';\nimport { CSM_ASSERT } from '../utils/cubismdebug';\n\n/**\n * SDK側から与えられたDrawableの乗算色・スクリーン色上書きフラグと\n * その色を保持する構造体\n */\nexport class DrawableColorData {\n  constructor(\n    isOverwritten = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverwritten = isOverwritten;\n    this.color = color;\n  }\n\n  public isOverwritten: boolean;\n  public color: CubismTextureColor;\n}\n/**\n * @brief テクスチャの色をRGBAで扱うための構造体\n */\nexport class PartColorData {\n  constructor(\n    isOverwritten = false,\n    color: CubismTextureColor = new CubismTextureColor()\n  ) {\n    this.isOverwritten = isOverwritten;\n    this.color = color;\n  }\n\n  public isOverwritten: boolean;\n  public color: CubismTextureColor;\n}\n\n/**\n * テクスチャのカリング設定を管理するための構造体\n */\nexport class DrawableCullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverwritten\n   * @param isCulling\n   */\n  public constructor(isOverwritten = false, isCulling = false) {\n    this.isOverwritten = isOverwritten;\n    this.isCulling = isCulling;\n  }\n\n  public isOverwritten: boolean;\n  public isCulling: boolean;\n}\n\n/**\n * モデル\n *\n * Mocデータから生成されるモデルのクラス。\n */\nexport class CubismModel {\n  /**\n   * モデルのパラメータの更新\n   */\n  public update(): void {\n    // Update model\n    this._model.update();\n\n    this._model.drawables.resetDynamicFlags();\n  }\n\n  /**\n   * PixelsPerUnitを取得する\n   * @returns PixelsPerUnit\n   */\n  public getPixelsPerUnit(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return this._model.canvasinfo.PixelsPerUnit;\n  }\n\n  /**\n   * キャンバスの幅を取得する\n   */\n  public getCanvasWidth(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * キャンバスの高さを取得する\n   */\n  public getCanvasHeight(): number {\n    if (this._model == null) {\n      return 0.0;\n    }\n\n    return (\n      this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit\n    );\n  }\n\n  /**\n   * パラメータを保存する\n   */\n  public saveParameters(): void {\n    const parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters.set(i, this._parameterValues[i]);\n      } else {\n        this._savedParameters.pushBack(this._parameterValues[i]);\n      }\n    }\n  }\n\n  /**\n   * 乗算色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableの乗算色(RGBA)\n   */\n  public getMultiplyColor(index: number): CubismTextureColor {\n    // Drawableとモデル全体の乗算色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (\n      this.getOverwriteFlagForModelMultiplyColors() ||\n      this.getOverwriteFlagForDrawableMultiplyColors(index)\n    ) {\n      return this._userMultiplyColors.at(index).color;\n    }\n\n    const color = this.getDrawableMultiplyColor(index);\n    return color;\n  }\n\n  /**\n   * スクリーン色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableのスクリーン色(RGBA)\n   */\n  public getScreenColor(index: number): CubismTextureColor {\n    // Drawableとモデル全体のスクリーン色上書きフラグがどちらもtrueな場合、モデル全体の上書きフラグが優先される\n    if (\n      this.getOverwriteFlagForModelScreenColors() ||\n      this.getOverwriteFlagForDrawableScreenColors(index)\n    ) {\n      return this._userScreenColors.at(index).color;\n    }\n\n    const color = this.getDrawableScreenColor(index);\n    return color;\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setMultiplyColorByTextureColor(\n    index: number,\n    color: CubismTextureColor\n  ) {\n    this.setMultiplyColorByRGBA(index, color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setMultiplyColorByRGBA(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userMultiplyColors.at(index).color.r = r;\n    this._userMultiplyColors.at(index).color.g = g;\n    this._userMultiplyColors.at(index).color.b = b;\n    this._userMultiplyColors.at(index).color.a = a;\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setScreenColorByTextureColor(\n    index: number,\n    color: CubismTextureColor\n  ) {\n    this.setScreenColorByRGBA(index, color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setScreenColorByRGBA(\n    index: number,\n    r: number,\n    g: number,\n    b: number,\n    a = 1.0\n  ) {\n    this._userScreenColors.at(index).color.r = r;\n    this._userScreenColors.at(index).color.g = g;\n    this._userScreenColors.at(index).color.b = b;\n    this._userScreenColors.at(index).color.a = a;\n  }\n  /**\n   * partの乗算色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartの乗算色\n   */\n  public getPartMultiplyColor(partIndex: number): CubismTextureColor {\n    return this._userPartMultiplyColors.at(partIndex).color;\n  }\n\n  /**\n   * partのスクリーン色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartのスクリーン色\n   */\n  public getPartScreenColor(partIndex: number): CubismTextureColor {\n    return this._userPartScreenColors.at(partIndex).color;\n  }\n\n  /**\n   * partのOverwriteColor setter関数\n   * @param partIndex partのインデックス\n   * @param r 設定する色のR値\n   * @param g 設定する色のG値\n   * @param b 設定する色のB値\n   * @param a 設定する色のA値\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setPartColor(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number,\n    partColors: csmVector<PartColorData>,\n    drawableColors: csmVector<DrawableColorData>\n  ) {\n    partColors.at(partIndex).color.r = r;\n    partColors.at(partIndex).color.g = g;\n    partColors.at(partIndex).color.b = b;\n    partColors.at(partIndex).color.a = a;\n\n    if (partColors.at(partIndex).isOverwritten) {\n      for (\n        let i = 0;\n        i < this._partChildDrawables.at(partIndex).getSize();\n        ++i\n      ) {\n        const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n        drawableColors.at(drawableIndex).color.r = r;\n        drawableColors.at(drawableIndex).color.g = g;\n        drawableColors.at(drawableIndex).color.b = b;\n        drawableColors.at(drawableIndex).color.a = a;\n      }\n    }\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  public setPartMultiplyColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartMultiplyColorByRGBA(\n      partIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  public setPartMultiplyColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  public setPartScreenColorByTextureColor(\n    partIndex: number,\n    color: CubismTextureColor\n  ) {\n    this.setPartScreenColorByRGBA(\n      partIndex,\n      color.r,\n      color.g,\n      color.b,\n      color.a\n    );\n  }\n\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  public setPartScreenColorByRGBA(\n    partIndex: number,\n    r: number,\n    g: number,\n    b: number,\n    a: number\n  ) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelMultiplyColors(): boolean {\n    return this._isOverwrittenModelMultiplyColors;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForModelScreenColors(): boolean {\n    return this._isOverwrittenModelScreenColors;\n  }\n\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelMultiplyColors(value: boolean) {\n    this._isOverwrittenModelMultiplyColors = value;\n  }\n\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForModelScreenColors(value: boolean) {\n    this._isOverwrittenModelScreenColors = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableMultiplyColors(\n    drawableindex: number\n  ): boolean {\n    return this._userMultiplyColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  public getOverwriteFlagForDrawableScreenColors(\n    drawableindex: number\n  ): boolean {\n    return this._userScreenColors.at(drawableindex).isOverwritten;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableMultiplyColors(\n    drawableindex: number,\n    value: boolean\n  ) {\n    this._userMultiplyColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteFlagForDrawableScreenColors(\n    drawableindex: number,\n    value: boolean\n  ) {\n    this._userScreenColors.at(drawableindex).isOverwritten = value;\n  }\n\n  /**\n   * SDKからpartの乗算色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartMultiplyColors(partIndex: number) {\n    return this._userPartMultiplyColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  public getOverwriteColorForPartScreenColors(partIndex: number) {\n    return this._userPartScreenColors.at(partIndex).isOverwritten;\n  }\n\n  /**\n   * partのOverwriteFlag setter関数\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  public setOverwriteColorForPartColors(\n    partIndex: number,\n    value: boolean,\n    partColors: csmVector<PartColorData>,\n    drawableColors: csmVector<DrawableColorData>\n  ) {\n    partColors.at(partIndex).isOverwritten = value;\n\n    for (let i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {\n      const drawableIndex = this._partChildDrawables.at(partIndex).at(i);\n      drawableColors.at(drawableIndex).isOverwritten = value;\n\n      if (value) {\n        drawableColors.at(drawableIndex).color.r =\n          partColors.at(partIndex).color.r;\n        drawableColors.at(drawableIndex).color.g =\n          partColors.at(partIndex).color.g;\n        drawableColors.at(drawableIndex).color.b =\n          partColors.at(partIndex).color.b;\n        drawableColors.at(drawableIndex).color.a =\n          partColors.at(partIndex).color.a;\n      }\n    }\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartMultiplyColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartMultiplyColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  public setOverwriteColorForPartScreenColors(\n    partIndex: number,\n    value: boolean\n  ) {\n    this._userPartScreenColors.at(partIndex).isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n\n  /**\n   * Drawableのカリング情報を取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @return  Drawableのカリング情報\n   */\n  public getDrawableCulling(drawableIndex: number): boolean {\n    if (\n      this.getOverwriteFlagForModelCullings() ||\n      this.getOverwriteFlagForDrawableCullings(drawableIndex)\n    ) {\n      return this._userCullings.at(drawableIndex).isCulling;\n    }\n\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのカリング情報を設定する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isCulling カリング情報\n   */\n  public setDrawableCulling(drawableIndex: number, isCulling: boolean): void {\n    this._userCullings.at(drawableIndex).isCulling = isCulling;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForModelCullings(): boolean {\n    return this._isOverwrittenCullings;\n  }\n\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForModelCullings(\n    isOverwrittenCullings: boolean\n  ): void {\n    this._isOverwrittenCullings = isOverwrittenCullings;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  public getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean {\n    return this._userCullings.at(drawableIndex).isOverwritten;\n  }\n\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  public setOverwriteFlagForDrawableCullings(\n    drawableIndex: number,\n    isOverwrittenCullings: boolean\n  ): void {\n    this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;\n  }\n\n  /**\n   * モデルの不透明度を取得する\n   *\n   * @returns 不透明度の値\n   */\n  public getModelOapcity(): number {\n    return this._modelOpacity;\n  }\n\n  /**\n   * モデルの不透明度を設定する\n   *\n   * @param value 不透明度の値\n   */\n  public setModelOapcity(value: number) {\n    this._modelOpacity = value;\n  }\n\n  /**\n   * モデルを取得\n   */\n  public getModel(): Live2DCubismCore.Model {\n    return this._model;\n  }\n\n  /**\n   * パーツのインデックスを取得\n   * @param partId パーツのID\n   * @return パーツのインデックス\n   */\n  public getPartIndex(partId: CubismIdHandle): number {\n    let partIndex: number;\n    const partCount: number = this._model.parts.count;\n\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds.at(partIndex)) {\n        return partIndex;\n      }\n    }\n\n    // モデルに存在していない場合、非存在パーツIDリスト内にあるかを検索し、そのインデックスを返す\n    if (this._notExistPartId.isExist(partId)) {\n      return this._notExistPartId.getValue(partId);\n    }\n\n    // 非存在パーツIDリストにない場合、新しく要素を追加する\n    partIndex = partCount + this._notExistPartId.getSize();\n    this._notExistPartId.setValue(partId, partIndex);\n    this._notExistPartOpacities.appendKey(partIndex);\n\n    return partIndex;\n  }\n\n  /**\n   * パーツのIDを取得する。\n   *\n   * @param partIndex 取得するパーツのインデックス\n   * @return パーツのID\n   */\n  public getPartId(partIndex: number): CubismIdHandle {\n    const partId = this._model.parts.ids[partIndex];\n    return CubismFramework.getIdManager().getId(partId);\n  }\n\n  /**\n   * パーツの個数の取得\n   * @return パーツの個数\n   */\n  public getPartCount(): number {\n    const partCount: number = this._model.parts.count;\n    return partCount;\n  }\n\n  /**\n   * パーツの不透明度の設定(Index)\n   * @param partIndex パーツのインデックス\n   * @param opacity 不透明度\n   */\n  public setPartOpacityByIndex(partIndex: number, opacity: number): void {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      this._notExistPartOpacities.setValue(partIndex, opacity);\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    this._partOpacities[partIndex] = opacity;\n  }\n\n  /**\n   * パーツの不透明度の設定(Id)\n   * @param partId パーツのID\n   * @param opacity パーツの不透明度\n   */\n  public setPartOpacityById(partId: CubismIdHandle, opacity: number): void {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return; // パーツがないのでスキップ\n    }\n\n    this.setPartOpacityByIndex(index, opacity);\n  }\n\n  /**\n   * パーツの不透明度の取得(index)\n   * @param partIndex パーツのインデックス\n   * @return パーツの不透明度\n   */\n  public getPartOpacityByIndex(partIndex: number): number {\n    if (this._notExistPartOpacities.isExist(partIndex)) {\n      // モデルに存在しないパーツIDの場合、非存在パーツリストから不透明度を返す。\n      return this._notExistPartOpacities.getValue(partIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n\n    return this._partOpacities[partIndex];\n  }\n\n  /**\n   * パーツの不透明度の取得(id)\n   * @param partId パーツのＩｄ\n   * @return パーツの不透明度\n   */\n  public getPartOpacityById(partId: CubismIdHandle): number {\n    // 高速化のためにPartIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const index: number = this.getPartIndex(partId);\n\n    if (index < 0) {\n      return 0; // パーツが無いのでスキップ\n    }\n\n    return this.getPartOpacityByIndex(index);\n  }\n\n  /**\n   * パラメータのインデックスの取得\n   * @param パラメータID\n   * @return パラメータのインデックス\n   */\n  public getParameterIndex(parameterId: CubismIdHandle): number {\n    let parameterIndex: number;\n    const idCount: number = this._model.parameters.count;\n\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds.at(parameterIndex)) {\n        continue;\n      }\n\n      return parameterIndex;\n    }\n\n    // モデルに存在していない場合、非存在パラメータIDリスト内を検索し、そのインデックスを返す\n    if (this._notExistParameterId.isExist(parameterId)) {\n      return this._notExistParameterId.getValue(parameterId);\n    }\n\n    // 非存在パラメータIDリストにない場合新しく要素を追加する\n    parameterIndex =\n      this._model.parameters.count + this._notExistParameterId.getSize();\n\n    this._notExistParameterId.setValue(parameterId, parameterIndex);\n    this._notExistParameterValues.appendKey(parameterIndex);\n\n    return parameterIndex;\n  }\n\n  /**\n   * パラメータの個数の取得\n   * @return パラメータの個数\n   */\n  public getParameterCount(): number {\n    return this._model.parameters.count;\n  }\n\n  /**\n   * パラメータの種類の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return csmParameterType_Normal -> 通常のパラメータ\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\n   */\n  public getParameterType(\n    parameterIndex: number\n  ): Live2DCubismCore.csmParameterType {\n    return this._model.parameters.types[parameterIndex];\n  }\n\n  /**\n   * パラメータの最大値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最大値\n   */\n  public getParameterMaximumValue(parameterIndex: number): number {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの最小値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最小値\n   */\n  public getParameterMinimumValue(parameterIndex: number): number {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n\n  /**\n   * パラメータのデフォルト値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータのデフォルト値\n   */\n  public getParameterDefaultValue(parameterIndex: number): number {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n\n  /**\n   * 指定したパラメータindexのIDを取得\n   *\n   * @param parameterIndex パラメータのインデックス\n   * @returns パラメータID\n   */\n  public getParameterId(parameterIndex: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._model.parameters.ids[parameterIndex]\n    );\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterIndex    パラメータのインデックス\n   * @return パラメータの値\n   */\n  public getParameterValueByIndex(parameterIndex: number): number {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      return this._notExistParameterValues.getValue(parameterIndex);\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    return this._parameterValues[parameterIndex];\n  }\n\n  /**\n   * パラメータの値の取得\n   * @param parameterId    パラメータのID\n   * @return パラメータの値\n   */\n  public getParameterValueById(parameterId: CubismIdHandle): number {\n    // 高速化のためにparameterIndexを取得できる機構になっているが、外部からの設定の時は呼び出し頻度が低いため不要\n    const parameterIndex: number = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterIndex パラメータのインデックス\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    if (this._notExistParameterValues.isExist(parameterIndex)) {\n      this._notExistParameterValues.setValue(\n        parameterIndex,\n        weight == 1\n          ? value\n          : this._notExistParameterValues.getValue(parameterIndex) *\n              (1 - weight) +\n              value * weight\n      );\n\n      return;\n    }\n\n    // インデックスの範囲内検知\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\n      value = this._model.parameters.maximumValues[parameterIndex];\n    }\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\n      value = this._model.parameters.minimumValues[parameterIndex];\n    }\n\n    this._parameterValues[parameterIndex] =\n      weight == 1\n        ? value\n        : (this._parameterValues[parameterIndex] =\n            this._parameterValues[parameterIndex] * (1 - weight) +\n            value * weight);\n  }\n\n  /**\n   * パラメータの値の設定\n   * @param parameterId パラメータのID\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  public setParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の加算(index)\n   * @param parameterIndex パラメータインデックス\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) + value * weight\n    );\n  }\n\n  /**\n   * パラメータの値の加算(id)\n   * @param parameterId パラメータＩＤ\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  public addParameterValueById(\n    parameterId: any,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterId パラメータのID\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueById(\n    parameterId: CubismIdHandle,\n    value: number,\n    weight = 1.0\n  ): void {\n    const index: number = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n\n  /**\n   * パラメータの値の乗算\n   * @param parameterIndex パラメータのインデックス\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  public multiplyParameterValueByIndex(\n    parameterIndex: number,\n    value: number,\n    weight = 1.0\n  ): void {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) *\n        (1.0 + (value - 1.0) * weight)\n    );\n  }\n\n  /**\n   * Drawableのインデックスの取得\n   * @param drawableId DrawableのID\n   * @return Drawableのインデックス\n   */\n  public getDrawableIndex(drawableId: CubismIdHandle): number {\n    const drawableCount = this._model.drawables.count;\n\n    for (\n      let drawableIndex = 0;\n      drawableIndex < drawableCount;\n      ++drawableIndex\n    ) {\n      if (this._drawableIds.at(drawableIndex) == drawableId) {\n        return drawableIndex;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Drawableの個数の取得\n   * @return drawableの個数\n   */\n  public getDrawableCount(): number {\n    const drawableCount = this._model.drawables.count;\n    return drawableCount;\n  }\n\n  /**\n   * DrawableのIDを取得する\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのID\n   */\n  public getDrawableId(drawableIndex: number): CubismIdHandle {\n    const parameterIds: string[] = this._model.drawables.ids;\n    return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\n  }\n\n  /**\n   * Drawableの描画順リストの取得\n   * @return Drawableの描画順リスト\n   */\n  public getDrawableRenderOrders(): Int32Array {\n    const renderOrders: Int32Array = this._model.drawables.renderOrders;\n    return renderOrders;\n  }\n\n  /**\n   * @deprecated\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\n   *\n   * Drawableのテクスチャインデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックスリスト\n   */\n  public getDrawableTextureIndices(drawableIndex: number): number {\n    return this.getDrawableTextureIndex(drawableIndex);\n  }\n\n  /**\n   * Drawableのテクスチャインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックス\n   */\n  public getDrawableTextureIndex(drawableIndex: number): number {\n    const textureIndices: Int32Array = this._model.drawables.textureIndices;\n    return textureIndices[drawableIndex];\n  }\n\n  /**\n   * DrawableのVertexPositionsの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\n   */\n  public getDrawableDynamicFlagVertexPositionsDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの頂点インデックスの個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスの個数\n   */\n  public getDrawableVertexIndexCount(drawableIndex: number): number {\n    const indexCounts: Int32Array = this._model.drawables.indexCounts;\n    return indexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点の個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点の個数\n   */\n  public getDrawableVertexCount(drawableIndex: number): number {\n    const vertexCounts = this._model.drawables.vertexCounts;\n    return vertexCounts[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertices(drawableIndex: number): Float32Array {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n\n  /**\n   * Drawableの頂点インデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスリスト\n   */\n  public getDrawableVertexIndices(drawableIndex: number): Uint16Array {\n    const indicesArray: Uint16Array[] = this._model.drawables.indices;\n    return indicesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  public getDrawableVertexPositions(drawableIndex: number): Float32Array {\n    const verticesArray: Float32Array[] = this._model.drawables.vertexPositions;\n    return verticesArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの頂点のUVリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点UVリスト\n   */\n  public getDrawableVertexUvs(drawableIndex: number): Float32Array {\n    const uvsArray: Float32Array[] = this._model.drawables.vertexUvs;\n    return uvsArray[drawableIndex];\n  }\n\n  /**\n   * Drawableの不透明度の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの不透明度\n   */\n  public getDrawableOpacity(drawableIndex: number): number {\n    const opacities: Float32Array = this._model.drawables.opacities;\n    return opacities[drawableIndex];\n  }\n\n  /**\n   * Drawableの乗算色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor {\n    const multiplyColors: Float32Array = this._model.drawables.multiplyColors;\n    const index = drawableIndex * 4;\n    const multiplyColor: CubismTextureColor = new CubismTextureColor();\n    multiplyColor.r = multiplyColors[index];\n    multiplyColor.g = multiplyColors[index + 1];\n    multiplyColor.b = multiplyColors[index + 2];\n    multiplyColor.a = multiplyColors[index + 3];\n    return multiplyColor;\n  }\n\n  /**\n   * Drawableのスクリーン色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  public getDrawableScreenColor(drawableIndex: number): CubismTextureColor {\n    const screenColors: Float32Array = this._model.drawables.screenColors;\n    const index = drawableIndex * 4;\n    const screenColor: CubismTextureColor = new CubismTextureColor();\n    screenColor.r = screenColors[index];\n    screenColor.g = screenColors[index + 1];\n    screenColor.b = screenColors[index + 2];\n    screenColor.a = screenColors[index + 3];\n    return screenColor;\n  }\n\n  /**\n   * Drawableの親パーツのインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの親パーツのインデックス\n   */\n  public getDrawableParentPartIndex(drawableIndex: number): number {\n    return this._model.drawables.parentPartIndices[drawableIndex];\n  }\n\n  /**\n   * Drawableのブレンドモードを取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのブレンドモード\n   */\n  public getDrawableBlendMode(drawableIndex: number): CubismBlendMode {\n    const constantFlags = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\n      constantFlags[drawableIndex]\n    )\n      ? CubismBlendMode.CubismBlendMode_Additive\n      : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\n            constantFlags[drawableIndex]\n          )\n        ? CubismBlendMode.CubismBlendMode_Multiplicative\n        : CubismBlendMode.CubismBlendMode_Normal;\n  }\n\n  /**\n   * Drawableのマスクの反転使用の取得\n   *\n   * Drawableのマスク使用時の反転設定を取得する。\n   * マスクを使用しない場合は無視される。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableの反転設定\n   */\n  public getDrawableInvertedMaskBit(drawableIndex: number): boolean {\n    const constantFlags: Uint8Array = this._model.drawables.constantFlags;\n\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\n      constantFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableのクリッピングマスクリストの取得\n   * @return Drawableのクリッピングマスクリスト\n   */\n  public getDrawableMasks(): Int32Array[] {\n    const masks: Int32Array[] = this._model.drawables.masks;\n    return masks;\n  }\n\n  /**\n   * Drawableのクリッピングマスクの個数リストの取得\n   * @return Drawableのクリッピングマスクの個数リスト\n   */\n  public getDrawableMaskCounts(): Int32Array {\n    const maskCounts: Int32Array = this._model.drawables.maskCounts;\n    return maskCounts;\n  }\n\n  /**\n   * クリッピングマスクの使用状態\n   *\n   * @return true クリッピングマスクを使用している\n   * @return false クリッピングマスクを使用していない\n   */\n  public isUsingMasking(): boolean {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Drawableの表示情報を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableが表示\n   * @return false Drawableが非表示\n   */\n  public getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n\n  /**\n   * DrawableのDrawOrderの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\n   * drawOrderはartMesh上で指定する0から1000の情報\n   * @param drawableIndex drawableのインデックス\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\n   */\n  public getDrawableDynamicFlagVisibilityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの不透明度の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\n   *\n   * @param drawableIndex drawableのインデックス\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagOpacityDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの描画順序の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagRenderOrderDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * Drawableの乗算色・スクリーン色の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\n   */\n  public getDrawableDynamicFlagBlendColorDidChange(\n    drawableIndex: number\n  ): boolean {\n    const dynamicFlags: Uint8Array = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n\n  /**\n   * 保存されたパラメータの読み込み\n   */\n  public loadParameters(): void {\n    let parameterCount: number = this._model.parameters.count;\n    const savedParameterCount: number = this._savedParameters.getSize();\n\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters.at(i);\n    }\n  }\n\n  /**\n   * 初期化する\n   */\n  public initialize(): void {\n    CSM_ASSERT(this._model);\n\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n\n    {\n      const parameterIds: string[] = this._model.parameters.ids;\n      const parameterCount: number = this._model.parameters.count;\n\n      this._parameterIds.prepareCapacity(parameterCount);\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.pushBack(\n          CubismFramework.getIdManager().getId(parameterIds[i])\n        );\n      }\n    }\n\n    const partCount: number = this._model.parts.count;\n    {\n      const partIds: string[] = this._model.parts.ids;\n\n      this._partIds.prepareCapacity(partCount);\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.pushBack(\n          CubismFramework.getIdManager().getId(partIds[i])\n        );\n      }\n\n      this._userPartMultiplyColors.prepareCapacity(partCount);\n      this._userPartScreenColors.prepareCapacity(partCount);\n\n      this._partChildDrawables.prepareCapacity(partCount);\n    }\n\n    {\n      const drawableIds: string[] = this._model.drawables.ids;\n      const drawableCount: number = this._model.drawables.count;\n\n      this._userMultiplyColors.prepareCapacity(drawableCount);\n      this._userScreenColors.prepareCapacity(drawableCount);\n\n      // カリング設定\n      this._userCullings.prepareCapacity(drawableCount);\n      const userCulling: DrawableCullingData = new DrawableCullingData(\n        false,\n        false\n      );\n\n      // Part\n      {\n        for (let i = 0; i < partCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: PartColorData = new PartColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: PartColorData = new PartColorData(\n            false,\n            screenColor\n          );\n\n          this._userPartMultiplyColors.pushBack(userMultiplyColor);\n          this._userPartScreenColors.pushBack(userScreenColor);\n          this._partChildDrawables.pushBack(new csmVector<number>());\n          this._partChildDrawables.at(i).prepareCapacity(drawableCount);\n        }\n      }\n\n      // Drawables\n      {\n        for (let i = 0; i < drawableCount; ++i) {\n          const multiplyColor: CubismTextureColor = new CubismTextureColor(\n            1.0,\n            1.0,\n            1.0,\n            1.0\n          );\n          const screenColor: CubismTextureColor = new CubismTextureColor(\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          const userMultiplyColor: DrawableColorData = new DrawableColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor: DrawableColorData = new DrawableColorData(\n            false,\n            screenColor\n          );\n\n          this._drawableIds.pushBack(\n            CubismFramework.getIdManager().getId(drawableIds[i])\n          );\n\n          this._userMultiplyColors.pushBack(userMultiplyColor);\n          this._userScreenColors.pushBack(userScreenColor);\n\n          this._userCullings.pushBack(userCulling);\n\n          const parentIndex = this.getDrawableParentPartIndex(i);\n          if (parentIndex >= 0) {\n            this._partChildDrawables.at(parentIndex).pushBack(i);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * コンストラクタ\n   * @param model モデル\n   */\n  public constructor(model: Live2DCubismCore.Model) {\n    this._model = model;\n    this._parameterValues = null;\n    this._parameterMaximumValues = null;\n    this._parameterMinimumValues = null;\n    this._partOpacities = null;\n    this._savedParameters = new csmVector<number>();\n    this._parameterIds = new csmVector<CubismIdHandle>();\n    this._drawableIds = new csmVector<CubismIdHandle>();\n    this._partIds = new csmVector<CubismIdHandle>();\n    this._isOverwrittenModelMultiplyColors = false;\n    this._isOverwrittenModelScreenColors = false;\n    this._isOverwrittenCullings = false;\n    this._modelOpacity = 1.0;\n\n    this._userMultiplyColors = new csmVector<DrawableColorData>();\n    this._userScreenColors = new csmVector<DrawableColorData>();\n    this._userCullings = new csmVector<DrawableCullingData>();\n    this._userPartMultiplyColors = new csmVector<PartColorData>();\n    this._userPartScreenColors = new csmVector<PartColorData>();\n    this._partChildDrawables = new csmVector<csmVector<number>>();\n\n    this._notExistPartId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterId = new csmMap<CubismIdHandle, number>();\n    this._notExistParameterValues = new csmMap<number, number>();\n    this._notExistPartOpacities = new csmMap<number, number>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._model.release();\n    this._model = null;\n  }\n\n  private _notExistPartOpacities: csmMap<number, number>; // 存在していないパーツの不透明度のリスト\n  private _notExistPartId: csmMap<CubismIdHandle, number>; // 存在していないパーツIDのリスト\n\n  private _notExistParameterValues: csmMap<number, number>; // 存在していないパラメータの値のリスト\n  private _notExistParameterId: csmMap<CubismIdHandle, number>; // 存在していないパラメータIDのリスト\n\n  private _savedParameters: csmVector<number>; // 保存されたパラメータ\n\n  private _isOverwrittenModelMultiplyColors: boolean; // SDK上でモデル全体の乗算色を上書きするか判定するフラグ\n  private _isOverwrittenModelScreenColors: boolean; // SDK上でモデル全体のスクリーン色を上書きするか判定するフラグ\n  private _userMultiplyColors: csmVector<DrawableColorData>; // Drawableごとに設定する乗算色と上書きフラグを管理するリスト\n  private _userScreenColors: csmVector<DrawableColorData>; // Drawableごとに設定するスクリーン色と上書きフラグを管理するリスト\n  private _userPartScreenColors: csmVector<PartColorData>; // Part 乗算色の配列\n  private _userPartMultiplyColors: csmVector<PartColorData>; // Part スクリーン色の配列\n  private _partChildDrawables: csmVector<csmVector<number>>; // Partの子DrawableIndexの配列\n\n  private _model: Live2DCubismCore.Model; // モデル\n\n  private _parameterValues: Float32Array; // パラメータの値のリスト\n  private _parameterMaximumValues: Float32Array; // パラメータの最大値のリスト\n  private _parameterMinimumValues: Float32Array; // パラメータの最小値のリスト\n\n  private _partOpacities: Float32Array; // パーツの不透明度のリスト\n\n  private _modelOpacity: number; // モデルの不透明度\n\n  private _parameterIds: csmVector<CubismIdHandle>;\n  private _partIds: csmVector<CubismIdHandle>;\n  private _drawableIds: csmVector<CubismIdHandle>;\n\n  private _isOverwrittenCullings: boolean; // モデルのカリング設定をすべて上書きするか？\n  private _userCullings: csmVector<DrawableCullingData>; // カリング設定の配列\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModel = $.CubismModel;\n  export type CubismModel = $.CubismModel;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CSM_ASSERT, CubismLogError } from '../utils/cubismdebug';\nimport { CubismModel } from './cubismmodel';\n\n/**\n * Mocデータの管理\n *\n * Mocデータの管理を行うクラス。\n */\nexport class CubismMoc {\n  /**\n   * Mocデータの作成\n   */\n  public static create(\n    mocBytes: ArrayBuffer,\n    shouldCheckMocConsistency: boolean\n  ): CubismMoc {\n    let cubismMoc: CubismMoc = null;\n\n    if (shouldCheckMocConsistency) {\n      // .moc3の整合性を確認\n      const consistency = this.hasMocConsistency(mocBytes);\n\n      if (!consistency) {\n        // 整合性が確認できなければ処理しない\n        CubismLogError(`Inconsistent MOC3.`);\n        return cubismMoc;\n      }\n    }\n\n    const moc: Live2DCubismCore.Moc =\n      Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\n\n    if (moc) {\n      cubismMoc = new CubismMoc(moc);\n      cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(\n        moc,\n        mocBytes\n      );\n    }\n\n    return cubismMoc;\n  }\n\n  /**\n   * Mocデータを削除\n   *\n   * Mocデータを削除する\n   */\n  public static delete(moc: CubismMoc): void {\n    moc._moc._release();\n    moc._moc = null;\n    moc = null;\n  }\n\n  /**\n   * モデルを作成する\n   *\n   * @return Mocデータから作成されたモデル\n   */\n  createModel(): CubismModel {\n    let cubismModel: CubismModel = null;\n\n    const model: Live2DCubismCore.Model = Live2DCubismCore.Model.fromMoc(\n      this._moc\n    );\n\n    if (model) {\n      cubismModel = new CubismModel(model);\n      cubismModel.initialize();\n\n      ++this._modelCount;\n    }\n\n    return cubismModel;\n  }\n\n  /**\n   * モデルを削除する\n   */\n  deleteModel(model: CubismModel): void {\n    if (model != null) {\n      model.release();\n      model = null;\n      --this._modelCount;\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  private constructor(moc: Live2DCubismCore.Moc) {\n    this._moc = moc;\n    this._modelCount = 0;\n    this._mocVersion = 0;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CSM_ASSERT(this._modelCount == 0);\n\n    this._moc._release();\n    this._moc = null;\n  }\n\n  /**\n   * 最新の.moc3 Versionを取得\n   */\n  public getLatestMocVersion(): number {\n    return Live2DCubismCore.Version.csmGetLatestMocVersion();\n  }\n\n  /**\n   * 読み込んだモデルの.moc3 Versionを取得\n   */\n  public getMocVersion(): number {\n    return this._mocVersion;\n  }\n\n  /**\n   * .moc3 の整合性を検証する\n   */\n  public static hasMocConsistency(mocBytes: ArrayBuffer): boolean {\n    const isConsistent =\n      Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);\n    return isConsistent === 1 ? true : false;\n  }\n\n  _moc: Live2DCubismCore.Moc; // Mocデータ\n  _modelCount: number; // Mocデータから作られたモデルの個数\n  _mocVersion: number; // 読み込んだモデルの.moc3 Version\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmoc';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismMoc = $.CubismMoc;\n  export type CubismMoc = $.CubismMoc;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { CubismJson } from '../utils/cubismjson';\n\nconst Meta = 'Meta';\nconst UserDataCount = 'UserDataCount';\nconst TotalUserDataSize = 'TotalUserDataSize';\nconst UserData = 'UserData';\nconst Target = 'Target';\nconst Id = 'Id';\nconst Value = 'Value';\n\nexport class CubismModelUserDataJson {\n  /**\n   * コンストラクタ\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  public constructor(buffer: ArrayBuffer, size: number) {\n    this._json = CubismJson.create(buffer, size);\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    CubismJson.delete(this._json);\n  }\n\n  /**\n   * ユーザーデータ個数の取得\n   * @return ユーザーデータの個数\n   */\n  public getUserDataCount(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(UserDataCount)\n      .toInt();\n  }\n\n  /**\n   * ユーザーデータ総文字列数の取得\n   *\n   * @return ユーザーデータ総文字列数\n   */\n  public getTotalUserDataSize(): number {\n    return this._json\n      .getRoot()\n      .getValueByString(Meta)\n      .getValueByString(TotalUserDataSize)\n      .toInt();\n  }\n\n  /**\n   * ユーザーデータのタイプの取得\n   *\n   * @return ユーザーデータのタイプ\n   */\n  public getUserDataTargetType(i: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(i)\n      .getValueByString(Target)\n      .getRawString();\n  }\n\n  /**\n   * ユーザーデータのターゲットIDの取得\n   *\n   * @param i インデックス\n   * @return ユーザーデータターゲットID\n   */\n  public getUserDataId(i: number): CubismIdHandle {\n    return CubismFramework.getIdManager().getId(\n      this._json\n        .getRoot()\n        .getValueByString(UserData)\n        .getValueByIndex(i)\n        .getValueByString(Id)\n        .getRawString()\n    );\n  }\n\n  /**\n   * ユーザーデータの文字列の取得\n   *\n   * @param i インデックス\n   * @return ユーザーデータ\n   */\n  public getUserDataValue(i: number): string {\n    return this._json\n      .getRoot()\n      .getValueByString(UserData)\n      .getValueByIndex(i)\n      .getValueByString(Value)\n      .getRawString();\n  }\n\n  private _json: CubismJson;\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdatajson';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelUserDataJson = $.CubismModelUserDataJson;\n  export type CubismModelUserDataJson = $.CubismModelUserDataJson;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismIdHandle } from '../id/cubismid';\nimport { CubismFramework } from '../live2dcubismframework';\nimport { csmString } from '../type/csmstring';\nimport { csmVector } from '../type/csmvector';\nimport { CubismModelUserDataJson } from './cubismmodeluserdatajson';\n\nconst ArtMesh = 'ArtMesh';\n\n/**\n * ユーザーデータインターフェース\n *\n * Jsonから読み込んだユーザーデータを記録しておくための構造体\n */\nexport class CubismModelUserDataNode {\n  targetType: CubismIdHandle; // ユーザーデータターゲットタイプ\n  targetId: CubismIdHandle; // ユーザーデータターゲットのID\n  value: csmString; // ユーザーデータ\n}\n\n/**\n * ユーザデータの管理クラス\n *\n * ユーザデータをロード、管理、検索インターフェイス、解放までを行う。\n */\nexport class CubismModelUserData {\n  /**\n   * インスタンスの作成\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  public static create(buffer: ArrayBuffer, size: number): CubismModelUserData {\n    const ret: CubismModelUserData = new CubismModelUserData();\n\n    ret.parseUserData(buffer, size);\n\n    return ret;\n  }\n\n  /**\n   * インスタンスを破棄する\n   *\n   * @param modelUserData 破棄するインスタンス\n   */\n  public static delete(modelUserData: CubismModelUserData): void {\n    if (modelUserData != null) {\n      modelUserData.release();\n      modelUserData = null;\n    }\n  }\n\n  /**\n   * ArtMeshのユーザーデータのリストの取得\n   *\n   * @return ユーザーデータリスト\n   */\n  public getArtMeshUserDatas(): csmVector<CubismModelUserDataNode> {\n    return this._artMeshUserDataNode;\n  }\n\n  /**\n   * userdata3.jsonのパース\n   *\n   * @param buffer    userdata3.jsonが読み込まれているバッファ\n   * @param size      バッファのサイズ\n   */\n  public parseUserData(buffer: ArrayBuffer, size: number): void {\n    let json: CubismModelUserDataJson = new CubismModelUserDataJson(\n      buffer,\n      size\n    );\n    if (!json) {\n      json.release();\n      json = void 0;\n      return;\n    }\n\n    const typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\n    const nodeCount: number = json.getUserDataCount();\n\n    for (let i = 0; i < nodeCount; i++) {\n      const addNode: CubismModelUserDataNode = new CubismModelUserDataNode();\n\n      addNode.targetId = json.getUserDataId(i);\n      addNode.targetType = CubismFramework.getIdManager().getId(\n        json.getUserDataTargetType(i)\n      );\n      addNode.value = new csmString(json.getUserDataValue(i));\n      this._userDataNodes.pushBack(addNode);\n\n      if (addNode.targetType == typeOfArtMesh) {\n        this._artMeshUserDataNode.pushBack(addNode);\n      }\n    }\n\n    json.release();\n    json = void 0;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._userDataNodes = new csmVector<CubismModelUserDataNode>();\n    this._artMeshUserDataNode = new csmVector<CubismModelUserDataNode>();\n  }\n\n  /**\n   * デストラクタ相当の処理\n   *\n   * ユーザーデータ構造体配列を解放する\n   */\n  public release(): void {\n    for (let i = 0; i < this._userDataNodes.getSize(); ++i) {\n      this._userDataNodes.set(i, null);\n    }\n\n    this._userDataNodes = null;\n  }\n\n  private _userDataNodes: csmVector<CubismModelUserDataNode>; // ユーザーデータ構造体配列\n  private _artMeshUserDataNode: csmVector<CubismModelUserDataNode>; // 閲覧リストの保持\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismmodeluserdata';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismModelUserData = $.CubismModelUserData;\n  export type CubismModelUserData = $.CubismModelUserData;\n  export const CubismModelUserDataNode = $.CubismModelUserDataNode;\n  export type CubismModelUserDataNode = $.CubismModelUserDataNode;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismBreath } from '../effect/cubismbreath';\nimport { CubismEyeBlink } from '../effect/cubismeyeblink';\nimport { CubismPose } from '../effect/cubismpose';\nimport { ICubismModelSetting } from '../icubismmodelsetting';\nimport { CubismIdHandle } from '../id/cubismid';\nimport { Constant } from '../live2dcubismframework';\nimport { CubismModelMatrix } from '../math/cubismmodelmatrix';\nimport { CubismTargetPoint } from '../math/cubismtargetpoint';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from '../motion/acubismmotion';\nimport { CubismExpressionMotion } from '../motion/cubismexpressionmotion';\nimport { CubismExpressionMotionManager } from '../motion/cubismexpressionmotionmanager';\nimport { CubismMotion } from '../motion/cubismmotion';\nimport { CubismMotionManager } from '../motion/cubismmotionmanager';\nimport { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';\nimport { CubismPhysics } from '../physics/cubismphysics';\nimport { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';\nimport { csmString } from '../type/csmstring';\nimport { CubismLogError, CubismLogInfo } from '../utils/cubismdebug';\nimport { CubismMoc } from './cubismmoc';\nimport { CubismModel } from './cubismmodel';\nimport { CubismModelUserData } from './cubismmodeluserdata';\n\n/**\n * ユーザーが実際に使用するモデル\n *\n * ユーザーが実際に使用するモデルの基底クラス。これを継承してユーザーが実装する。\n */\nexport class CubismUserModel {\n  /**\n   * 初期化状態の取得\n   *\n   * 初期化されている状態か？\n   *\n   * @return true     初期化されている\n   * @return false    初期化されていない\n   */\n  public isInitialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * 初期化状態の設定\n   *\n   * 初期化状態を設定する。\n   *\n   * @param v 初期化状態\n   */\n  public setInitialized(v: boolean): void {\n    this._initialized = v;\n  }\n\n  /**\n   * 更新状態の取得\n   *\n   * 更新されている状態か？\n   *\n   * @return true     更新されている\n   * @return false    更新されていない\n   */\n  public isUpdating(): boolean {\n    return this._updating;\n  }\n\n  /**\n   * 更新状態の設定\n   *\n   * 更新状態を設定する\n   *\n   * @param v 更新状態\n   */\n  public setUpdating(v: boolean): void {\n    this._updating = v;\n  }\n\n  /**\n   * マウスドラッグ情報の設定\n   * @param ドラッグしているカーソルのX位置\n   * @param ドラッグしているカーソルのY位置\n   */\n  public setDragging(x: number, y: number): void {\n    this._dragManager.set(x, y);\n  }\n\n  /**\n   * 加速度の情報を設定する\n   * @param x X軸方向の加速度\n   * @param y Y軸方向の加速度\n   * @param z Z軸方向の加速度\n   */\n  public setAcceleration(x: number, y: number, z: number): void {\n    this._accelerationX = x;\n    this._accelerationY = y;\n    this._accelerationZ = z;\n  }\n\n  /**\n   * モデル行列を取得する\n   * @return モデル行列\n   */\n  public getModelMatrix(): CubismModelMatrix {\n    return this._modelMatrix;\n  }\n\n  /**\n   * 不透明度の設定\n   * @param a 不透明度\n   */\n  public setOpacity(a: number): void {\n    this._opacity = a;\n  }\n\n  /**\n   * 不透明度の取得\n   * @return 不透明度\n   */\n  public getOpacity(): number {\n    return this._opacity;\n  }\n\n  /**\n   * モデルデータを読み込む\n   *\n   * @param buffer    moc3ファイルが読み込まれているバッファ\n   */\n  public loadModel(buffer: ArrayBuffer, shouldCheckMocConsistency = false) {\n    this._moc = CubismMoc.create(buffer, shouldCheckMocConsistency);\n\n    if (this._moc == null) {\n      CubismLogError('Failed to CubismMoc.create().');\n      return;\n    }\n\n    this._model = this._moc.createModel();\n\n    if (this._model == null) {\n      CubismLogError('Failed to CreateModel().');\n      return;\n    }\n\n    this._model.saveParameters();\n    this._modelMatrix = new CubismModelMatrix(\n      this._model.getCanvasWidth(),\n      this._model.getCanvasHeight()\n    );\n  }\n\n  /**\n   * モーションデータを読み込む\n   * @param buffer motion3.jsonファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name モーションの名前\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @param onBeganMotionHandler モーション再生開始時に呼び出されるコールバック関数\n   * @param modelSetting モデル設定\n   * @param group モーショングループ名\n   * @param index モーションインデックス\n   * @return モーションクラス\n   */\n  public loadMotion(\n    buffer: ArrayBuffer,\n    size: number,\n    name: string,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback,\n    modelSetting?: ICubismModelSetting,\n    group?: string,\n    index?: number\n  ): CubismMotion {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadMotion().');\n      return null;\n    }\n\n    const motion: CubismMotion = CubismMotion.create(\n      buffer,\n      size,\n      onFinishedMotionHandler,\n      onBeganMotionHandler\n    );\n\n    if (motion == null) {\n      CubismLogError(`Failed to create motion from buffer in LoadMotion()`);\n      return null;\n    }\n\n    // 必要であればモーションフェード値を上書き\n    if (modelSetting) {\n      const fadeInTime: number = modelSetting.getMotionFadeInTimeValue(\n        group,\n        index\n      );\n      if (fadeInTime >= 0.0) {\n        motion.setFadeInTime(fadeInTime);\n      }\n\n      const fadeOutTime = modelSetting.getMotionFadeOutTimeValue(group, index);\n      if (fadeOutTime >= 0.0) {\n        motion.setFadeOutTime(fadeOutTime);\n      }\n    }\n\n    return motion;\n  }\n\n  /**\n   * 表情データの読み込み\n   * @param buffer expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @param name 表情の名前\n   */\n  public loadExpression(\n    buffer: ArrayBuffer,\n    size: number,\n    name: string\n  ): ACubismMotion {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadExpression().');\n      return null;\n    }\n    return CubismExpressionMotion.create(buffer, size);\n  }\n\n  /**\n   * ポーズデータの読み込み\n   * @param buffer pose3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadPose(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadPose().');\n      return;\n    }\n    this._pose = CubismPose.create(buffer, size);\n  }\n\n  /**\n   * モデルに付属するユーザーデータを読み込む\n   * @param buffer userdata3.jsonが読み込まれているバッファ\n   * @param size バッファのサイズ\n   */\n  public loadUserData(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadUserData().');\n      return;\n    }\n    this._modelUserData = CubismModelUserData.create(buffer, size);\n  }\n\n  /**\n   * 物理演算データの読み込み\n   * @param buffer  physics3.jsonが読み込まれているバッファ\n   * @param size    バッファのサイズ\n   */\n  public loadPhysics(buffer: ArrayBuffer, size: number): void {\n    if (buffer == null || size == 0) {\n      CubismLogError('Failed to loadPhysics().');\n      return;\n    }\n    this._physics = CubismPhysics.create(buffer, size);\n  }\n\n  /**\n   * 当たり判定の取得\n   * @param drawableId 検証したいDrawableのID\n   * @param pointX X位置\n   * @param pointY Y位置\n   * @return true ヒットしている\n   * @return false ヒットしていない\n   */\n  public isHit(\n    drawableId: CubismIdHandle,\n    pointX: number,\n    pointY: number\n  ): boolean {\n    const drawIndex: number = this._model.getDrawableIndex(drawableId);\n\n    if (drawIndex < 0) {\n      return false; // 存在しない場合はfalse\n    }\n\n    const count: number = this._model.getDrawableVertexCount(drawIndex);\n    const vertices: Float32Array = this._model.getDrawableVertices(drawIndex);\n\n    let left: number = vertices[0];\n    let right: number = vertices[0];\n    let top: number = vertices[1];\n    let bottom: number = vertices[1];\n\n    for (let j = 1; j < count; ++j) {\n      const x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\n      const y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\n\n      if (x < left) {\n        left = x; // Min x\n      }\n\n      if (x > right) {\n        right = x; // Max x\n      }\n\n      if (y < top) {\n        top = y; // Min y\n      }\n\n      if (y > bottom) {\n        bottom = y; // Max y\n      }\n    }\n\n    const tx: number = this._modelMatrix.invertTransformX(pointX);\n    const ty: number = this._modelMatrix.invertTransformY(pointY);\n\n    return left <= tx && tx <= right && top <= ty && ty <= bottom;\n  }\n\n  /**\n   * モデルの取得\n   * @return モデル\n   */\n  public getModel(): CubismModel {\n    return this._model;\n  }\n\n  /**\n   * レンダラの取得\n   * @return レンダラ\n   */\n  public getRenderer(): CubismRenderer_WebGL {\n    return this._renderer;\n  }\n\n  /**\n   * レンダラを作成して初期化を実行する\n   * @param maskBufferCount バッファの生成数\n   */\n  public createRenderer(maskBufferCount = 1): void {\n    if (this._renderer) {\n      this.deleteRenderer();\n    }\n\n    this._renderer = new CubismRenderer_WebGL();\n    this._renderer.initialize(this._model, maskBufferCount);\n  }\n\n  /**\n   * レンダラの解放\n   */\n  public deleteRenderer(): void {\n    if (this._renderer != null) {\n      this._renderer.release();\n      this._renderer = null;\n    }\n  }\n\n  /**\n   * イベント発火時の標準処理\n   *\n   * Eventが再生処理時にあった場合の処理をする。\n   * 継承で上書きすることを想定している。\n   * 上書きしない場合はログ出力をする。\n   *\n   * @param eventValue 発火したイベントの文字列データ\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0}', eventValue.s);\n  }\n\n  /**\n   * イベント用のコールバック\n   *\n   * CubismMotionQueueManagerにイベント用に登録するためのCallback。\n   * CubismUserModelの継承先のEventFiredを呼ぶ。\n   *\n   * @param caller 発火したイベントを管理していたモーションマネージャー、比較用\n   * @param eventValue 発火したイベントの文字列データ\n   * @param customData CubismUserModelを継承したインスタンスを想定\n   */\n  public static cubismDefaultMotionEventCallback(\n    caller: CubismMotionQueueManager,\n    eventValue: csmString,\n    customData: CubismUserModel\n  ): void {\n    const model: CubismUserModel = customData;\n\n    if (model != null) {\n      model.motionEventFired(eventValue);\n    }\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    // 各変数初期化\n    this._moc = null;\n    this._model = null;\n    this._motionManager = null;\n    this._expressionManager = null;\n    this._eyeBlink = null;\n    this._breath = null;\n    this._modelMatrix = null;\n    this._pose = null;\n    this._dragManager = null;\n    this._physics = null;\n    this._modelUserData = null;\n    this._initialized = false;\n    this._updating = false;\n    this._opacity = 1.0;\n    this._lipsync = true;\n    this._lastLipSyncValue = 0.0;\n    this._dragX = 0.0;\n    this._dragY = 0.0;\n    this._accelerationX = 0.0;\n    this._accelerationY = 0.0;\n    this._accelerationZ = 0.0;\n    this._mocConsistency = false;\n    this._debugMode = false;\n    this._renderer = null;\n\n    // モーションマネージャーを作成\n    this._motionManager = new CubismMotionManager();\n    this._motionManager.setEventCallback(\n      CubismUserModel.cubismDefaultMotionEventCallback,\n      this\n    );\n\n    // 表情マネージャーを作成\n    this._expressionManager = new CubismExpressionMotionManager();\n\n    // ドラッグによるアニメーション\n    this._dragManager = new CubismTargetPoint();\n  }\n\n  /**\n   * デストラクタに相当する処理\n   */\n  public release() {\n    if (this._motionManager != null) {\n      this._motionManager.release();\n      this._motionManager = null;\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.release();\n      this._expressionManager = null;\n    }\n\n    if (this._moc != null) {\n      this._moc.deleteModel(this._model);\n      this._moc.release();\n      this._moc = null;\n    }\n\n    this._modelMatrix = null;\n\n    CubismPose.delete(this._pose);\n    CubismEyeBlink.delete(this._eyeBlink);\n    CubismBreath.delete(this._breath);\n\n    this._dragManager = null;\n\n    CubismPhysics.delete(this._physics);\n    CubismModelUserData.delete(this._modelUserData);\n\n    this.deleteRenderer();\n  }\n\n  protected _moc: CubismMoc; // Mocデータ\n  protected _model: CubismModel; // Modelインスタンス\n\n  protected _motionManager: CubismMotionManager; // モーション管理\n  protected _expressionManager: CubismExpressionMotionManager; // 表情管理\n  protected _eyeBlink: CubismEyeBlink; // 自動まばたき\n  protected _breath: CubismBreath; // 呼吸\n  protected _modelMatrix: CubismModelMatrix; // モデル行列\n  protected _pose: CubismPose; // ポーズ管理\n  protected _dragManager: CubismTargetPoint; // マウスドラッグ\n  protected _physics: CubismPhysics; // 物理演算\n  protected _modelUserData: CubismModelUserData; // ユーザーデータ\n\n  protected _initialized: boolean; // 初期化されたかどうか\n  protected _updating: boolean; // 更新されたかどうか\n  protected _opacity: number; // 不透明度\n  protected _lipsync: boolean; // リップシンクするかどうか\n  protected _lastLipSyncValue: number; // 最後のリップシンクの制御地\n  protected _dragX: number; // マウスドラッグのX位置\n  protected _dragY: number; // マウスドラッグのY位置\n  protected _accelerationX: number; // X軸方向の加速度\n  protected _accelerationY: number; // Y軸方向の加速度\n  protected _accelerationZ: number; // Z軸方向の加速度\n  protected _mocConsistency: boolean; // MOC3一貫性検証するかどうか\n  protected _debugMode: boolean; // デバッグモードかどうか\n\n  private _renderer: CubismRenderer_WebGL; // レンダラ\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismusermodel';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismUserModel = $.CubismUserModel;\n  export type CubismUserModel = $.CubismUserModel;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\n/** @deprecated この変数は getInstance() が非推奨になったことに伴い、非推奨となりました。 */\nexport let s_instance: LAppWavFileHandler = null;\n\nexport class LAppWavFileHandler {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   * @deprecated このクラスでのシングルトンパターンの使用は非推奨となりました。代わりに new LAppWavFileHandler() を使用してください。\n   */\n  public static getInstance(): LAppWavFileHandler {\n    if (s_instance == null) {\n      s_instance = new LAppWavFileHandler();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   *\n   * @deprecated この関数は getInstance() が非推奨になったことに伴い、非推奨となりました。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance = void 0;\n    }\n\n    s_instance = null;\n  }\n\n  public update(deltaTimeSeconds: number) {\n    let goalOffset: number;\n    let rms: number;\n\n    // データロード前/ファイル末尾に達した場合は更新しない\n    if (\n      this._pcmData == null ||\n      this._sampleOffset >= this._wavFileInfo._samplesPerChannel\n    ) {\n      this._lastRms = 0.0;\n      return false;\n    }\n\n    // 経過時間後の状態を保持\n    this._userTimeSeconds += deltaTimeSeconds;\n    goalOffset = Math.floor(\n      this._userTimeSeconds * this._wavFileInfo._samplingRate\n    );\n    if (goalOffset > this._wavFileInfo._samplesPerChannel) {\n      goalOffset = this._wavFileInfo._samplesPerChannel;\n    }\n\n    // RMS計測\n    rms = 0.0;\n    for (\n      let channelCount = 0;\n      channelCount < this._wavFileInfo._numberOfChannels;\n      channelCount++\n    ) {\n      for (\n        let sampleCount = this._sampleOffset;\n        sampleCount < goalOffset;\n        sampleCount++\n      ) {\n        const pcm = this._pcmData[channelCount][sampleCount];\n        rms += pcm * pcm;\n      }\n    }\n    rms = Math.sqrt(\n      rms /\n        (this._wavFileInfo._numberOfChannels *\n          (goalOffset - this._sampleOffset))\n    );\n\n    this._lastRms = rms;\n    this._sampleOffset = goalOffset;\n    return true;\n  }\n\n  public start(filePath: string): void {\n    // サンプル位参照位置を初期化\n    this._sampleOffset = 0;\n    this._userTimeSeconds = 0.0;\n\n    // RMS値をリセット\n    this._lastRms = 0.0;\n\n    this.loadWavFile(filePath);\n  }\n\n  public getRms(): number {\n    return this._lastRms;\n  }\n\n  public loadWavFile(filePath: string): Promise<boolean> {\n    return new Promise(resolveValue => {\n      let ret = false;\n\n      if (this._pcmData != null) {\n        this.releasePcmData();\n      }\n\n      // ファイルロード\n      const asyncFileLoad = async () => {\n        return fetch(filePath).then(responce => {\n          return responce.arrayBuffer();\n        });\n      };\n\n      const asyncWavFileManager = (async () => {\n        this._byteReader._fileByte = await asyncFileLoad();\n        this._byteReader._fileDataView = new DataView(\n          this._byteReader._fileByte\n        );\n        this._byteReader._fileSize = this._byteReader._fileByte.byteLength;\n        this._byteReader._readOffset = 0;\n\n        // ファイルロードに失敗しているか、先頭のシグネチャ\"RIFF\"を入れるサイズもない場合は失敗\n        if (\n          this._byteReader._fileByte == null ||\n          this._byteReader._fileSize < 4\n        ) {\n          resolveValue(false);\n          return;\n        }\n\n        // ファイル名\n        this._wavFileInfo._fileName = filePath;\n\n        try {\n          // シグネチャ \"RIFF\"\n          if (!this._byteReader.getCheckSignature('RIFF')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"RIFF\".');\n          }\n          // ファイルサイズ-8（読み飛ばし）\n          this._byteReader.get32LittleEndian();\n          // シグネチャ \"WAVE\"\n          if (!this._byteReader.getCheckSignature('WAVE')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"WAVE\".');\n          }\n          // シグネチャ \"fmt \"\n          if (!this._byteReader.getCheckSignature('fmt ')) {\n            ret = false;\n            throw new Error('Cannot find Signeture \"fmt\".');\n          }\n          // fmtチャンクサイズ\n          const fmtChunkSize = this._byteReader.get32LittleEndian();\n          // フォーマットIDは1（リニアPCM）以外受け付けない\n          if (this._byteReader.get16LittleEndian() != 1) {\n            ret = false;\n            throw new Error('File is not linear PCM.');\n          }\n          // チャンネル数\n          this._wavFileInfo._numberOfChannels =\n            this._byteReader.get16LittleEndian();\n          // サンプリングレート\n          this._wavFileInfo._samplingRate =\n            this._byteReader.get32LittleEndian();\n          // データ速度[byte/sec]（読み飛ばし）\n          this._byteReader.get32LittleEndian();\n          // ブロックサイズ（読み飛ばし）\n          this._byteReader.get16LittleEndian();\n          // 量子化ビット数\n          this._wavFileInfo._bitsPerSample =\n            this._byteReader.get16LittleEndian();\n          // fmtチャンクの拡張部分の読み飛ばし\n          if (fmtChunkSize > 16) {\n            this._byteReader._readOffset += fmtChunkSize - 16;\n          }\n          // \"data\"チャンクが出現するまで読み飛ばし\n          while (\n            !this._byteReader.getCheckSignature('data') &&\n            this._byteReader._readOffset < this._byteReader._fileSize\n          ) {\n            this._byteReader._readOffset +=\n              this._byteReader.get32LittleEndian() + 4;\n          }\n          // ファイル内に\"data\"チャンクが出現しなかった\n          if (this._byteReader._readOffset >= this._byteReader._fileSize) {\n            ret = false;\n            throw new Error('Cannot find \"data\" Chunk.');\n          }\n          // サンプル数\n          {\n            const dataChunkSize = this._byteReader.get32LittleEndian();\n            this._wavFileInfo._samplesPerChannel =\n              (dataChunkSize * 8) /\n              (this._wavFileInfo._bitsPerSample *\n                this._wavFileInfo._numberOfChannels);\n          }\n          // 領域確保\n          this._pcmData = new Array(this._wavFileInfo._numberOfChannels);\n          for (\n            let channelCount = 0;\n            channelCount < this._wavFileInfo._numberOfChannels;\n            channelCount++\n          ) {\n            this._pcmData[channelCount] = new Float32Array(\n              this._wavFileInfo._samplesPerChannel\n            );\n          }\n          // 波形データ取得\n          for (\n            let sampleCount = 0;\n            sampleCount < this._wavFileInfo._samplesPerChannel;\n            sampleCount++\n          ) {\n            for (\n              let channelCount = 0;\n              channelCount < this._wavFileInfo._numberOfChannels;\n              channelCount++\n            ) {\n              this._pcmData[channelCount][sampleCount] = this.getPcmSample();\n            }\n          }\n\n          ret = true;\n\n          resolveValue(ret);\n        } catch (e) {\n          console.log(e);\n        }\n      })().then(() => {\n        resolveValue(ret);\n      });\n    });\n  }\n\n  public getPcmSample(): number {\n    let pcm32;\n\n    // 32ビット幅に拡張してから-1～1の範囲に丸める\n    switch (this._wavFileInfo._bitsPerSample) {\n      case 8:\n        pcm32 = this._byteReader.get8() - 128;\n        pcm32 <<= 24;\n        break;\n      case 16:\n        pcm32 = this._byteReader.get16LittleEndian() << 16;\n        break;\n      case 24:\n        pcm32 = this._byteReader.get24LittleEndian() << 8;\n        break;\n      default:\n        // 対応していないビット幅\n        pcm32 = 0;\n        break;\n    }\n\n    return pcm32 / 2147483647; //Number.MAX_VALUE;\n  }\n\n  /**\n   * 指定したチャンネルから音声サンプルの配列を取得する\n   *\n   * @param usechannel 利用するチャンネル\n   * @returns 指定したチャンネルの音声サンプルの配列\n   */\n  public getPcmDataChannel(usechannel: number): Float32Array {\n    // 指定したチャンネル数がデータ用配列の長さより多いならnullを返す。\n    if (!this._pcmData || !(usechannel < this._pcmData.length)) {\n      return null;\n    }\n\n    // _pcmDataから新規に指定したチャンネルのFloat32Arrayを作成する。\n    return Float32Array.from(this._pcmData[usechannel]);\n  }\n\n  /**\n   * 音声のサンプリング周波数を取得する。\n   *\n   * @returns 音声のサンプリング周波数\n   */\n  public getWavSamplingRate(): number {\n    if (!this._wavFileInfo || this._wavFileInfo._samplingRate < 1) {\n      return null;\n    }\n\n    return this._wavFileInfo._samplingRate;\n  }\n\n  public releasePcmData(): void {\n    for (\n      let channelCount = 0;\n      channelCount < this._wavFileInfo._numberOfChannels;\n      channelCount++\n    ) {\n      this._pcmData[channelCount] = null;\n    }\n    delete this._pcmData;\n    this._pcmData = null;\n  }\n\n  constructor() {\n    this._pcmData = null;\n    this._userTimeSeconds = 0.0;\n    this._lastRms = 0.0;\n    this._sampleOffset = 0.0;\n    this._wavFileInfo = new WavFileInfo();\n    this._byteReader = new ByteReader();\n  }\n\n  _pcmData: Array<Float32Array>;\n  _userTimeSeconds: number;\n  _lastRms: number;\n  _sampleOffset: number;\n  _wavFileInfo: WavFileInfo;\n  _byteReader: ByteReader;\n  loadFiletoBytes = (arrayBuffer: ArrayBuffer, length: number): void => {\n    this._byteReader._fileByte = arrayBuffer;\n    this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);\n    this._byteReader._fileSize = length;\n  };\n}\n\nexport class WavFileInfo {\n  constructor() {\n    this._fileName = '';\n    this._numberOfChannels = 0;\n    this._bitsPerSample = 0;\n    this._samplingRate = 0;\n    this._samplesPerChannel = 0;\n  }\n\n  _fileName: string; ///< ファイル名\n  _numberOfChannels: number; ///< チャンネル数\n  _bitsPerSample: number; ///< サンプルあたりビット数\n  _samplingRate: number; ///< サンプリングレート\n  _samplesPerChannel: number; ///< 1チャンネルあたり総サンプル数\n}\n\nexport class ByteReader {\n  constructor() {\n    this._fileByte = null;\n    this._fileDataView = null;\n    this._fileSize = 0;\n    this._readOffset = 0;\n  }\n\n  /**\n   * @brief 8ビット読み込み\n   * @return Csm::csmUint8 読み取った8ビット値\n   */\n  public get8(): number {\n    const ret = this._fileDataView.getUint8(this._readOffset);\n    this._readOffset++;\n    return ret;\n  }\n\n  /**\n   * @brief 16ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint16 読み取った16ビット値\n   */\n  public get16LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 2;\n    return ret;\n  }\n\n  /**\n   * @brief 24ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint32 読み取った24ビット値（下位24ビットに設定）\n   */\n  public get24LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 3;\n    return ret;\n  }\n\n  /**\n   * @brief 32ビット読み込み（リトルエンディアン）\n   * @return Csm::csmUint32 読み取った32ビット値\n   */\n  public get32LittleEndian(): number {\n    const ret =\n      (this._fileDataView.getUint8(this._readOffset + 3) << 24) |\n      (this._fileDataView.getUint8(this._readOffset + 2) << 16) |\n      (this._fileDataView.getUint8(this._readOffset + 1) << 8) |\n      this._fileDataView.getUint8(this._readOffset);\n    this._readOffset += 4;\n    return ret;\n  }\n\n  /**\n   * @brief シグネチャの取得と参照文字列との一致チェック\n   * @param[in] reference 検査対象のシグネチャ文字列\n   * @retval  true    一致している\n   * @retval  false   一致していない\n   */\n  public getCheckSignature(reference: string): boolean {\n    const getSignature: Uint8Array = new Uint8Array(4);\n    const referenceString: Uint8Array = new TextEncoder().encode(reference);\n    if (reference.length != 4) {\n      return false;\n    }\n    for (let signatureOffset = 0; signatureOffset < 4; signatureOffset++) {\n      getSignature[signatureOffset] = this.get8();\n    }\n    return (\n      getSignature[0] == referenceString[0] &&\n      getSignature[1] == referenceString[1] &&\n      getSignature[2] == referenceString[2] &&\n      getSignature[3] == referenceString[3]\n    );\n  }\n\n  _fileByte: ArrayBuffer; ///< ロードしたファイルのバイト列\n  _fileDataView: DataView;\n  _fileSize: number; ///< ファイルサイズ\n  _readOffset: number; ///< ファイル参照位置\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismDefaultParameterId } from '@framework/cubismdefaultparameterid';\nimport { CubismModelSettingJson } from '@framework/cubismmodelsettingjson';\nimport {\n  BreathParameterData,\n  CubismBreath\n} from '@framework/effect/cubismbreath';\nimport { CubismEyeBlink } from '@framework/effect/cubismeyeblink';\nimport { ICubismModelSetting } from '@framework/icubismmodelsetting';\nimport { CubismIdHandle } from '@framework/id/cubismid';\nimport { CubismFramework } from '@framework/live2dcubismframework';\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { CubismUserModel } from '@framework/model/cubismusermodel';\nimport {\n  ACubismMotion,\n  BeganMotionCallback,\n  FinishedMotionCallback\n} from '@framework/motion/acubismmotion';\nimport { CubismMotion } from '@framework/motion/cubismmotion';\nimport {\n  CubismMotionQueueEntryHandle,\n  InvalidMotionQueueEntryHandleValue\n} from '@framework/motion/cubismmotionqueuemanager';\nimport { csmMap } from '@framework/type/csmmap';\nimport { csmRect } from '@framework/type/csmrectf';\nimport { csmString } from '@framework/type/csmstring';\nimport { csmVector } from '@framework/type/csmvector';\nimport {\n  CSM_ASSERT,\n  CubismLogError,\n  CubismLogInfo\n} from '@framework/utils/cubismdebug';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppPal } from './lapppal';\nimport { TextureInfo } from './lapptexturemanager';\nimport { LAppWavFileHandler } from './lappwavfilehandler';\nimport { CubismMoc } from '@framework/model/cubismmoc';\nimport { LAppDelegate } from './lappdelegate';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\nenum LoadStep {\n  LoadAssets,\n  LoadModel,\n  WaitLoadModel,\n  LoadExpression,\n  WaitLoadExpression,\n  LoadPhysics,\n  WaitLoadPhysics,\n  LoadPose,\n  WaitLoadPose,\n  SetupEyeBlink,\n  SetupBreath,\n  LoadUserData,\n  WaitLoadUserData,\n  SetupEyeBlinkIds,\n  SetupLipSyncIds,\n  SetupLayout,\n  LoadMotion,\n  WaitLoadMotion,\n  CompleteInitialize,\n  CompleteSetupModel,\n  LoadTexture,\n  WaitLoadTexture,\n  CompleteSetup\n}\n\n/**\n * ユーザーが実際に使用するモデルの実装クラス<br>\n * モデル生成、機能コンポーネント生成、更新処理とレンダリングの呼び出しを行う。\n */\nexport class LAppModel extends CubismUserModel {\n  /**\n   * model3.jsonが置かれたディレクトリとファイルパスからモデルを生成する\n   * @param dir\n   * @param fileName\n   */\n  public loadAssets(dir: string, fileName: string): void {\n    this._modelHomeDir = dir;\n\n    fetch(`${this._modelHomeDir}${fileName}`)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => {\n        const setting: ICubismModelSetting = new CubismModelSettingJson(\n          arrayBuffer,\n          arrayBuffer.byteLength\n        );\n\n        // ステートを更新\n        this._state = LoadStep.LoadModel;\n\n        // 結果を保存\n        this.setupModel(setting);\n      })\n      .catch(error => {\n        // model3.json読み込みでエラーが発生した時点で描画は不可能なので、setupせずエラーをcatchして何もしない\n        CubismLogError(`Failed to load file ${this._modelHomeDir}${fileName}`);\n      });\n  }\n\n  /**\n   * model3.jsonからモデルを生成する。\n   * model3.jsonの記述に従ってモデル生成、モーション、物理演算などのコンポーネント生成を行う。\n   *\n   * @param setting ICubismModelSettingのインスタンス\n   */\n  private setupModel(setting: ICubismModelSetting): void {\n    this._updating = true;\n    this._initialized = false;\n\n    this._modelSetting = setting;\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      fetch(`${this._modelHomeDir}${modelFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${modelFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          this.loadModel(arrayBuffer, this._mocConsistency);\n          this._state = LoadStep.LoadExpression;\n\n          // callback\n          loadCubismExpression();\n        });\n\n      this._state = LoadStep.WaitLoadModel;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n\n    // Expression\n    const loadCubismExpression = (): void => {\n      if (this._modelSetting.getExpressionCount() > 0) {\n        const count: number = this._modelSetting.getExpressionCount();\n\n        for (let i = 0; i < count; i++) {\n          const expressionName = this._modelSetting.getExpressionName(i);\n          const expressionFileName =\n            this._modelSetting.getExpressionFileName(i);\n\n          fetch(`${this._modelHomeDir}${expressionFileName}`)\n            .then(response => {\n              if (response.ok) {\n                return response.arrayBuffer();\n              } else if (response.status >= 400) {\n                CubismLogError(\n                  `Failed to load file ${this._modelHomeDir}${expressionFileName}`\n                );\n                // ファイルが存在しなくてもresponseはnullを返却しないため、空のArrayBufferで対応する\n                return new ArrayBuffer(0);\n              }\n            })\n            .then(arrayBuffer => {\n              const motion: ACubismMotion = this.loadExpression(\n                arrayBuffer,\n                arrayBuffer.byteLength,\n                expressionName\n              );\n\n              if (this._expressions.getValue(expressionName) != null) {\n                ACubismMotion.delete(\n                  this._expressions.getValue(expressionName)\n                );\n                this._expressions.setValue(expressionName, null);\n              }\n\n              this._expressions.setValue(expressionName, motion);\n\n              this._expressionCount++;\n\n              if (this._expressionCount >= count) {\n                this._state = LoadStep.LoadPhysics;\n\n                // callback\n                loadCubismPhysics();\n              }\n            });\n        }\n        this._state = LoadStep.WaitLoadExpression;\n      } else {\n        this._state = LoadStep.LoadPhysics;\n\n        // callback\n        loadCubismPhysics();\n      }\n    };\n\n    // Physics\n    const loadCubismPhysics = (): void => {\n      if (this._modelSetting.getPhysicsFileName() != '') {\n        const physicsFileName = this._modelSetting.getPhysicsFileName();\n\n        fetch(`${this._modelHomeDir}${physicsFileName}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${physicsFileName}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.LoadPose;\n\n            // callback\n            loadCubismPose();\n          });\n        this._state = LoadStep.WaitLoadPhysics;\n      } else {\n        this._state = LoadStep.LoadPose;\n\n        // callback\n        loadCubismPose();\n      }\n    };\n\n    // Pose\n    const loadCubismPose = (): void => {\n      if (this._modelSetting.getPoseFileName() != '') {\n        const poseFileName = this._modelSetting.getPoseFileName();\n\n        fetch(`${this._modelHomeDir}${poseFileName}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${poseFileName}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadPose(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlink;\n\n            // callback\n            setupEyeBlink();\n          });\n        this._state = LoadStep.WaitLoadPose;\n      } else {\n        this._state = LoadStep.SetupEyeBlink;\n\n        // callback\n        setupEyeBlink();\n      }\n    };\n\n    // EyeBlink\n    const setupEyeBlink = (): void => {\n      if (this._modelSetting.getEyeBlinkParameterCount() > 0) {\n        this._eyeBlink = CubismEyeBlink.create(this._modelSetting);\n        this._state = LoadStep.SetupBreath;\n      }\n\n      // callback\n      setupBreath();\n    };\n\n    // Breath\n    const setupBreath = (): void => {\n      this._breath = CubismBreath.create();\n\n      const breathParameters: csmVector<BreathParameterData> = new csmVector();\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5)\n      );\n      breathParameters.pushBack(\n        new BreathParameterData(\n          CubismFramework.getIdManager().getId(\n            CubismDefaultParameterId.ParamBreath\n          ),\n          0.5,\n          0.5,\n          3.2345,\n          1\n        )\n      );\n\n      this._breath.setParameters(breathParameters);\n      this._state = LoadStep.LoadUserData;\n\n      // callback\n      loadUserData();\n    };\n\n    // UserData\n    const loadUserData = (): void => {\n      if (this._modelSetting.getUserDataFile() != '') {\n        const userDataFile = this._modelSetting.getUserDataFile();\n\n        fetch(`${this._modelHomeDir}${userDataFile}`)\n          .then(response => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            } else if (response.status >= 400) {\n              CubismLogError(\n                `Failed to load file ${this._modelHomeDir}${userDataFile}`\n              );\n              return new ArrayBuffer(0);\n            }\n          })\n          .then(arrayBuffer => {\n            this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\n\n            this._state = LoadStep.SetupEyeBlinkIds;\n\n            // callback\n            setupEyeBlinkIds();\n          });\n\n        this._state = LoadStep.WaitLoadUserData;\n      } else {\n        this._state = LoadStep.SetupEyeBlinkIds;\n\n        // callback\n        setupEyeBlinkIds();\n      }\n    };\n\n    // EyeBlinkIds\n    const setupEyeBlinkIds = (): void => {\n      const eyeBlinkIdCount: number =\n        this._modelSetting.getEyeBlinkParameterCount();\n\n      for (let i = 0; i < eyeBlinkIdCount; ++i) {\n        this._eyeBlinkIds.pushBack(\n          this._modelSetting.getEyeBlinkParameterId(i)\n        );\n      }\n\n      this._state = LoadStep.SetupLipSyncIds;\n\n      // callback\n      setupLipSyncIds();\n    };\n\n    // LipSyncIds\n    const setupLipSyncIds = (): void => {\n      const lipSyncIdCount = this._modelSetting.getLipSyncParameterCount();\n\n      for (let i = 0; i < lipSyncIdCount; ++i) {\n        this._lipSyncIds.pushBack(this._modelSetting.getLipSyncParameterId(i));\n      }\n      this._state = LoadStep.SetupLayout;\n\n      // callback\n      setupLayout();\n    };\n\n    // Layout\n    const setupLayout = (): void => {\n      const layout: csmMap<string, number> = new csmMap<string, number>();\n\n      if (this._modelSetting == null || this._modelMatrix == null) {\n        CubismLogError('Failed to setupLayout().');\n        return;\n      }\n\n      this._modelSetting.getLayoutMap(layout);\n      this._modelMatrix.setupFromLayout(layout);\n      this._state = LoadStep.LoadMotion;\n\n      // callback\n      loadCubismMotion();\n    };\n\n    // Motion\n    const loadCubismMotion = (): void => {\n      this._state = LoadStep.WaitLoadMotion;\n      this._model.saveParameters();\n      this._allMotionCount = 0;\n      this._motionCount = 0;\n      const group: string[] = [];\n\n      const motionGroupCount: number = this._modelSetting.getMotionGroupCount();\n\n      // モーションの総数を求める\n      for (let i = 0; i < motionGroupCount; i++) {\n        group[i] = this._modelSetting.getMotionGroupName(i);\n        this._allMotionCount += this._modelSetting.getMotionCount(group[i]);\n      }\n\n      // モーションの読み込み\n      for (let i = 0; i < motionGroupCount; i++) {\n        this.preLoadMotionGroup(group[i]);\n      }\n\n      // モーションがない場合\n      if (motionGroupCount == 0) {\n        this._state = LoadStep.LoadTexture;\n\n        // 全てのモーションを停止する\n        this._motionManager.stopAllMotions();\n\n        this._updating = false;\n        this._initialized = true;\n\n        this.createRenderer();\n        this.setupTextures();\n        this.getRenderer().startUp(this._subdelegate.getGlManager().getGl());\n      }\n    };\n  }\n\n  /**\n   * テクスチャユニットにテクスチャをロードする\n   */\n  private setupTextures(): void {\n    // iPhoneでのアルファ品質向上のためTypescriptではpremultipliedAlphaを採用\n    const usePremultiply = true;\n\n    if (this._state == LoadStep.LoadTexture) {\n      // テクスチャ読み込み用\n      const textureCount: number = this._modelSetting.getTextureCount();\n\n      for (\n        let modelTextureNumber = 0;\n        modelTextureNumber < textureCount;\n        modelTextureNumber++\n      ) {\n        // テクスチャ名が空文字だった場合はロード・バインド処理をスキップ\n        if (this._modelSetting.getTextureFileName(modelTextureNumber) == '') {\n          console.log('getTextureFileName null');\n          continue;\n        }\n\n        // WebGLのテクスチャユニットにテクスチャをロードする\n        let texturePath =\n          this._modelSetting.getTextureFileName(modelTextureNumber);\n        texturePath = this._modelHomeDir + texturePath;\n\n        // ロード完了時に呼び出すコールバック関数\n        const onLoad = (textureInfo: TextureInfo): void => {\n          this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\n\n          this._textureCount++;\n\n          if (this._textureCount >= textureCount) {\n            // ロード完了\n            this._state = LoadStep.CompleteSetup;\n          }\n        };\n\n        // 読み込み\n        this._subdelegate\n          .getTextureManager()\n          .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\n        this.getRenderer().setIsPremultipliedAlpha(usePremultiply);\n      }\n\n      this._state = LoadStep.WaitLoadTexture;\n    }\n  }\n\n  /**\n   * レンダラを再構築する\n   */\n  public reloadRenderer(): void {\n    this.deleteRenderer();\n    this.createRenderer();\n    this.setupTextures();\n  }\n\n  /**\n   * 更新\n   */\n  public update(): void {\n    if (this._state != LoadStep.CompleteSetup) return;\n\n    const deltaTimeSeconds: number = LAppPal.getDeltaTime();\n    this._userTimeSeconds += deltaTimeSeconds;\n\n    this._dragManager.update(deltaTimeSeconds);\n    this._dragX = this._dragManager.getX();\n    this._dragY = this._dragManager.getY();\n\n    // モーションによるパラメータ更新の有無\n    let motionUpdated = false;\n\n    //--------------------------------------------------------------------------\n    this._model.loadParameters(); // 前回セーブされた状態をロード\n    if (this._motionManager.isFinished()) {\n      // モーションの再生がない場合、待機モーションの中からランダムで再生する\n      this.startRandomMotion(\n        LAppDefine.MotionGroupIdle,\n        LAppDefine.PriorityIdle\n      );\n    } else {\n      motionUpdated = this._motionManager.updateMotion(\n        this._model,\n        deltaTimeSeconds\n      ); // モーションを更新\n    }\n    this._model.saveParameters(); // 状態を保存\n    //--------------------------------------------------------------------------\n\n    // まばたき\n    if (!motionUpdated) {\n      if (this._eyeBlink != null) {\n        // メインモーションの更新がないとき\n        this._eyeBlink.updateParameters(this._model, deltaTimeSeconds); // 目パチ\n      }\n    }\n\n    if (this._expressionManager != null) {\n      this._expressionManager.updateMotion(this._model, deltaTimeSeconds); // 表情でパラメータ更新（相対変化）\n    }\n\n    // ドラッグによる変化\n    // ドラッグによる顔の向きの調整\n    this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30); // -30から30の値を加える\n    this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\n    this._model.addParameterValueById(\n      this._idParamAngleZ,\n      this._dragX * this._dragY * -30\n    );\n\n    // ドラッグによる体の向きの調整\n    this._model.addParameterValueById(\n      this._idParamBodyAngleX,\n      this._dragX * 10\n    ); // -10から10の値を加える\n\n    // ドラッグによる目の向きの調整\n    this._model.addParameterValueById(this._idParamEyeBallX, this._dragX); // -1から1の値を加える\n    this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\n\n    // 呼吸など\n    if (this._breath != null) {\n      this._breath.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    // 物理演算の設定\n    if (this._physics != null) {\n      this._physics.evaluate(this._model, deltaTimeSeconds);\n    }\n\n    // リップシンクの設定\n    if (this._lipsync) {\n      let value = 0.0; // リアルタイムでリップシンクを行う場合、システムから音量を取得して、0~1の範囲で値を入力します。\n\n      this._wavFileHandler.update(deltaTimeSeconds);\n      value = this._wavFileHandler.getRms();\n\n      for (let i = 0; i < this._lipSyncIds.getSize(); ++i) {\n        this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\n      }\n    }\n\n    // ポーズの設定\n    if (this._pose != null) {\n      this._pose.updateParameters(this._model, deltaTimeSeconds);\n    }\n\n    this._model.update();\n  }\n\n  /**\n   * 引数で指定したモーションの再生を開始する\n   * @param group モーショングループ名\n   * @param no グループ内の番号\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startMotion(\n    group: string,\n    no: number,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (priority == LAppDefine.PriorityForce) {\n      this._motionManager.setReservePriority(priority);\n    } else if (!this._motionManager.reserveMotion(priority)) {\n      if (this._debugMode) {\n        LAppPal.printMessage(\"[APP]can't start motion.\");\n      }\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const motionFileName = this._modelSetting.getMotionFileName(group, no);\n\n    // ex) idle_0\n    const name = `${group}_${no}`;\n    let motion: CubismMotion = this._motions.getValue(name) as CubismMotion;\n    let autoDelete = false;\n\n    if (motion == null) {\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          motion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            null,\n            onFinishedMotionHandler,\n            onBeganMotionHandler,\n            this._modelSetting,\n            group,\n            no\n          );\n\n          if (motion == null) {\n            return;\n          }\n\n          motion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n          autoDelete = true; // 終了時にメモリから削除\n        });\n    } else {\n      motion.setBeganMotionHandler(onBeganMotionHandler);\n      motion.setFinishedMotionHandler(onFinishedMotionHandler);\n    }\n\n    //voice\n    const voice = this._modelSetting.getMotionSoundFileName(group, no);\n    if (voice.localeCompare('') != 0) {\n      let path = voice;\n      path = this._modelHomeDir + path;\n      this._wavFileHandler.start(path);\n    }\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]start motion: [${group}_${no}`);\n    }\n    return this._motionManager.startMotionPriority(\n      motion,\n      autoDelete,\n      priority\n    );\n  }\n\n  /**\n   * ランダムに選ばれたモーションの再生を開始する。\n   * @param group モーショングループ名\n   * @param priority 優先度\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するisFinished()の引数で使用する。開始できない時は[-1]\n   */\n  public startRandomMotion(\n    group: string,\n    priority: number,\n    onFinishedMotionHandler?: FinishedMotionCallback,\n    onBeganMotionHandler?: BeganMotionCallback\n  ): CubismMotionQueueEntryHandle {\n    if (this._modelSetting.getMotionCount(group) == 0) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n\n    const no: number = Math.floor(\n      Math.random() * this._modelSetting.getMotionCount(group)\n    );\n\n    return this.startMotion(\n      group,\n      no,\n      priority,\n      onFinishedMotionHandler,\n      onBeganMotionHandler\n    );\n  }\n\n  /**\n   * 引数で指定した表情モーションをセットする\n   *\n   * @param expressionId 表情モーションのID\n   */\n  public setExpression(expressionId: string): void {\n    const motion: ACubismMotion = this._expressions.getValue(expressionId);\n\n    if (this._debugMode) {\n      LAppPal.printMessage(`[APP]expression: [${expressionId}]`);\n    }\n\n    if (motion != null) {\n      this._expressionManager.startMotion(motion, false);\n    } else {\n      if (this._debugMode) {\n        LAppPal.printMessage(`[APP]expression[${expressionId}] is null`);\n      }\n    }\n  }\n\n  /**\n   * ランダムに選ばれた表情モーションをセットする\n   */\n  public setRandomExpression(): void {\n    if (this._expressions.getSize() == 0) {\n      return;\n    }\n\n    const no: number = Math.floor(Math.random() * this._expressions.getSize());\n\n    for (let i = 0; i < this._expressions.getSize(); i++) {\n      if (i == no) {\n        const name: string = this._expressions._keyValues[i].first;\n        this.setExpression(name);\n        return;\n      }\n    }\n  }\n\n  /**\n   * イベントの発火を受け取る\n   */\n  public motionEventFired(eventValue: csmString): void {\n    CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\n  }\n\n  /**\n   * 当たり判定テスト\n   * 指定ＩＤの頂点リストから矩形を計算し、座標をが矩形範囲内か判定する。\n   *\n   * @param hitArenaName  当たり判定をテストする対象のID\n   * @param x             判定を行うX座標\n   * @param y             判定を行うY座標\n   */\n  public hitTest(hitArenaName: string, x: number, y: number): boolean {\n    // 透明時は当たり判定無し。\n    if (this._opacity < 1) {\n      return false;\n    }\n\n    const count: number = this._modelSetting.getHitAreasCount();\n\n    for (let i = 0; i < count; i++) {\n      if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\n        const drawId: CubismIdHandle = this._modelSetting.getHitAreaId(i);\n        return this.isHit(drawId, x, y);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * モーションデータをグループ名から一括でロードする。\n   * モーションデータの名前は内部でModelSettingから取得する。\n   *\n   * @param group モーションデータのグループ名\n   */\n  public preLoadMotionGroup(group: string): void {\n    for (let i = 0; i < this._modelSetting.getMotionCount(group); i++) {\n      const motionFileName = this._modelSetting.getMotionFileName(group, i);\n\n      // ex) idle_0\n      const name = `${group}_${i}`;\n      if (this._debugMode) {\n        LAppPal.printMessage(\n          `[APP]load motion: ${motionFileName} => [${name}]`\n        );\n      }\n\n      fetch(`${this._modelHomeDir}${motionFileName}`)\n        .then(response => {\n          if (response.ok) {\n            return response.arrayBuffer();\n          } else if (response.status >= 400) {\n            CubismLogError(\n              `Failed to load file ${this._modelHomeDir}${motionFileName}`\n            );\n            return new ArrayBuffer(0);\n          }\n        })\n        .then(arrayBuffer => {\n          const tmpMotion: CubismMotion = this.loadMotion(\n            arrayBuffer,\n            arrayBuffer.byteLength,\n            name,\n            null,\n            null,\n            this._modelSetting,\n            group,\n            i\n          );\n\n          if (tmpMotion != null) {\n            tmpMotion.setEffectIds(this._eyeBlinkIds, this._lipSyncIds);\n\n            if (this._motions.getValue(name) != null) {\n              ACubismMotion.delete(this._motions.getValue(name));\n            }\n\n            this._motions.setValue(name, tmpMotion);\n\n            this._motionCount++;\n            if (this._motionCount >= this._allMotionCount) {\n              this._state = LoadStep.LoadTexture;\n\n              // 全てのモーションを停止する\n              this._motionManager.stopAllMotions();\n\n              this._updating = false;\n              this._initialized = true;\n\n              this.createRenderer();\n              this.setupTextures();\n              this.getRenderer().startUp(\n                this._subdelegate.getGlManager().getGl()\n              );\n            }\n          } else {\n            // loadMotionできなかった場合はモーションの総数がずれるので1つ減らす\n            this._allMotionCount--;\n          }\n        });\n    }\n  }\n\n  /**\n   * すべてのモーションデータを解放する。\n   */\n  public releaseMotions(): void {\n    this._motions.clear();\n  }\n\n  /**\n   * 全ての表情データを解放する。\n   */\n  public releaseExpressions(): void {\n    this._expressions.clear();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public doDraw(): void {\n    if (this._model == null) return;\n\n    // キャンバスサイズを渡す\n    const canvas = this._subdelegate.getCanvas();\n    const viewport: number[] = [0, 0, canvas.width, canvas.height];\n\n    this.getRenderer().setRenderState(\n      this._subdelegate.getFrameBuffer(),\n      viewport\n    );\n    this.getRenderer().drawModel();\n  }\n\n  /**\n   * モデルを描画する処理。モデルを描画する空間のView-Projection行列を渡す。\n   */\n  public draw(matrix: CubismMatrix44): void {\n    if (this._model == null) {\n      return;\n    }\n\n    // 各読み込み終了後\n    if (this._state == LoadStep.CompleteSetup) {\n      matrix.multiplyByMatrix(this._modelMatrix);\n\n      this.getRenderer().setMvpMatrix(matrix);\n\n      this.doDraw();\n    }\n  }\n\n  public async hasMocConsistencyFromFile() {\n    CSM_ASSERT(this._modelSetting.getModelFileName().localeCompare(``));\n\n    // CubismModel\n    if (this._modelSetting.getModelFileName() != '') {\n      const modelFileName = this._modelSetting.getModelFileName();\n\n      const response = await fetch(`${this._modelHomeDir}${modelFileName}`);\n      const arrayBuffer = await response.arrayBuffer();\n\n      this._consistency = CubismMoc.hasMocConsistency(arrayBuffer);\n\n      if (!this._consistency) {\n        CubismLogInfo('Inconsistent MOC3.');\n      } else {\n        CubismLogInfo('Consistent MOC3.');\n      }\n\n      return this._consistency;\n    } else {\n      LAppPal.printMessage('Model data does not exist.');\n    }\n  }\n\n  public setSubdelegate(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n\n    this._modelSetting = null;\n    this._modelHomeDir = null;\n    this._userTimeSeconds = 0.0;\n\n    this._eyeBlinkIds = new csmVector<CubismIdHandle>();\n    this._lipSyncIds = new csmVector<CubismIdHandle>();\n\n    this._motions = new csmMap<string, ACubismMotion>();\n    this._expressions = new csmMap<string, ACubismMotion>();\n\n    this._hitArea = new csmVector<csmRect>();\n    this._userArea = new csmVector<csmRect>();\n\n    this._idParamAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleX\n    );\n    this._idParamAngleY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleY\n    );\n    this._idParamAngleZ = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamAngleZ\n    );\n    this._idParamEyeBallX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallX\n    );\n    this._idParamEyeBallY = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamEyeBallY\n    );\n    this._idParamBodyAngleX = CubismFramework.getIdManager().getId(\n      CubismDefaultParameterId.ParamBodyAngleX\n    );\n\n    if (LAppDefine.MOCConsistencyValidationEnable) {\n      this._mocConsistency = true;\n    }\n\n    this._state = LoadStep.LoadAssets;\n    this._expressionCount = 0;\n    this._textureCount = 0;\n    this._motionCount = 0;\n    this._allMotionCount = 0;\n    this._wavFileHandler = new LAppWavFileHandler();\n    this._consistency = false;\n  }\n\n  private _subdelegate: LAppSubdelegate;\n\n  _modelSetting: ICubismModelSetting; // モデルセッティング情報\n  _modelHomeDir: string; // モデルセッティングが置かれたディレクトリ\n  _userTimeSeconds: number; // デルタ時間の積算値[秒]\n\n  _eyeBlinkIds: csmVector<CubismIdHandle>; // モデルに設定された瞬き機能用パラメータID\n  _lipSyncIds: csmVector<CubismIdHandle>; // モデルに設定されたリップシンク機能用パラメータID\n\n  _motions: csmMap<string, ACubismMotion>; // 読み込まれているモーションのリスト\n  _expressions: csmMap<string, ACubismMotion>; // 読み込まれている表情のリスト\n\n  _hitArea: csmVector<csmRect>;\n  _userArea: csmVector<csmRect>;\n\n  _idParamAngleX: CubismIdHandle; // パラメータID: ParamAngleX\n  _idParamAngleY: CubismIdHandle; // パラメータID: ParamAngleY\n  _idParamAngleZ: CubismIdHandle; // パラメータID: ParamAngleZ\n  _idParamEyeBallX: CubismIdHandle; // パラメータID: ParamEyeBallX\n  _idParamEyeBallY: CubismIdHandle; // パラメータID: ParamEyeBAllY\n  _idParamBodyAngleX: CubismIdHandle; // パラメータID: ParamBodyAngleX\n\n  _state: LoadStep; // 現在のステータス管理用\n  _expressionCount: number; // 表情データカウント\n  _textureCount: number; // テクスチャカウント\n  _motionCount: number; // モーションデータカウント\n  _allMotionCount: number; // モーション総数\n  _wavFileHandler: LAppWavFileHandler; //wavファイルハンドラ\n  _consistency: boolean; // MOC3一貫性チェック管理用\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { ACubismMotion } from '@framework/motion/acubismmotion';\nimport { csmVector } from '@framework/type/csmvector';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppModel } from './lappmodel';\nimport { LAppPal } from './lapppal';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * サンプルアプリケーションにおいてCubismModelを管理するクラス\n * モデル生成と破棄、タップイベントの処理、モデル切り替えを行う。\n */\nexport class LAppLive2DManager {\n  /**\n   * 現在のシーンで保持しているすべてのモデルを解放する\n   */\n  private releaseAllModel(): void {\n    this._models.clear();\n  }\n\n  /**\n   * 画面をドラッグした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onDrag(x: number, y: number): void {\n    const model: LAppModel = this._models.at(0);\n    if (model) {\n      model.setDragging(x, y);\n    }\n  }\n\n  /**\n   * 画面をタップした時の処理\n   *\n   * @param x 画面のX座標\n   * @param y 画面のY座標\n   */\n  public onTap(x: number, y: number): void {\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(\n        `[APP]tap point: {x: ${x.toFixed(2)} y: ${y.toFixed(2)}}`\n      );\n    }\n\n    const model: LAppModel = this._models.at(0);\n\n    if (model.hitTest(LAppDefine.HitAreaNameHead, x, y)) {\n      if (LAppDefine.DebugLogEnable) {\n        LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameHead}]`);\n      }\n      model.setRandomExpression();\n    } else if (model.hitTest(LAppDefine.HitAreaNameBody, x, y)) {\n      if (LAppDefine.DebugLogEnable) {\n        LAppPal.printMessage(`[APP]hit area: [${LAppDefine.HitAreaNameBody}]`);\n      }\n      model.startRandomMotion(\n        LAppDefine.MotionGroupTapBody,\n        LAppDefine.PriorityNormal,\n        this.finishedMotion,\n        this.beganMotion\n      );\n    }\n  }\n\n  /**\n   * 画面を更新するときの処理\n   * モデルの更新処理及び描画処理を行う\n   */\n  public onUpdate(): void {\n    const { width, height } = this._subdelegate.getCanvas();\n\n    const projection: CubismMatrix44 = new CubismMatrix44();\n    const model: LAppModel = this._models.at(0);\n\n    if (model.getModel()) {\n      if (model.getModel().getCanvasWidth() > 1.0 && width < height) {\n        // 横に長いモデルを縦長ウィンドウに表示する際モデルの横サイズでscaleを算出する\n        model.getModelMatrix().setWidth(2.0);\n        projection.scale(1.0, width / height);\n      } else {\n        projection.scale(height / width, 1.0);\n      }\n\n      // 必要があればここで乗算\n      if (this._viewMatrix != null) {\n        projection.multiplyByMatrix(this._viewMatrix);\n      }\n    }\n\n    model.update();\n    model.draw(projection); // 参照渡しなのでprojectionは変質する。\n  }\n\n  /**\n   * 次のシーンに切りかえる\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   */\n  public nextScene(): void {\n    const no: number = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\n    this.changeScene(no);\n  }\n\n  /**\n   * シーンを切り替える\n   * サンプルアプリケーションではモデルセットの切り替えを行う。\n   * @param index\n   */\n  private changeScene(index: number): void {\n    this._sceneIndex = index;\n\n    if (LAppDefine.DebugLogEnable) {\n      LAppPal.printMessage(`[APP]model index: ${this._sceneIndex}`);\n    }\n\n    // ModelDir[]に保持したディレクトリ名から\n    // model3.jsonのパスを決定する。\n    // ディレクトリ名とmodel3.jsonの名前を一致させておくこと。\n    const model: string = LAppDefine.ModelDir[index];\n    const modelPath: string = LAppDefine.ResourcesPath + model + '/';\n    let modelJsonName: string = LAppDefine.ModelDir[index];\n    modelJsonName += '.model3.json';\n\n    this.releaseAllModel();\n    const instance = new LAppModel();\n    instance.setSubdelegate(this._subdelegate);\n    instance.loadAssets(modelPath, modelJsonName);\n    this._models.pushBack(instance);\n  }\n\n  public setViewMatrix(m: CubismMatrix44) {\n    for (let i = 0; i < 16; i++) {\n      this._viewMatrix.getArray()[i] = m.getArray()[i];\n    }\n  }\n\n  /**\n   * モデルの追加\n   */\n  public addModel(sceneIndex: number = 0): void {\n    this._sceneIndex = sceneIndex;\n    this.changeScene(this._sceneIndex);\n  }\n\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._subdelegate = null;\n    this._viewMatrix = new CubismMatrix44();\n    this._models = new csmVector<LAppModel>();\n    this._sceneIndex = 0;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {}\n\n  /**\n   * 初期化する。\n   * @param subdelegate\n   */\n  public initialize(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n    this.changeScene(this._sceneIndex);\n  }\n\n  /**\n   * 自身が所属するSubdelegate\n   */\n  private _subdelegate: LAppSubdelegate;\n\n  _viewMatrix: CubismMatrix44; // モデル描画に用いるview行列\n  _models: csmVector<LAppModel>; // モデルインスタンスのコンテナ\n  private _sceneIndex: number; // 表示するシーンのインデックス値\n\n  // モーション再生開始のコールバック関数\n  beganMotion = (self: ACubismMotion): void => {\n    LAppPal.printMessage('Motion Began:');\n    console.log(self);\n  };\n  // モーション再生終了のコールバック関数\n  finishedMotion = (self: ACubismMotion): void => {\n    LAppPal.printMessage('Motion Finished:');\n    console.log(self);\n  };\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector, iterator } from '@framework/type/csmvector';\nimport { LAppGlManager } from './lappglmanager';\n\n/**\n * テクスチャ管理クラス\n * 画像読み込み、管理を行うクラス。\n */\nexport class LAppTextureManager {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._textures = new csmVector<TextureInfo>();\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      this._glManager.getGl().deleteTexture(ite.ptr().id);\n    }\n    this._textures = null;\n  }\n\n  /**\n   * 画像読み込み\n   *\n   * @param fileName 読み込む画像ファイルパス名\n   * @param usePremultiply Premult処理を有効にするか\n   * @return 画像情報、読み込み失敗時はnullを返す\n   */\n  public createTextureFromPngFile(\n    fileName: string,\n    usePremultiply: boolean,\n    callback: (textureInfo: TextureInfo) => void\n  ): void {\n    // search loaded texture already\n    for (\n      let ite: iterator<TextureInfo> = this._textures.begin();\n      ite.notEqual(this._textures.end());\n      ite.preIncrement()\n    ) {\n      if (\n        ite.ptr().fileName == fileName &&\n        ite.ptr().usePremultply == usePremultiply\n      ) {\n        // 2回目以降はキャッシュが使用される(待ち時間なし)\n        // WebKitでは同じImageのonloadを再度呼ぶには再インスタンスが必要\n        // 詳細：https://stackoverflow.com/a/5024181\n        ite.ptr().img = new Image();\n        ite\n          .ptr()\n          .img.addEventListener('load', (): void => callback(ite.ptr()), {\n            passive: true\n          });\n        ite.ptr().img.src = fileName;\n        return;\n      }\n    }\n\n    // データのオンロードをトリガーにする\n    const img = new Image();\n    img.addEventListener(\n      'load',\n      (): void => {\n        // テクスチャオブジェクトの作成\n        const tex: WebGLTexture = this._glManager.getGl().createTexture();\n\n        // テクスチャを選択\n        this._glManager\n          .getGl()\n          .bindTexture(this._glManager.getGl().TEXTURE_2D, tex);\n\n        // テクスチャにピクセルを書き込む\n        this._glManager\n          .getGl()\n          .texParameteri(\n            this._glManager.getGl().TEXTURE_2D,\n            this._glManager.getGl().TEXTURE_MIN_FILTER,\n            this._glManager.getGl().LINEAR_MIPMAP_LINEAR\n          );\n        this._glManager\n          .getGl()\n          .texParameteri(\n            this._glManager.getGl().TEXTURE_2D,\n            this._glManager.getGl().TEXTURE_MAG_FILTER,\n            this._glManager.getGl().LINEAR\n          );\n\n        // Premult処理を行わせる\n        if (usePremultiply) {\n          this._glManager\n            .getGl()\n            .pixelStorei(\n              this._glManager.getGl().UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n              1\n            );\n        }\n\n        // テクスチャにピクセルを書き込む\n        this._glManager\n          .getGl()\n          .texImage2D(\n            this._glManager.getGl().TEXTURE_2D,\n            0,\n            this._glManager.getGl().RGBA,\n            this._glManager.getGl().RGBA,\n            this._glManager.getGl().UNSIGNED_BYTE,\n            img\n          );\n\n        // ミップマップを生成\n        this._glManager\n          .getGl()\n          .generateMipmap(this._glManager.getGl().TEXTURE_2D);\n\n        // テクスチャをバインド\n        this._glManager\n          .getGl()\n          .bindTexture(this._glManager.getGl().TEXTURE_2D, null);\n\n        const textureInfo: TextureInfo = new TextureInfo();\n        if (textureInfo != null) {\n          textureInfo.fileName = fileName;\n          textureInfo.width = img.width;\n          textureInfo.height = img.height;\n          textureInfo.id = tex;\n          textureInfo.img = img;\n          textureInfo.usePremultply = usePremultiply;\n          if (this._textures != null) {\n            this._textures.pushBack(textureInfo);\n          }\n        }\n\n        callback(textureInfo);\n      },\n      { passive: true }\n    );\n    img.src = fileName;\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 配列に存在する画像全てを解放する。\n   */\n  public releaseTextures(): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n      this._textures.set(i, null);\n    }\n\n    this._textures.clear();\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定したテクスチャの画像を解放する。\n   * @param texture 解放するテクスチャ\n   */\n  public releaseTextureByTexture(texture: WebGLTexture): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).id != texture) {\n        continue;\n      }\n\n      this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n      this._textures.set(i, null);\n      this._textures.remove(i);\n      break;\n    }\n  }\n\n  /**\n   * 画像の解放\n   *\n   * 指定した名前の画像を解放する。\n   * @param fileName 解放する画像ファイルパス名\n   */\n  public releaseTextureByFilePath(fileName: string): void {\n    for (let i = 0; i < this._textures.getSize(); i++) {\n      if (this._textures.at(i).fileName == fileName) {\n        this._glManager.getGl().deleteTexture(this._textures.at(i).id);\n        this._textures.set(i, null);\n        this._textures.remove(i);\n        break;\n      }\n    }\n  }\n\n  /**\n   * setter\n   * @param glManager\n   */\n  public setGlManager(glManager: LAppGlManager): void {\n    this._glManager = glManager;\n  }\n\n  _textures: csmVector<TextureInfo>;\n  private _glManager: LAppGlManager;\n}\n\n/**\n * 画像情報構造体\n */\nexport class TextureInfo {\n  img: HTMLImageElement; // 画像\n  id: WebGLTexture = null; // テクスチャ\n  width = 0; // 横幅\n  height = 0; // 高さ\n  usePremultply: boolean; // Premult処理を有効にするか\n  fileName: string; // ファイル名\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from './cubismmatrix44';\n\n/**\n * カメラの位置変更に使うと便利な4x4行列\n *\n * カメラの位置変更に使うと便利な4x4行列のクラス。\n */\nexport class CubismViewMatrix extends CubismMatrix44 {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    super();\n    this._screenLeft = 0.0;\n    this._screenRight = 0.0;\n    this._screenTop = 0.0;\n    this._screenBottom = 0.0;\n    this._maxLeft = 0.0;\n    this._maxRight = 0.0;\n    this._maxTop = 0.0;\n    this._maxBottom = 0.0;\n    this._maxScale = 0.0;\n    this._minScale = 0.0;\n  }\n\n  /**\n   * 移動を調整\n   *\n   * @param x X軸の移動量\n   * @param y Y軸の移動量\n   */\n  public adjustTranslate(x: number, y: number): void {\n    if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\n      x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\n    }\n\n    if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {\n      x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\n    }\n\n    if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\n      y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\n    }\n\n    if (\n      this._tr[5] * this._maxBottom + (this._tr[13] + y) >\n      this._screenBottom\n    ) {\n      y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\n    }\n\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      x,\n      y,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * 拡大率を調整\n   *\n   * @param cx 拡大を行うX軸の中心位置\n   * @param cy 拡大を行うY軸の中心位置\n   * @param scale 拡大率\n   */\n  public adjustScale(cx: number, cy: number, scale: number): void {\n    const maxScale: number = this.getMaxScale();\n    const minScale: number = this.getMinScale();\n\n    const targetScale = scale * this._tr[0];\n\n    if (targetScale < minScale) {\n      if (this._tr[0] > 0.0) {\n        scale = minScale / this._tr[0];\n      }\n    } else if (targetScale > maxScale) {\n      if (this._tr[0] > 0.0) {\n        scale = maxScale / this._tr[0];\n      }\n    }\n\n    const tr1: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      cx,\n      cy,\n      0.0,\n      1.0\n    ]);\n\n    const tr2: Float32Array = new Float32Array([\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      scale,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0\n    ]);\n\n    const tr3: Float32Array = new Float32Array([\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      1.0,\n      0.0,\n      -cx,\n      -cy,\n      0.0,\n      1.0\n    ]);\n\n    CubismMatrix44.multiply(tr3, this._tr, this._tr);\n    CubismMatrix44.multiply(tr2, this._tr, this._tr);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n\n  /**\n   * デバイスに対応する論理座養生の範囲の設定\n   *\n   * @param left      左辺のX軸の位置\n   * @param right     右辺のX軸の位置\n   * @param bottom    下辺のY軸の位置\n   * @param top       上辺のY軸の位置\n   */\n  public setScreenRect(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number\n  ): void {\n    this._screenLeft = left;\n    this._screenRight = right;\n    this._screenBottom = bottom;\n    this._screenTop = top;\n  }\n\n  /**\n   * デバイスに対応する論理座標上の移動可能範囲の設定\n   * @param left      左辺のX軸の位置\n   * @param right     右辺のX軸の位置\n   * @param bottom    下辺のY軸の位置\n   * @param top       上辺のY軸の位置\n   */\n  public setMaxScreenRect(\n    left: number,\n    right: number,\n    bottom: number,\n    top: number\n  ): void {\n    this._maxLeft = left;\n    this._maxRight = right;\n    this._maxTop = top;\n    this._maxBottom = bottom;\n  }\n\n  /**\n   * 最大拡大率の設定\n   * @param maxScale 最大拡大率\n   */\n  public setMaxScale(maxScale: number): void {\n    this._maxScale = maxScale;\n  }\n\n  /**\n   * 最小拡大率の設定\n   * @param minScale 最小拡大率\n   */\n  public setMinScale(minScale: number): void {\n    this._minScale = minScale;\n  }\n\n  /**\n   * 最大拡大率の取得\n   * @return 最大拡大率\n   */\n  public getMaxScale(): number {\n    return this._maxScale;\n  }\n\n  /**\n   * 最小拡大率の取得\n   * @return 最小拡大率\n   */\n  public getMinScale(): number {\n    return this._minScale;\n  }\n\n  /**\n   * 拡大率が最大になっているかを確認する\n   *\n   * @return true 拡大率は最大\n   * @return false 拡大率は最大ではない\n   */\n  public isMaxScale(): boolean {\n    return this.getScaleX() >= this._maxScale;\n  }\n\n  /**\n   * 拡大率が最小になっているかを確認する\n   *\n   * @return true 拡大率は最小\n   * @return false 拡大率は最小ではない\n   */\n  public isMinScale(): boolean {\n    return this.getScaleX() <= this._minScale;\n  }\n\n  /**\n   * デバイスに対応する論理座標の左辺のＸ軸位置を取得する\n   * @return デバイスに対応する論理座標の左辺のX軸位置\n   */\n  public getScreenLeft(): number {\n    return this._screenLeft;\n  }\n\n  /**\n   * デバイスに対応する論理座標の右辺のＸ軸位置を取得する\n   * @return デバイスに対応する論理座標の右辺のX軸位置\n   */\n  public getScreenRight(): number {\n    return this._screenRight;\n  }\n\n  /**\n   * デバイスに対応する論理座標の下辺のY軸位置を取得する\n   * @return デバイスに対応する論理座標の下辺のY軸位置\n   */\n  public getScreenBottom(): number {\n    return this._screenBottom;\n  }\n\n  /**\n   * デバイスに対応する論理座標の上辺のY軸位置を取得する\n   * @return デバイスに対応する論理座標の上辺のY軸位置\n   */\n  public getScreenTop(): number {\n    return this._screenTop;\n  }\n\n  /**\n   * 左辺のX軸位置の最大値の取得\n   * @return 左辺のX軸位置の最大値\n   */\n  public getMaxLeft(): number {\n    return this._maxLeft;\n  }\n\n  /**\n   * 右辺のX軸位置の最大値の取得\n   * @return 右辺のX軸位置の最大値\n   */\n  public getMaxRight(): number {\n    return this._maxRight;\n  }\n\n  /**\n   * 下辺のY軸位置の最大値の取得\n   * @return 下辺のY軸位置の最大値\n   */\n  public getMaxBottom(): number {\n    return this._maxBottom;\n  }\n\n  /**\n   * 上辺のY軸位置の最大値の取得\n   * @return 上辺のY軸位置の最大値\n   */\n  public getMaxTop(): number {\n    return this._maxTop;\n  }\n\n  private _screenLeft: number; // デバイスに対応する論理座標上の範囲（左辺X軸位置）\n  private _screenRight: number; // デバイスに対応する論理座標上の範囲（右辺X軸位置）\n  private _screenTop: number; // デバイスに対応する論理座標上の範囲（上辺Y軸位置）\n  private _screenBottom: number; // デバイスに対応する論理座標上の範囲（下辺Y軸位置）\n  private _maxLeft: number; // 論理座標上の移動可能範囲（左辺X軸位置）\n  private _maxRight: number; // 論理座標上の移動可能範囲（右辺X軸位置）\n  private _maxTop: number; // 論理座標上の移動可能範囲（上辺Y軸位置）\n  private _maxBottom: number; // 論理座標上の移動可能範囲（下辺Y軸位置）\n  private _maxScale: number; // 拡大率の最大値\n  private _minScale: number; // 拡大率の最小値\n}\n\n// Namespace definition for compatibility.\nimport * as $ from './cubismviewmatrix';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Live2DCubismFramework {\n  export const CubismViewMatrix = $.CubismViewMatrix;\n  export type CubismViewMatrix = $.CubismViewMatrix;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * スプライトを実装するクラス\n *\n * テクスチャＩＤ、Rectの管理\n */\nexport class LAppSprite {\n  /**\n   * コンストラクタ\n   * @param x            x座標\n   * @param y            y座標\n   * @param width        横幅\n   * @param height       高さ\n   * @param textureId    テクスチャ\n   */\n  public constructor(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    textureId: WebGLTexture\n  ) {\n    this._rect = new Rect();\n    this._rect.left = x - width * 0.5;\n    this._rect.right = x + width * 0.5;\n    this._rect.up = y + height * 0.5;\n    this._rect.down = y - height * 0.5;\n    this._texture = textureId;\n    this._vertexBuffer = null;\n    this._uvBuffer = null;\n    this._indexBuffer = null;\n\n    this._positionLocation = null;\n    this._uvLocation = null;\n    this._textureLocation = null;\n\n    this._positionArray = null;\n    this._uvArray = null;\n    this._indexArray = null;\n\n    this._firstDraw = true;\n  }\n\n  /**\n   * 解放する。\n   */\n  public release(): void {\n    this._rect = null;\n\n    const gl = this._subdelegate.getGlManager().getGl();\n\n    gl.deleteTexture(this._texture);\n    this._texture = null;\n\n    gl.deleteBuffer(this._uvBuffer);\n    this._uvBuffer = null;\n\n    gl.deleteBuffer(this._vertexBuffer);\n    this._vertexBuffer = null;\n\n    gl.deleteBuffer(this._indexBuffer);\n    this._indexBuffer = null;\n  }\n\n  /**\n   * テクスチャを返す\n   */\n  public getTexture(): WebGLTexture {\n    return this._texture;\n  }\n\n  /**\n   * 描画する。\n   * @param programId シェーダープログラム\n   * @param canvas 描画するキャンパス情報\n   */\n  public render(programId: WebGLProgram): void {\n    if (this._texture == null) {\n      // ロードが完了していない\n      return;\n    }\n\n    const gl = this._subdelegate.getGlManager().getGl();\n\n    // 初回描画時\n    if (this._firstDraw) {\n      // 何番目のattribute変数か取得\n      this._positionLocation = gl.getAttribLocation(programId, 'position');\n      gl.enableVertexAttribArray(this._positionLocation);\n\n      this._uvLocation = gl.getAttribLocation(programId, 'uv');\n      gl.enableVertexAttribArray(this._uvLocation);\n\n      // 何番目のuniform変数か取得\n      this._textureLocation = gl.getUniformLocation(programId, 'texture');\n\n      // uniform属性の登録\n      gl.uniform1i(this._textureLocation, 0);\n\n      // uvバッファ、座標初期化\n      {\n        this._uvArray = new Float32Array([\n          1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0\n        ]);\n\n        // uvバッファを作成\n        this._uvBuffer = gl.createBuffer();\n      }\n\n      // 頂点バッファ、座標初期化\n      {\n        const maxWidth = this._subdelegate.getCanvas().width;\n        const maxHeight = this._subdelegate.getCanvas().height;\n\n        // 頂点データ\n        this._positionArray = new Float32Array([\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\n          (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\n          (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)\n        ]);\n\n        // 頂点バッファを作成\n        this._vertexBuffer = gl.createBuffer();\n      }\n\n      // 頂点インデックスバッファ、初期化\n      {\n        // インデックスデータ\n        this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);\n\n        // インデックスバッファを作成\n        this._indexBuffer = gl.createBuffer();\n      }\n\n      this._firstDraw = false;\n    }\n\n    // UV座標登録\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._uvBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._uvArray, gl.STATIC_DRAW);\n\n    // attribute属性を登録\n    gl.vertexAttribPointer(this._uvLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // 頂点座標を登録\n    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this._positionArray, gl.STATIC_DRAW);\n\n    // attribute属性を登録\n    gl.vertexAttribPointer(this._positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // 頂点インデックスを作成\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexArray, gl.DYNAMIC_DRAW);\n\n    // モデルの描画\n    gl.bindTexture(gl.TEXTURE_2D, this._texture);\n    gl.drawElements(\n      gl.TRIANGLES,\n      this._indexArray.length,\n      gl.UNSIGNED_SHORT,\n      0\n    );\n  }\n\n  /**\n   * 当たり判定\n   * @param pointX x座標\n   * @param pointY y座標\n   */\n  public isHit(pointX: number, pointY: number): boolean {\n    // 画面サイズを取得する。\n    const { height } = this._subdelegate.getCanvas();\n\n    // Y座標は変換する必要あり\n    const y = height - pointY;\n\n    return (\n      pointX >= this._rect.left &&\n      pointX <= this._rect.right &&\n      y <= this._rect.up &&\n      y >= this._rect.down\n    );\n  }\n\n  /**\n   * setter\n   * @param subdelegate\n   */\n  public setSubdelegate(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n  }\n\n  _texture: WebGLTexture; // テクスチャ\n  _vertexBuffer: WebGLBuffer; // 頂点バッファ\n  _uvBuffer: WebGLBuffer; // uv頂点バッファ\n  _indexBuffer: WebGLBuffer; // 頂点インデックスバッファ\n  _rect: Rect; // 矩形\n\n  _positionLocation: number;\n  _uvLocation: number;\n  _textureLocation: WebGLUniformLocation;\n\n  _positionArray: Float32Array;\n  _uvArray: Float32Array;\n  _indexArray: Uint16Array;\n\n  _firstDraw: boolean;\n\n  private _subdelegate: LAppSubdelegate;\n}\n\nexport class Rect {\n  public left: number; // 左辺\n  public right: number; // 右辺\n  public up: number; // 上辺\n  public down: number; // 下辺\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nexport class TouchManager {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._startX = 0.0;\n    this._startY = 0.0;\n    this._lastX = 0.0;\n    this._lastY = 0.0;\n    this._lastX1 = 0.0;\n    this._lastY1 = 0.0;\n    this._lastX2 = 0.0;\n    this._lastY2 = 0.0;\n    this._lastTouchDistance = 0.0;\n    this._deltaX = 0.0;\n    this._deltaY = 0.0;\n    this._scale = 1.0;\n    this._touchSingle = false;\n    this._flipAvailable = false;\n  }\n\n  public getCenterX(): number {\n    return this._lastX;\n  }\n\n  public getCenterY(): number {\n    return this._lastY;\n  }\n\n  public getDeltaX(): number {\n    return this._deltaX;\n  }\n\n  public getDeltaY(): number {\n    return this._deltaY;\n  }\n\n  public getStartX(): number {\n    return this._startX;\n  }\n\n  public getStartY(): number {\n    return this._startY;\n  }\n\n  public getScale(): number {\n    return this._scale;\n  }\n\n  public getX(): number {\n    return this._lastX;\n  }\n\n  public getY(): number {\n    return this._lastY;\n  }\n\n  public getX1(): number {\n    return this._lastX1;\n  }\n\n  public getY1(): number {\n    return this._lastY1;\n  }\n\n  public getX2(): number {\n    return this._lastX2;\n  }\n\n  public getY2(): number {\n    return this._lastY2;\n  }\n\n  public isSingleTouch(): boolean {\n    return this._touchSingle;\n  }\n\n  public isFlickAvailable(): boolean {\n    return this._flipAvailable;\n  }\n\n  public disableFlick(): void {\n    this._flipAvailable = false;\n  }\n\n  /**\n   * タッチ開始時イベント\n   * @param deviceX タッチした画面のxの値\n   * @param deviceY タッチした画面のyの値\n   */\n  public touchesBegan(deviceX: number, deviceY: number): void {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._startX = deviceX;\n    this._startY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._flipAvailable = true;\n    this._touchSingle = true;\n  }\n\n  /**\n   * ドラッグ時のイベント\n   * @param deviceX タッチした画面のxの値\n   * @param deviceY タッチした画面のyの値\n   */\n  public touchesMoved(deviceX: number, deviceY: number): void {\n    this._lastX = deviceX;\n    this._lastY = deviceY;\n    this._lastTouchDistance = -1.0;\n    this._touchSingle = true;\n  }\n\n  /**\n   * フリックの距離測定\n   * @return フリック距離\n   */\n  public getFlickDistance(): number {\n    return this.calculateDistance(\n      this._startX,\n      this._startY,\n      this._lastX,\n      this._lastY\n    );\n  }\n\n  /**\n   * 点１から点２への距離を求める\n   *\n   * @param x1 １つ目のタッチした画面のxの値\n   * @param y1 １つ目のタッチした画面のyの値\n   * @param x2 ２つ目のタッチした画面のxの値\n   * @param y2 ２つ目のタッチした画面のyの値\n   */\n  public calculateDistance(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n  ): number {\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  }\n\n  /**\n   * ２つ目の値から、移動量を求める。\n   * 違う方向の場合は移動量０。同じ方向の場合は、絶対値が小さい方の値を参照する。\n   *\n   * @param v1 １つ目の移動量\n   * @param v2 ２つ目の移動量\n   *\n   * @return 小さい方の移動量\n   */\n  public calculateMovingAmount(v1: number, v2: number): number {\n    if (v1 > 0.0 != v2 > 0.0) {\n      return 0.0;\n    }\n\n    const sign: number = v1 > 0.0 ? 1.0 : -1.0;\n    const absoluteValue1 = Math.abs(v1);\n    const absoluteValue2 = Math.abs(v2);\n    return (\n      sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2)\n    );\n  }\n\n  _startY: number; // タッチを開始した時のxの値\n  _startX: number; // タッチを開始した時のyの値\n  _lastX: number; // シングルタッチ時のxの値\n  _lastY: number; // シングルタッチ時のyの値\n  _lastX1: number; // ダブルタッチ時の一つ目のxの値\n  _lastY1: number; // ダブルタッチ時の一つ目のyの値\n  _lastX2: number; // ダブルタッチ時の二つ目のxの値\n  _lastY2: number; // ダブルタッチ時の二つ目のyの値\n  _lastTouchDistance: number; // 2本以上でタッチしたときの指の距離\n  _deltaX: number; // 前回の値から今回の値へのxの移動距離。\n  _deltaY: number; // 前回の値から今回の値へのyの移動距離。\n  _scale: number; // このフレームで掛け合わせる拡大率。拡大操作中以外は1。\n  _touchSingle: boolean; // シングルタッチ時はtrue\n  _flipAvailable: boolean; // フリップが有効かどうか\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { CubismMatrix44 } from '@framework/math/cubismmatrix44';\nimport { CubismViewMatrix } from '@framework/math/cubismviewmatrix';\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppDelegate } from './lappdelegate';\nimport { LAppPal } from './lapppal';\nimport { LAppSprite } from './lappsprite';\nimport { TextureInfo } from './lapptexturemanager';\nimport { TouchManager } from './touchmanager';\nimport { LAppSubdelegate } from './lappsubdelegate';\n\n/**\n * 描画クラス。\n */\nexport class LAppView {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._programId = null;\n    this._back = null;\n    this._gear = null;\n\n    // タッチ関係のイベント管理\n    this._touchManager = new TouchManager();\n\n    // デバイス座標からスクリーン座標に変換するための\n    this._deviceToScreen = new CubismMatrix44();\n\n    // 画面の表示の拡大縮小や移動の変換を行う行列\n    this._viewMatrix = new CubismViewMatrix();\n  }\n\n  /**\n   * 初期化する。\n   */\n  public initialize(subdelegate: LAppSubdelegate): void {\n    this._subdelegate = subdelegate;\n    const { width, height } = subdelegate.getCanvas();\n\n    const ratio: number = width / height;\n    const left: number = -ratio;\n    const right: number = ratio;\n    const bottom: number = LAppDefine.ViewLogicalLeft;\n    const top: number = LAppDefine.ViewLogicalRight;\n\n    this._viewMatrix.setScreenRect(left, right, bottom, top); // デバイスに対応する画面の範囲。 Xの左端、Xの右端、Yの下端、Yの上端\n    this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);\n\n    this._deviceToScreen.loadIdentity();\n    if (width > height) {\n      const screenW: number = Math.abs(right - left);\n      this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\n    } else {\n      const screenH: number = Math.abs(top - bottom);\n      this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);\n    }\n    this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\n\n    // 表示範囲の設定\n    this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale); // 限界拡張率\n    this._viewMatrix.setMinScale(LAppDefine.ViewMinScale); // 限界縮小率\n\n    // 表示できる最大範囲\n    this._viewMatrix.setMaxScreenRect(\n      LAppDefine.ViewLogicalMaxLeft,\n      LAppDefine.ViewLogicalMaxRight,\n      LAppDefine.ViewLogicalMaxBottom,\n      LAppDefine.ViewLogicalMaxTop\n    );\n  }\n\n  /**\n   * 解放する\n   */\n  public release(): void {\n    this._viewMatrix = null;\n    this._touchManager = null;\n    this._deviceToScreen = null;\n\n    this._gear.release();\n    this._gear = null;\n\n    this._back.release();\n    this._back = null;\n\n    this._subdelegate.getGlManager().getGl().deleteProgram(this._programId);\n    this._programId = null;\n  }\n\n  /**\n   * 描画する。\n   */\n  public render(): void {\n    this._subdelegate.getGlManager().getGl().useProgram(this._programId);\n\n    if (this._back) {\n      this._back.render(this._programId);\n    }\n    if (this._gear) {\n      this._gear.render(this._programId);\n    }\n\n    this._subdelegate.getGlManager().getGl().flush();\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n    if (lapplive2dmanager != null) {\n      lapplive2dmanager.setViewMatrix(this._viewMatrix);\n\n      lapplive2dmanager.onUpdate();\n    }\n  }\n\n  /**\n   * 画像の初期化を行う。\n   */\n  public initializeSprite(): void {\n    const width: number = this._subdelegate.getCanvas().width;\n    const height: number = this._subdelegate.getCanvas().height;\n    const textureManager = this._subdelegate.getTextureManager();\n    const resourcesPath = LAppDefine.ResourcesPath;\n\n    let imageName = '';\n\n    // 背景画像初期化\n    imageName = LAppDefine.BackImageName;\n\n    // 非同期なのでコールバック関数を作成\n    const initBackGroundTexture = (textureInfo: TextureInfo): void => {\n      const x: number = width * 0.5;\n      const y: number = height * 0.5;\n\n      const fwidth = textureInfo.width * 2.0;\n      const fheight = height * 0.95;\n      this._back = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n      this._back.setSubdelegate(this._subdelegate);\n    };\n\n    textureManager.createTextureFromPngFile(\n      resourcesPath + imageName,\n      false,\n      initBackGroundTexture\n    );\n\n    // 歯車画像初期化\n    imageName = LAppDefine.GearImageName;\n    const initGearTexture = (textureInfo: TextureInfo): void => {\n      const x = width - textureInfo.width * 0.5;\n      const y = height - textureInfo.height * 0.5;\n      const fwidth = textureInfo.width;\n      const fheight = textureInfo.height;\n      this._gear = new LAppSprite(x, y, fwidth, fheight, textureInfo.id);\n      this._gear.setSubdelegate(this._subdelegate);\n    };\n\n    textureManager.createTextureFromPngFile(\n      resourcesPath + imageName,\n      false,\n      initGearTexture\n    );\n\n    // シェーダーを作成\n    if (this._programId == null) {\n      this._programId = this._subdelegate.createShader();\n    }\n  }\n\n  /**\n   * タッチされた時に呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesBegan(pointX: number, pointY: number): void {\n    this._touchManager.touchesBegan(\n      pointX * window.devicePixelRatio,\n      pointY * window.devicePixelRatio\n    );\n  }\n\n  /**\n   * タッチしているときにポインタが動いたら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesMoved(pointX: number, pointY: number): void {\n    const posX = pointX * window.devicePixelRatio;\n    const posY = pointY * window.devicePixelRatio;\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n\n    const viewX: number = this.transformViewX(this._touchManager.getX());\n    const viewY: number = this.transformViewY(this._touchManager.getY());\n\n    this._touchManager.touchesMoved(posX, posY);\n\n    lapplive2dmanager.onDrag(viewX, viewY);\n  }\n\n  /**\n   * タッチが終了したら呼ばれる。\n   *\n   * @param pointX スクリーンX座標\n   * @param pointY スクリーンY座標\n   */\n  public onTouchesEnded(pointX: number, pointY: number): void {\n    const posX = pointX * window.devicePixelRatio;\n    const posY = pointY * window.devicePixelRatio;\n\n    const lapplive2dmanager = this._subdelegate.getLive2DManager();\n\n    // タッチ終了\n    lapplive2dmanager.onDrag(0.0, 0.0);\n\n    // シングルタップ\n    const x: number = this.transformViewX(posX);\n    const y: number = this.transformViewY(posY);\n\n    if (LAppDefine.DebugTouchLogEnable) {\n      LAppPal.printMessage(`[APP]touchesEnded x: ${x} y: ${y}`);\n    }\n    lapplive2dmanager.onTap(x, y);\n\n    // 歯車にタップしたか\n    if (this._gear.isHit(posX, posY)) {\n      lapplive2dmanager.nextScene();\n    }\n  }\n\n  /**\n   * X座標をView座標に変換する。\n   *\n   * @param deviceX デバイスX座標\n   */\n  public transformViewX(deviceX: number): number {\n    const screenX: number = this._deviceToScreen.transformX(deviceX); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformX(screenX); // 拡大、縮小、移動後の値。\n  }\n\n  /**\n   * Y座標をView座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformViewY(deviceY: number): number {\n    const screenY: number = this._deviceToScreen.transformY(deviceY); // 論理座標変換した座標を取得。\n    return this._viewMatrix.invertTransformY(screenY);\n  }\n\n  /**\n   * X座標をScreen座標に変換する。\n   * @param deviceX デバイスX座標\n   */\n  public transformScreenX(deviceX: number): number {\n    return this._deviceToScreen.transformX(deviceX);\n  }\n\n  /**\n   * Y座標をScreen座標に変換する。\n   *\n   * @param deviceY デバイスY座標\n   */\n  public transformScreenY(deviceY: number): number {\n    return this._deviceToScreen.transformY(deviceY);\n  }\n\n  _touchManager: TouchManager; // タッチマネージャー\n  _deviceToScreen: CubismMatrix44; // デバイスからスクリーンへの行列\n  _viewMatrix: CubismViewMatrix; // viewMatrix\n  _programId: WebGLProgram; // シェーダID\n  _back: LAppSprite; // 背景画像\n  _gear: LAppSprite; // ギア画像\n  _changeModel: boolean; // モデル切り替えフラグ\n  _isClick: boolean; // クリック中\n  private _subdelegate: LAppSubdelegate;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport * as LAppDefine from './lappdefine';\nimport { LAppGlManager } from './lappglmanager';\nimport { LAppLive2DManager } from './lapplive2dmanager';\nimport { LAppPal } from './lapppal';\nimport { LAppTextureManager } from './lapptexturemanager';\nimport { LAppView } from './lappview';\n\n/**\n * Canvasに関連する操作を取りまとめるクラス\n */\nexport class LAppSubdelegate {\n  /**\n   * コンストラクタ\n   */\n  public constructor() {\n    this._canvas = null;\n    this._glManager = new LAppGlManager();\n    this._textureManager = new LAppTextureManager();\n    this._live2dManager = new LAppLive2DManager();\n    this._view = new LAppView();\n    this._frameBuffer = null;\n    this._captured = false;\n  }\n\n  /**\n   * デストラクタ相当の処理\n   */\n  public release(): void {\n    this._resizeObserver.unobserve(this._canvas);\n    this._resizeObserver.disconnect();\n    this._resizeObserver = null;\n\n    this._live2dManager.release();\n    this._live2dManager = null;\n\n    this._view.release();\n    this._view = null;\n\n    this._textureManager.release();\n    this._textureManager = null;\n\n    this._glManager.release();\n    this._glManager = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  public initialize(canvas: HTMLCanvasElement): boolean {\n    if (!this._glManager.initialize(canvas)) {\n      return false;\n    }\n\n    this._canvas = canvas;\n\n    if (LAppDefine.CanvasSize === 'auto') {\n      this.resizeCanvas();\n    } else {\n      canvas.width = LAppDefine.CanvasSize.width;\n      canvas.height = LAppDefine.CanvasSize.height;\n    }\n\n    this._textureManager.setGlManager(this._glManager);\n\n    const gl = this._glManager.getGl();\n\n    if (!this._frameBuffer) {\n      this._frameBuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    }\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // AppViewの初期化\n    this._view.initialize(this);\n    this._view.initializeSprite();\n\n    this._live2dManager.initialize(this);\n\n    this._resizeObserver = new ResizeObserver(\n      (entries: ResizeObserverEntry[], observer: ResizeObserver) =>\n        this.resizeObserverCallback.call(this, entries, observer)\n    );\n    this._resizeObserver.observe(this._canvas);\n\n    return true;\n  }\n\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  public onResize(): void {\n    this.resizeCanvas();\n    this._view.initialize(this);\n    this._view.initializeSprite();\n  }\n\n  private resizeObserverCallback(\n    entries: ResizeObserverEntry[],\n    observer: ResizeObserver\n  ): void {\n    if (LAppDefine.CanvasSize === 'auto') {\n      this._needResize = true;\n    }\n  }\n\n  /**\n   * ループ処理\n   */\n  public update(): void {\n    if (this._glManager.getGl().isContextLost()) {\n      return;\n    }\n\n    // キャンバスのサイズが変わっている場合はリサイズに必要な処理をする。\n    if (this._needResize) {\n      this.onResize();\n      this._needResize = false;\n    }\n\n    const gl = this._glManager.getGl();\n\n    // 画面の初期化\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n    // 深度テストを有効化\n    gl.enable(gl.DEPTH_TEST);\n\n    // 近くにある物体は、遠くにある物体を覆い隠す\n    gl.depthFunc(gl.LEQUAL);\n\n    // カラーバッファや深度バッファをクリアする\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.clearDepth(1.0);\n\n    // 透過設定\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    // 描画更新\n    this._view.render();\n  }\n\n  /**\n   * シェーダーを登録する。\n   */\n  public createShader(): WebGLProgram {\n    const gl = this._glManager.getGl();\n\n    // バーテックスシェーダーのコンパイル\n    const vertexShaderId = gl.createShader(gl.VERTEX_SHADER);\n\n    if (vertexShaderId == null) {\n      LAppPal.printMessage('failed to create vertexShader');\n      return null;\n    }\n\n    const vertexShader: string =\n      'precision mediump float;' +\n      'attribute vec3 position;' +\n      'attribute vec2 uv;' +\n      'varying vec2 vuv;' +\n      'void main(void)' +\n      '{' +\n      '   gl_Position = vec4(position, 1.0);' +\n      '   vuv = uv;' +\n      '}';\n\n    gl.shaderSource(vertexShaderId, vertexShader);\n    gl.compileShader(vertexShaderId);\n\n    // フラグメントシェーダのコンパイル\n    const fragmentShaderId = gl.createShader(gl.FRAGMENT_SHADER);\n\n    if (fragmentShaderId == null) {\n      LAppPal.printMessage('failed to create fragmentShader');\n      return null;\n    }\n\n    const fragmentShader: string =\n      'precision mediump float;' +\n      'varying vec2 vuv;' +\n      'uniform sampler2D texture;' +\n      'void main(void)' +\n      '{' +\n      '   gl_FragColor = texture2D(texture, vuv);' +\n      '}';\n\n    gl.shaderSource(fragmentShaderId, fragmentShader);\n    gl.compileShader(fragmentShaderId);\n\n    // プログラムオブジェクトの作成\n    const programId = gl.createProgram();\n    gl.attachShader(programId, vertexShaderId);\n    gl.attachShader(programId, fragmentShaderId);\n\n    gl.deleteShader(vertexShaderId);\n    gl.deleteShader(fragmentShaderId);\n\n    // リンク\n    gl.linkProgram(programId);\n    gl.useProgram(programId);\n\n    return programId;\n  }\n\n  public getTextureManager(): LAppTextureManager {\n    return this._textureManager;\n  }\n\n  public getFrameBuffer(): WebGLFramebuffer {\n    return this._frameBuffer;\n  }\n\n  public getCanvas(): HTMLCanvasElement {\n    return this._canvas;\n  }\n\n  public getGlManager(): LAppGlManager {\n    return this._glManager;\n  }\n\n  public getLive2DManager(): LAppLive2DManager {\n    return this._live2dManager;\n  }\n\n  /**\n   * Resize the canvas to fill the screen.\n   */\n  private resizeCanvas(): void {\n    this._canvas.width = this._canvas.clientWidth * window.devicePixelRatio;\n    this._canvas.height = this._canvas.clientHeight * window.devicePixelRatio;\n\n    const gl = this._glManager.getGl();\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n\n  /**\n   * マウスダウン、タッチダウンしたときに呼ばれる。\n   */\n  public onPointBegan(pageX: number, pageY: number): void {\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n    this._captured = true;\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesBegan(localX, localY);\n  }\n\n  /**\n   * マウスポインタが動いたら呼ばれる。\n   */\n  public onPointMoved(pageX: number, pageY: number): void {\n    if (!this._captured) {\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesMoved(localX, localY);\n  }\n\n  /**\n   * クリックが終了したら呼ばれる。\n   */\n  public onPointEnded(pageX: number, pageY: number): void {\n    this._captured = false;\n\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesEnded(localX, localY);\n  }\n\n  /**\n   * タッチがキャンセルされると呼ばれる。\n   */\n  public onTouchCancel(pageX: number, pageY: number): void {\n    this._captured = false;\n\n    if (!this._view) {\n      LAppPal.printMessage('view notfound');\n      return;\n    }\n\n    const localX: number = pageX - this._canvas.offsetLeft;\n    const localY: number = pageY - this._canvas.offsetTop;\n\n    this._view.onTouchesEnded(localX, localY);\n  }\n\n  public isContextLost(): boolean {\n    return this._glManager.getGl().isContextLost();\n  }\n\n  private _canvas: HTMLCanvasElement;\n\n  /**\n   * View情報\n   */\n  private _view: LAppView;\n\n  /**\n   * テクスチャマネージャー\n   */\n  private _textureManager: LAppTextureManager;\n  private _frameBuffer: WebGLFramebuffer;\n  private _glManager: LAppGlManager;\n  private _live2dManager: LAppLive2DManager;\n\n  /**\n   * ResizeObserver\n   */\n  private _resizeObserver: ResizeObserver;\n\n  /**\n   * クリックしているか\n   */\n  private _captured: boolean;\n\n  private _needResize: boolean;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { csmVector } from '@framework/type/csmvector';\nimport { CubismFramework, Option } from '@framework/live2dcubismframework';\nimport * as LAppDefine from './lappdefine';\nimport { LAppPal } from './lapppal';\nimport { LAppSubdelegate } from './lappsubdelegate';\nimport { CubismLogError } from '@framework/utils/cubismdebug';\n\nexport let s_instance: LAppDelegate = null;\n\n/**\n * アプリケーションクラス。\n * Cubism SDKの管理を行う。\n */\nexport class LAppDelegate {\n  /**\n   * クラスのインスタンス（シングルトン）を返す。\n   * インスタンスが生成されていない場合は内部でインスタンスを生成する。\n   *\n   * @return クラスのインスタンス\n   */\n  public static getInstance(): LAppDelegate {\n    if (s_instance == null) {\n      s_instance = new LAppDelegate();\n    }\n\n    return s_instance;\n  }\n\n  /**\n   * クラスのインスタンス（シングルトン）を解放する。\n   */\n  public static releaseInstance(): void {\n    if (s_instance != null) {\n      s_instance.release();\n    }\n\n    s_instance = null;\n  }\n\n  /**\n   * ポインタがアクティブになるときに呼ばれる。\n   */\n  private onPointerBegan(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointBegan(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタが動いたら呼ばれる。\n   */\n  private onPointerMoved(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointMoved(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタがアクティブでなくなったときに呼ばれる。\n   */\n  private onPointerEnded(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onPointEnded(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * ポインタがキャンセルされると呼ばれる。\n   */\n  private onPointerCancel(e: PointerEvent): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().onTouchCancel(e.pageX, e.pageY);\n    }\n  }\n\n  /**\n   * Resize canvas and re-initialize view.\n   */\n  public onResize(): void {\n    for (let i = 0; i < this._subdelegates.getSize(); i++) {\n      this._subdelegates.at(i).onResize();\n    }\n  }\n\n  /**\n   * 実行処理。\n   */\n  public run(): void {\n    // メインループ\n    const loop = (): void => {\n      // インスタンスの有無の確認\n      if (s_instance == null) {\n        return;\n      }\n\n      // 時間更新\n      LAppPal.updateTime();\n\n      for (let i = 0; i < this._subdelegates.getSize(); i++) {\n        this._subdelegates.at(i).update();\n      }\n\n      // ループのために再帰呼び出し\n      requestAnimationFrame(loop);\n    };\n    loop();\n  }\n\n  /**\n   * 解放する。\n   */\n  private release(): void {\n    this.releaseEventListener();\n    this.releaseSubdelegates();\n\n    // Cubism SDKの解放\n    CubismFramework.dispose();\n\n    this._cubismOption = null;\n  }\n\n  /**\n   * イベントリスナーを解除する。\n   */\n  private releaseEventListener(): void {\n    document.removeEventListener('pointerup', this.pointBeganEventListener);\n    this.pointBeganEventListener = null;\n    document.removeEventListener('pointermove', this.pointMovedEventListener);\n    this.pointMovedEventListener = null;\n    document.removeEventListener('pointerdown', this.pointEndedEventListener);\n    this.pointEndedEventListener = null;\n    document.removeEventListener('pointerdown', this.pointCancelEventListener);\n    this.pointCancelEventListener = null;\n  }\n\n  /**\n   * Subdelegate を解放する\n   */\n  private releaseSubdelegates(): void {\n    for (\n      let ite = this._subdelegates.begin();\n      ite.notEqual(this._subdelegates.end());\n      ite.preIncrement()\n    ) {\n      ite.ptr().release();\n    }\n\n    this._subdelegates.clear();\n    this._subdelegates = null;\n  }\n\n  /**\n   * APPに必要な物を初期化する。\n   */\n  public initialize(): boolean {\n    // Cubism SDKの初期化\n    this.initializeCubism();\n\n    this.initializeSubdelegates();\n    this.initializeEventListener();\n\n    return true;\n  }\n\n  /**\n   * イベントリスナーを設定する。\n   */\n  private initializeEventListener(): void {\n    this.pointBeganEventListener = this.onPointerBegan.bind(this);\n    this.pointMovedEventListener = this.onPointerMoved.bind(this);\n    this.pointEndedEventListener = this.onPointerEnded.bind(this);\n    this.pointCancelEventListener = this.onPointerCancel.bind(this);\n\n    // ポインタ関連コールバック関数登録\n    document.addEventListener('pointerdown', this.pointBeganEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointermove', this.pointMovedEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointerup', this.pointEndedEventListener, {\n      passive: true\n    });\n    document.addEventListener('pointercancel', this.pointCancelEventListener, {\n      passive: true\n    });\n  }\n\n  /**\n   * Cubism SDKの初期化\n   */\n  private initializeCubism(): void {\n    LAppPal.updateTime();\n\n    // setup cubism\n    this._cubismOption.logFunction = LAppPal.printMessage;\n    this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\n    CubismFramework.startUp(this._cubismOption);\n\n    // initialize cubism\n    CubismFramework.initialize();\n  }\n\n  /**\n   * Canvasを生成配置、Subdelegateを初期化する\n   */\n  private initializeSubdelegates(): void {\n    let width: number = 100;\n    let height: number = 100;\n    if (LAppDefine.CanvasNum > 3) {\n      const widthunit: number = Math.ceil(Math.sqrt(LAppDefine.CanvasNum));\n      const heightUnit = Math.ceil(LAppDefine.CanvasNum / widthunit);\n      width = 100.0 / widthunit;\n      height = 100.0 / heightUnit;\n    } else {\n      width = 100.0 / LAppDefine.CanvasNum;\n    }\n\n    this._canvases.prepareCapacity(LAppDefine.CanvasNum);\n    this._subdelegates.prepareCapacity(LAppDefine.CanvasNum);\n    for (let i = 0; i < LAppDefine.CanvasNum; i++) {\n      const canvas = document.createElement('canvas');\n      this._canvases.pushBack(canvas);\n      canvas.style.width = `${width}vw`;\n      canvas.style.height = `${height}vh`;\n\n      // キャンバスを DOM に追加\n      document.body.appendChild(canvas);\n    }\n\n    for (let i = 0; i < this._canvases.getSize(); i++) {\n      const subdelegate = new LAppSubdelegate();\n      subdelegate.initialize(this._canvases.at(i));\n      this._subdelegates.pushBack(subdelegate);\n    }\n\n    for (let i = 0; i < LAppDefine.CanvasNum; i++) {\n      if (this._subdelegates.at(i).isContextLost()) {\n        CubismLogError(\n          `The context for Canvas at index ${i} was lost, possibly because the acquisition limit for WebGLRenderingContext was reached.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Privateなコンストラクタ\n   */\n  private constructor() {\n    this._cubismOption = new Option();\n    this._subdelegates = new csmVector<LAppSubdelegate>();\n    this._canvases = new csmVector<HTMLCanvasElement>();\n  }\n\n  /**\n   * Cubism SDK Option\n   */\n  private _cubismOption: Option;\n\n  /**\n   * 操作対象のcanvas要素\n   */\n  private _canvases: csmVector<HTMLCanvasElement>;\n\n  /**\n   * Subdelegate\n   */\n  private _subdelegates: csmVector<LAppSubdelegate>;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointBeganEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointMovedEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointEndedEventListener: (this: Document, ev: PointerEvent) => void;\n\n  /**\n   * 登録済みイベントリスナー 関数オブジェクト\n   */\n  private pointCancelEventListener: (this: Document, ev: PointerEvent) => void;\n}\n","/**\n * Copyright(c) Live2D Inc. All rights reserved.\n *\n * Use of this source code is governed by the Live2D Open Software license\n * that can be found at https://www.live2d.com/eula/live2d-open-software-license-agreement_en.html.\n */\n\nimport { LAppDelegate } from './lappdelegate';\nimport * as LAppDefine from './lappdefine';\n\n/**\n * ブラウザロード後の処理\n */\nwindow.addEventListener(\n  'load',\n  (): void => {\n    // Initialize WebGL and create the application instance\n    if (!LAppDelegate.getInstance().initialize()) {\n      return;\n    }\n\n    LAppDelegate.getInstance().run();\n  },\n  { passive: true }\n);\n\n/**\n * 終了時の処理\n */\nwindow.addEventListener(\n  'beforeunload',\n  (): void => LAppDelegate.releaseInstance(),\n  { passive: true }\n);\n\n\n","let threadId = null;\nlet useStreamAgent = false;\nconst chatBox = document.getElementById('chatBox');\nconst agentStatus = document.getElementById('agentStatus');\nconst toggleAgentBtn = document.getElementById('toggleAgentBtn');\n\nfunction appendMessage(role, text) {\n  const msgDiv = document.createElement('div');\n  msgDiv.className = 'message';\n\n  const roleSpan = document.createElement('span');\n  roleSpan.className = role;\n  roleSpan.textContent =\n    role === 'user' ? 'user：' :\n    role === 'assistant' ? 'agent：' :\n    role === 'tool' ? 'tool：' : '';\n\n  const contentSpan = document.createElement('span');\n  contentSpan.className = 'content';\n  contentSpan.textContent = text;\n\n  msgDiv.appendChild(roleSpan);\n  msgDiv.appendChild(contentSpan);\n  chatBox.appendChild(msgDiv);\n  chatBox.scrollTop = chatBox.scrollHeight;\n}\n\ntoggleAgentBtn.addEventListener('click', () => {\n  useStreamAgent = !useStreamAgent;\n  agentStatus.textContent = useStreamAgent ? 'Stream Agent' : 'Invoke Agent';\n  toggleAgentBtn.textContent = useStreamAgent ? 'mode' : 'mode';\n});\n\ndocument.getElementById('submitBtn')?.addEventListener('click', async () => {\n  const textInput = document.getElementById('textInput');\n  const userInput = textInput.value.trim();\n  if (!userInput) return;\n\n  if (!threadId) {\n    threadId = `thread-${crypto.randomUUID()}`;\n  }\n\n  appendMessage(\"user\", userInput);\n\n  const assistantMsgDiv = document.createElement('div');\n  assistantMsgDiv.className = 'message';\n  const assistantRole = document.createElement('span');\n  assistantRole.className = 'assistant';\n  assistantRole.textContent = 'agent：';\n  const assistantContentRef = document.createElement('span');\n  assistantContentRef.className = 'content';\n  assistantContentRef.textContent = 'thinking...';\n  assistantMsgDiv.appendChild(assistantRole);\n  assistantMsgDiv.appendChild(assistantContentRef);\n  chatBox.appendChild(assistantMsgDiv);\n  chatBox.scrollTop = chatBox.scrollHeight;\n\n  const payload = {\n    thread_id: threadId,\n    messages: [\n      { role: \"system\", content: \"You are a helpful assistant.\" },\n      { role: \"user\", content: userInput }\n    ],\n    llm_config: {\n      model: \"openai:gpt-4o-mini\",\n      temperature: 1,\n      max_tokens: null\n    },\n    max_steps: 20\n  };\n\n  try {\n    if (useStreamAgent) {\n      const response = await fetch(\"http://localhost:8000/v1/agents/stream\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let assistantReply = \"\";\n      let toolsSet = new Set();\n\n      let eventType = null;\n      let eventData = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        const lines = chunk.split(\"\\n\");\n\n        for (const line of lines) {\n          if (line.startsWith(\"event: \")) {\n            eventType = line.slice(7).trim();\n          } else if (line.startsWith(\"data: \")) {\n            eventData += line.slice(6).trim();\n          } else if (line.trim() === \"\") {\n            if (eventType && eventData) {\n              const data = JSON.parse(eventData);\n\n              switch (eventType) {\n                case \"stream.llm_tokens.delta\":\n                  assistantReply += data.llm_tokens;\n                  if (assistantContentRef) {\n                    assistantContentRef.textContent = assistantReply;\n                  }\n                  break;\n\n                case \"stream.tool_call.done\":\n                  if (!toolsSet.has(data.tool_name)) {\n                    toolsSet.add(data.tool_name);\n                    appendMessage(\"tool\", `${data.tool_name} ➜ ${data.tool_output}`);\n                  }\n                  break;\n\n                case \"stream.completed\":\n                  console.log(\"✅ Stream completed.\");\n                  break;\n\n                case \"error\":\n                  appendMessage(\"assistant\", `❌ 錯誤：${data.error}`);\n                  break;\n              }\n            }\n            eventType = null;\n            eventData = \"\";\n          }\n        }\n      }\n    } else {\n      const res = await fetch(\"http://localhost:8000/v1/agents/invoke\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      });\n\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(`HTTP ${res.status} - ${text}`);\n      }\n\n      const data = await res.json();\n      const reply = data.messages?.[0]?.content ?? \"⚠️ 無回應\";\n      if (assistantContentRef) {\n        assistantContentRef.textContent = reply;\n      }\n\n      if (Array.isArray(data.tools_used)) {\n        data.tools_used.forEach(tool => {\n          if (tool.name && tool.output) {\n            appendMessage(\"tool\", `${tool.name} ➜ ${tool.output}`);\n          }\n        });\n      }\n    }\n  } catch (err) {\n    if (assistantContentRef) {\n      assistantContentRef.textContent = `❌ 錯誤：${err.message}`;\n    }\n  }\n\n  textInput.value = \"\";\n});\n"],"names":["_csmVector","initialCapacity","index","value","offset","ret","newSize","i","callPlacementNew","sub","position","begin","end","dstSi","srcSi","srcEi","addCount","addSize","ite","iterator","newVector","csmVector","iterator$1","v","Live2DCubismFramework","$.csmVector","$.iterator","csmString","c","length","s","$.csmString","CubismId","id","$.CubismId","CubismIdManager","ids","result","$.CubismIdManager","CubismMatrix44","a","b","dst","n","j","k","tr","src","x","y","tr1","m","cloneMatrix","$.CubismMatrix44","csmRect","w","h","r","$.csmRect","CubismRenderer","renderer","model","matrix44","red","green","blue","alpha","opacity","modelColorRGBA","enable","culling","high","CubismTextureColor","CubismBlendMode","g","CubismClippingContext","clippingDrawableIndices","clipCount","drawableIndex","$.CubismBlendMode","$.CubismRenderer","$.CubismTextureColor","CubismLogPrint","level","fmt","args","CubismDebug","CubismLogPrintIn","CSM_ASSERT","expr","CubismLogDebug","CubismLogInfo","CubismLogWarning","CubismLogError","LogLevel","logLevel","format","CubismFramework","logPrint","buffer","data","$.CubismDebug","csmPair","key","_csmMap","size","findIndex","found","fitToSize","csmMap","idx","iteold","$.csmMap","$.csmPair","CubismJsonExtension","obj","map","convValue","JsonBoolean","JsonString","JsonFloat","JsonMap","JsonNullvalue","arr","JsonArray","CSM_JSON_ERROR_TYPE_MISMATCH","CSM_JSON_ERROR_INDEX_OF_BOUNDS","Value$2","Value","defaultValue","indent","errorStr","JsonError","CubismJson","json","instance","uint8Array","str","len","parseCallback","endPos","decodeBuffer","strbuf","outEndPos","o","f","afterString","strtod","string","c2","bufStart","localRetEndPos2","ok","FOR_LOOP","FOR_LOOP2","FOR_LOOP3","localRetEndpos2","isStatic","stringBuffer","iter","$.CubismJson","$.JsonArray","$.JsonBoolean","$.JsonError","$.JsonFloat","$.JsonMap","$.JsonNullvalue","$.JsonString","$.Value","endPtr","testC","test","number","d","s_isStarted","s_isInitialized","s_option","s_cubismIdManager","Constant","csmDelete","address","option","version","major","minor","patch","versionNumber","memorySize","message","Option","LogLevel2","$.Constant","$.csmDelete","$.CubismFramework","CanvasNum","ViewScale","ViewMaxScale","ViewMinScale","ViewLogicalLeft","ViewLogicalRight","ViewLogicalMaxLeft","ViewLogicalMaxRight","ViewLogicalMaxBottom","ViewLogicalMaxTop","ResourcesPath","BackImageName","GearImageName","ModelDir","ModelDirSize","MotionGroupIdle","MotionGroupTapBody","HitAreaNameHead","HitAreaNameBody","PriorityIdle","PriorityNormal","PriorityForce","CubismLoggingLevel","_LAppPal","filePath","callback","response","arrayBuffer","LAppPal","LAppGlManager","canvas","CubismDefaultParameterId","$.CubismDefaultParameterId","ICubismModelSetting","$.ICubismModelSetting","FrequestNode","FrequestNode2","CubismModelSettingJson","pathArray","arrayLength","textureDirectoryStr","groupName","outLayoutMap","num","refI","node","$.CubismModelSettingJson","$.FrequestNode","CubismBreath","breathParameters","deltaTimeSeconds","t","BreathParameterData","parameterId","peak","cycle","weight","$.BreathParameterData","$.CubismBreath","_CubismEyeBlink","modelSetting","eyeBlink","blinkingInterval","closing","closed","opening","parameterIds","parameterValue","CubismEyeBlink","EyeState","EyeState2","$.CubismEyeBlink","$.EyeState","Epsilon","DefaultFadeInSeconds","FadeIn","Link","Groups","Id","CubismPose","pose3json","root","poseListInfo","poseCount","poseIndex","idListInfo","idCount","groupCount","groupIndex","partInfo","partData","PartData","linkListInfo","linkCount","linkIndex","linkPart","linkId","pose","beginIndex","partGroupCount","partsIndex","paramIndex","partIndex","linkPartIndex","visiblePartIndex","newOpacity","phi","backOpacityThreshold","a1","clonePartData","$.CubismPose","$.PartData","CubismModelMatrix","scaleX","scaleY","layout","keyWidth","keyHeight","keyX","keyY","keyCenterX","keyCenterY","keyTop","keyBottom","keyLeft","keyRight","$.CubismModelMatrix","CubismVector2","vector2","scalar","rhs","$.CubismVector2","_CubismMath","min","max","cx","isNegativeNumber","left","right","degrees","radian","from","to","q1","q2","degree","totalAngle","ba","ca","da","p","p3","q","discriminant","center","threshold","mp3","mp33","cosphi","t1","root1","root2","root3","u1","sd","v1","dividend","divisor","absDividend","absDivisor","CubismMath","$.CubismMath","FrameRate","CubismTargetPoint","maxV","deltaTimeWeight","frameToMaxSpeed","maxA","dx","dy","vx","vy","ax","ay","curV","$.CubismTargetPoint","ACubismMotion","onBeganMotionHandler","onFinishedMotionHandler","motion","motionQueueEntry","userTimeSeconds","fadeWeight","fadeIn","fadeOut","fadeInSeconds","fadeOutSeconds","offsetSeconds","loop","loopFadeIn","beforeCheckTimeSeconds","motionTimeSeconds","duration","endTime","$.ACubismMotion","ExpressionKeyFadeIn","ExpressionKeyFadeOut","ExpressionKeyParameters","ExpressionKeyId","ExpressionKeyValue","ExpressionKeyBlend","BlendValueAdd","BlendValueMultiply","BlendValueOverwrite","DefaultFadeTime","_CubismExpressionMotion","expression","parameter","expressionParameterValues","expressionIndex","expressionParameterValue","currentParameterValue","expressionParameters","parameterIndex","newAdditiveValue","newMultiplyValue","newOverwriteValue","parameterCount","param","blendType","item","ExpressionParameter","source","destination","CubismExpressionMotion","ExpressionBlendType","$.CubismExpressionMotion","$.ExpressionBlendType","$.ExpressionParameter","CubismMotionQueueEntry","newEndTimeSeconds","startTime","timeSeconds","checkSeconds","$.CubismMotionQueueEntry","CubismMotionQueueManager","autoDelete","InvalidMotionQueueEntryHandleValue","motionQueueEntryNumber","customData","updated","firedList","$.CubismMotionQueueManager","$.InvalidMotionQueueEntryHandleValue","ExpressionParameterValue","CubismExpressionMotionManager","expressionFadeWeight","priority","motions","expressionWeight","difference","expressionMotion","$.CubismExpressionMotionManager","CubismMotionCurveTarget","CubismMotionCurveTarget2","CubismMotionSegmentType","CubismMotionPoint","CubismMotionSegment","CubismMotionCurve","CubismMotionEvent","CubismMotionData","$.CubismMotionCurve","$.CubismMotionCurveTarget","$.CubismMotionData","$.CubismMotionEvent","$.CubismMotionPoint","$.CubismMotionSegment","$.CubismMotionSegmentType","Meta","Duration","Loop","AreBeziersRestricted","CurveCount","Fps","TotalSegmentCount","TotalPointCount","Curves","Target","FadeInTime","FadeOutTime","Segments","UserData","UserDataCount","TotalUserDataSize","Time","CubismMotionJson","actualCurveListSize","actualTotalSegmentCount","actualTotalPointCount","curvePosition","segmentPosition","flagType","curveIndex","segmentIndex","userDataIndex","EvaluationOptionFlag","$.CubismMotionJson","EffectNameEyeBlink","EffectNameLipSync","TargetNameModel","TargetNameParameter","TargetNamePartOpacity","IdNameOpacity","UseOldBeziersCurveMotion","lerpPoints","linearEvaluate","points","time","bezierEvaluate","p01","p12","p23","p012","p123","bezierEvaluateCardanoInterpretation","x1","x2","cx1","cx2","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","isCorrection","curve","target","totalSegmentCount","pointPosition","correctEndPoint","segment","endIndex","motionPoint","CubismMotion","timeOffsetSeconds","lipSyncValue","eyeBlinkValue","maxTargetSize","lipSyncFlags","eyeBlinkFlags","tmpFadeIn","tmpFadeOut","curves","sourceValue","fin","fout","paramWeight","motionBehavior","eyeBlinkParameterIds","lipSyncParameterIds","motionJson","areBeziersRestructed","totalPointCount","curveCount","userdatacount","u","debugMode","$.CubismMotion","CubismMotionManager","val","$.CubismMotionManager","CubismPhysicsTargetType","CubismPhysicsTargetType2","CubismPhysicsSource","CubismPhysicsSource2","PhysicsJsonEffectiveForces","CubismPhysicsParameter","CubismPhysicsNormalization","CubismPhysicsParticle","CubismPhysicsSubRig","CubismPhysicsInput","CubismPhysicsOutput","CubismPhysicsRig","$.CubismPhysicsInput","$.CubismPhysicsNormalization","$.CubismPhysicsOutput","$.CubismPhysicsParameter","$.CubismPhysicsParticle","$.CubismPhysicsRig","$.CubismPhysicsSource","$.CubismPhysicsSubRig","$.CubismPhysicsTargetType","$.PhysicsJsonEffectiveForces","Position","X","Y","Angle","Type","EffectiveForces","TotalInputCount","TotalOutputCount","PhysicsSettingCount","Gravity","Wind","VertexCount","PhysicsSettings","Normalization","Minimum","Maximum","Default","Reflect","Weight","Input","Source","Output","Scale","VertexIndex","Destination","Vertices","Mobility","Delay","Radius","Acceleration","CubismPhysicsJson","physicsSettingIndex","inputIndex","outputIndex","vertexIndex","$.CubismPhysicsJson","PhysicsTypeTagX","PhysicsTypeTagY","PhysicsTypeTagAngle","AirResistance","MaximumWeight","MovementThreshold","MaxDeltaTime","CubismPhysics","physics","physicsJson","particleIndex","getInputTranslationXFromNormalizedParameterValue","getInputTranslationYFromNormalizedParamterValue","getInputAngleFromNormalizedParameterValue","currentRigOutput","PhysicsOutput","previousRigOutput","getOutputTranslationX","getOutputScaleTranslationX","getOutputTranslationY","getOutputScaleTranslationY","getOutputAngle","getOutputScaleAngle","radAngle","outputValue","totalTranslation","currentSetting","currentInputs","currentOutputs","currentParticles","parameterValues","parameterMaximumValues","parameterMinimumValues","parameterDefaultValues","_a","_b","settingIndex","updateParticlesForStabilization","translation","destinationParameterIndex","outParameterCaches","updateOutputParameterValue","outParamIndex","physicsDeltaTime","inputWeight","updateParticles","outParameterValues","options","Options","strand","radius","sign","targetTranslation","targetAngle","parameterMinimumValue","parameterMaximumValue","parameterDefaultValue","normalizationPosition","normalizationAngle","isInverted","normalizeParameterValue","normalizaitionPosition","particles","parentGravity","getRangeValue","maxValue","minValue","getDefaultValue","translationScale","angleScale","strandCount","windDirection","thresholdValue","airResistance","delay","direction","velocity","force","newDirection","totalRadian","currentGravity","parameterValueMinimum","parameterValueMaximum","output","outputScale","parameterMinimum","parameterMaximum","parameterDefault","normalizedMinimum","normalizedMaximum","normalizedDefault","minNormValue","maxNormValue","middleNormValue","middleValue","paramValue","nLength","pLength","$.CubismPhysics","$.Options","ColorChannelCount","ClippingMaskMaxCountOnDefault","ClippingMaskMaxCountOnMultiRenderTexture","CubismClippingManager","clippingContextFactory","tmp","renderTextureCount","clippingContext","drawableMasks","drawableMaskCounts","count","sameCount","clipId","isRightHanded","usingClipCount","clipIndex","cc","clipContext","allClippedDrawRect","layoutBoundsOnTex01","margin","ppu","maskPixelSize","physicalMaskWidth","physicalMaskHeight","useClippingMaskMaxCount","layoutCountMaxValue","countPerSheetDiv","reduceLayoutTextureCount","divCount","modCount","curClipIndex","renderTextureIndex","channelIndex","layoutCount","checkChannelIndex","xpos","ypos","clippedDrawTotalMinX","clippedDrawTotalMinY","clippedDrawTotalMaxX","clippedDrawTotalMaxY","clippedDrawCount","clippedDrawableIndex","drawableVertexCount","drawableVertexes","minX","minY","maxX","maxY","pi","channelNo","s_instance","ShaderCount","CubismShader_WebGL","srcColor","dstColor","srcAlpha","dstAlpha","masked","invertedMask","shaderSet","vertexArray","uvArray","tex","colorChannel","textureNo","textureId","matrix4x4","baseColor","multiplyColor","screenColor","indexArray","rect","CubismShaderSet","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","vertexShaderSource","fragmentShaderSource","shaderProgram","vertShader","fragShader","shaderType","shaderSource","shader","log","gl","CubismShaderManager_WebGL","ShaderNames","ShaderNames2","$.CubismShaderSet","$.CubismShader_WebGL","$.CubismShaderManager_WebGL","$.ShaderNames","s_viewport","s_fbo","CubismClippingManager_WebGL","CubismRenderTextureResource","CubismClippingContext_WebGL","allClipedDrawRect","clipContextRenderTexture","clipDrawCount","clipDrawIndex","frameNo","texture","manager","CubismRendererProfile_WebGL","enabled","CubismRenderer_WebGL","maskBufferCount","modelTextureNo","glTexture","drawableCount","renderOrder","order","indexCount","fbo","viewport","clip","$.CubismClippingContext_WebGL","$.CubismClippingManager_WebGL","$.CubismRenderTextureResource","$.CubismRenderer_WebGL","DrawableColorData","isOverwritten","color","PartColorData","DrawableCullingData","isCulling","CubismModel","savedParameterCount","partColors","drawableColors","drawableindex","constantFlags","isOverwrittenCullings","partId","partCount","drawableId","dynamicFlags","multiplyColors","screenColors","partIds","drawableIds","userCulling","userMultiplyColor","userScreenColor","parentIndex","$.CubismModel","CubismMoc","mocBytes","shouldCheckMocConsistency","cubismMoc","moc","cubismModel","$.CubismMoc","CubismModelUserDataJson","$.CubismModelUserDataJson","ArtMesh","CubismModelUserDataNode","CubismModelUserData","modelUserData","typeOfArtMesh","nodeCount","addNode","$.CubismModelUserData","$.CubismModelUserDataNode","CubismUserModel","z","name","group","fadeInTime","fadeOutTime","pointX","pointY","drawIndex","vertices","top","bottom","tx","ty","eventValue","caller","$.CubismUserModel","LAppWavFileHandler","WavFileInfo","ByteReader","goalOffset","rms","channelCount","sampleCount","pcm","resolveValue","asyncFileLoad","responce","fmtChunkSize","dataChunkSize","e","pcm32","usechannel","reference","getSignature","referenceString","signatureOffset","LAppModel","dir","fileName","setting","error","modelFileName","loadCubismExpression","expressionName","expressionFileName","loadCubismPhysics","physicsFileName","loadCubismPose","poseFileName","setupEyeBlink","setupBreath","loadUserData","userDataFile","setupEyeBlinkIds","eyeBlinkIdCount","setupLipSyncIds","lipSyncIdCount","setupLayout","loadCubismMotion","motionGroupCount","textureCount","modelTextureNumber","texturePath","onLoad","textureInfo","motionUpdated","LAppDefine.MotionGroupIdle","LAppDefine.PriorityIdle","no","LAppDefine.PriorityForce","motionFileName","voice","path","expressionId","hitArenaName","drawId","tmpMotion","matrix","subdelegate","LAppLive2DManager","self","LAppDefine.HitAreaNameHead","LAppDefine.HitAreaNameBody","LAppDefine.MotionGroupTapBody","LAppDefine.PriorityNormal","width","height","projection","LAppDefine.ModelDirSize","LAppDefine.ModelDir","modelPath","LAppDefine.ResourcesPath","modelJsonName","sceneIndex","LAppTextureManager","usePremultiply","img","TextureInfo","glManager","CubismViewMatrix","cy","scale","maxScale","minScale","targetScale","tr2","tr3","$.CubismViewMatrix","LAppSprite","Rect","programId","maxWidth","maxHeight","TouchManager","deviceX","deviceY","y1","y2","v2","absoluteValue1","absoluteValue2","LAppView","ratio","LAppDefine.ViewLogicalLeft","LAppDefine.ViewLogicalRight","LAppDefine.ViewScale","screenW","screenH","LAppDefine.ViewMaxScale","LAppDefine.ViewMinScale","LAppDefine.ViewLogicalMaxLeft","LAppDefine.ViewLogicalMaxRight","LAppDefine.ViewLogicalMaxBottom","LAppDefine.ViewLogicalMaxTop","lapplive2dmanager","textureManager","resourcesPath","imageName","LAppDefine.BackImageName","initBackGroundTexture","fwidth","fheight","LAppDefine.GearImageName","initGearTexture","posX","posY","viewX","viewY","screenX","screenY","LAppSubdelegate","entries","observer","vertexShaderId","fragmentShaderId","pageX","pageY","localX","localY","LAppDelegate","LAppDefine.CubismLoggingLevel","LAppDefine.CanvasNum","threadId","useStreamAgent","chatBox","agentStatus","toggleAgentBtn","appendMessage","role","text","msgDiv","roleSpan","contentSpan","textInput","userInput","assistantMsgDiv","assistantRole","assistantContentRef","payload","reader","decoder","assistantReply","toolsSet","eventType","eventData","done","lines","line","res","reply","tool","err"],"mappings":"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"}